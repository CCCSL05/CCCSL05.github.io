<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git</title>
      <link href="/posts/43167/"/>
      <url>/posts/43167/</url>
      
        <content type="html"><![CDATA[<h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><p>都是对本地仓库进行操作的</p><h3 id="Git-Commit"><a href="#Git-Commit" class="headerlink" title="Git Commit"></a>Git Commit</h3><ul><li>Git 仓库中的提交记录保存的是你的目录下所有文件的快照，就像是把整个目录复制，然后再粘贴一样，但比复制粘贴优雅许多！</li><li>Git 希望提交记录尽可能地轻量，因此在你每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。</li><li>Git 还保存了提交的历史记录。这也是为什么大多数提交记录的上面都有父节点的原因，子结点指向父节点，这次指向以前</li></ul><h3 id="Git-Branch-分支名"><a href="#Git-Branch-分支名" class="headerlink" title="Git Branch 分支名"></a>Git Branch 分支名</h3><blockquote><p>如何创建和切换分支</p></blockquote><ul><li>Git 的分支也非常轻量。它们只是简单地指向某个提交纪录</li><li>使用分支其实就相当于在说：“我想基于这个提交以及它所有的父提交进行新的工作。”</li><li>看到 <code>main</code> 分支上的那个星号（*）了吗。星号标识的是当前分支。</li><li><code>Git Branch 分支名</code>，创建新分支</li><li><code>git checkout &lt;name&gt;</code>，切换到新分支</li><li>创建一个新的分支同时切换到新创建的分支的话，可以通过 <code>git checkout -b &lt;your-branch-name&gt;</code> 来实现。</li><li><code>git checkout &lt;filename&gt;</code>，把暂存区的文件恢复到工作区</li></ul><h3 id="Git-Merge-合并到当前分支的分支名"><a href="#Git-Merge-合并到当前分支的分支名" class="headerlink" title="Git Merge 合并到当前分支的分支名"></a>Git Merge 合并到当前分支的分支名</h3><blockquote><p>如何将两个分支合并到一起。就是说我们新建一个分支，在其上开发某个新功能，开发完成后再合并回主线。</p><p>==git merge 目标分支，如果目标分支和当前分支不在一条线上，则把目标分支合并过来到当前分支。如果在一条线上且在目标分支上面，则合并（跳到）目标分支。如果在目标分支下面，则不做任何处理==</p></blockquote><ul><li><code>git merge</code>。在 Git 中合并两个分支时会产生一个特殊的提交记录，它有两个父节点。翻译成自然语言相当于：“我要把这两个父节点本身及它们所有的祖先都包含进来。”</li><li><code>GIt Merge 合并到当前分支的分支名</code>，在当前分支上继续往下走，只是子节点不仅仅只想当前分支的父节点，还指向合并过来的分支。也就是有两个箭头。</li><li><code>GIt Merge 合并到当前分支的分支名</code>，如果要合并的分支是当前的父节点，那么合并就是将父分支的指向当前。</li></ul><h3 id="Git-Rebase-目标基础分支"><a href="#Git-Rebase-目标基础分支" class="headerlink" title="Git Rebase 目标基础分支"></a>Git Rebase 目标基础分支</h3><blockquote><p>另外一种合并分支的方法</p><p>把分叉的地方，复制出来，粘贴到当前分支下</p></blockquote><ul><li><p>Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。</p><p>Rebase 的优势就是可以创造更线性的提交历史，如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。</p></li><li><p><code>Git Rebase 目标基础分支</code>，把目标分支接在当前分支下，原分支依旧存在，rebase产生的是副本。</p><p>然后再 <code>Git Rebase 目标基础分支</code>，这样就会把原来的分支往下移到目标分支处，这样合并就结束了。</p></li><li><p><code>git rebase 基本分支 变更分支</code></p></li></ul><h2 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h2><h3 id="分离HEAD"><a href="#分离HEAD" class="headerlink" title="分离HEAD"></a>分离HEAD</h3><blockquote><p>在提交树上移动</p></blockquote><p>在提交树上移动</p><ul><li> HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</li></ul><p>  HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</p><p>  HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</p><ul><li><p> HEAD 指向了 <code>main</code>，随着提交向前移动。</p></li><li><p>如果想看 HEAD 指向，可以通过 <code>cat .git/HEAD</code> 查看， 如果 HEAD 指向的是一个引用，还可以用 <code>git symbolic-ref HEAD</code> 查看它的指向。</p></li><li><p><u>分离的 HEAD 就是让其指向了某个具体的提交记录而不是分支名</u>。<code>git checkout C1</code>指向从main转到C1节点。C1代表提交记录的哈希值。</p><p>==提交记录就是节点==</p></li></ul><h3 id="相对引用（-）"><a href="#相对引用（-）" class="headerlink" title="相对引用（^）"></a>相对引用（^）</h3><ul><li><p>通过指定提交记录哈希值的方式在 Git 中移动不太方便。在实际应用时，并没有像本程序中这么漂亮的可视化提交树供你参考，所以你就不得不用 <code>git log</code> 来查查看提交记录的哈希值。</p><p>并且哈希值在真实的 Git 世界中也会更长（译者注：基于 SHA-1，共 40 位）。比如：<code>fed2da64c0efc5293610bdd892f82a58e8cbc5d8</code>。</p><p>比较令人欣慰的是，Git 对哈希的处理很智能。你只需要提供能够唯一标识提交记录的前几个字符即可。因此我可以仅输入<code>fed2</code> 而不是上面的一长串字符。</p></li><li><p>这里我介绍两个简单的用法：</p><ol><li><p>使用 <code>^</code> 向上移动 1 个提交记录。把这个符号 <code>^</code> 加在==引用名称==的后面，表示让 Git 寻找指定提交记录的父提交。</p><p><code>main^</code> 相当于“<code>main</code> 的父节点”。<code>main^^</code> 是 <code>main</code> 的第二个父节点</p><p>我们可以一直使用 <code>HEAD^</code> 向上移动。</p></li><li><p>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如 <code>~3</code></p></li></ol></li></ul><h3 id="相对引用（-）-1"><a href="#相对引用（-）-1" class="headerlink" title="相对引用（~）"></a>相对引用（~）</h3><ul><li><p><code>git checkout HEAD~4</code>相当于<code>git checkout HEAD^</code>四次</p></li><li><p>我使用相对引用最多的就是移动分支。可以直接使用 <code>-f</code> 选项让分支指向另一个提交。例如:</p><p><code>git branch -f main HEAD~3</code></p><p>上面的命令会将 main 分支-f强制指向 HEAD 的第 3 级父提交。</p></li></ul><h3 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h3><ul><li>和提交一样，撤销变更由底层部分（暂存区的独立文件或者片段）和上层部分（变更到底是通过哪种方式被撤销的）组成。</li><li>主要有两种方法用来撤销变更 —— 一是 <code>git reset</code>，还有就是 <code>git revert</code>。</li></ul><ol><li><strong>Git Reset</strong><ul><li><code>git reset HEAD~1</code></li><li><code>git reset</code> 通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。<code>git reset</code> 向上移动分支，原来指向的提交记录就跟从来没有提交过一样。</li><li>（译者注：在reset后， <code>C2</code> 所做的变更还在，但是处于未加入暂存区状态。）</li><li>对远程分支无效</li><li><code>git reset HEAD</code>，add到暂存区但是还没有commit，把仓库这个版本的内容重写到暂存区。–hard直接一步到位，恢复到工作区。</li></ul></li><li><strong>Git Revert</strong><ul><li><code>git revert HEAD</code></li><li>在我们要撤销的提交记录后面居然多了一个新提交！这是因为新提交记录 <code>C2&#39;</code> 引入了<strong>更改</strong> —— 这些更改刚好是用来撤销 <code>C2</code> 这个提交的。也就是说 <code>C2&#39;</code> 的状态与 <code>C1</code> 是相同的。</li><li>对远程有效</li></ul></li></ol><h2 id="移动提交记录"><a href="#移动提交记录" class="headerlink" title="移动提交记录"></a>移动提交记录</h2><p>自由修改提交树</p><h3 id="Git-Cherry-pick"><a href="#Git-Cherry-pick" class="headerlink" title="Git Cherry-pick"></a>Git Cherry-pick</h3><blockquote><p>整理提交记录</p><p>整理提交记录” —— 开发人员有时会说“我想要把这个提交放到这里, 那个提交放到刚才那个提交的后面”</p></blockquote><ul><li><code>git cherry-pick &lt;提交号&gt;...</code>，直接把所选节点 挑出来以线性的结构放在当前节点下面。</li></ul><h3 id="交互式-rebase"><a href="#交互式-rebase" class="headerlink" title="交互式 rebase"></a>交互式 rebase</h3><blockquote><p>如果你不清楚你想要的提交记录的哈希值呢? 我们可以利用交互式的 rebase ——  如果你想从一系列的提交记录中找到想要的记录</p></blockquote><p>当你知道你所需要的提交记录（并且还知道这些提交记录的哈希值）时, 用 cherry-pick 再好不过了 </p><ul><li><p>交互式 rebase 指的是使用带参数 <code>--interactive</code> 的 rebase 命令, 简写为 <code>-i</code></p><p>如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。</p><p>在实际使用时，所谓的 UI 窗口一般会在文本编辑器 —— 如 Vim —— 中打开一个文件。</p></li><li><p><code>git rebase -i HEAD~4</code>，操作最近四个</p></li></ul><p>当 rebase UI界面打开时, 你能做3件事:</p><ul><li>调整提交记录的顺序（通过鼠标拖放来完成）</li><li>删除你不想要的提交（通过切换 <code>pick</code> 的状态来完成，关闭就意味着你不想要这个提交记录）</li><li>合并提交。</li></ul><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="只取一个提交记录"><a href="#只取一个提交记录" class="headerlink" title="只取一个提交记录"></a>只取一个提交记录</h3><blockquote><p>本地栈式提交</p></blockquote><h2 id="高级话题"><a href="#高级话题" class="headerlink" title="高级话题"></a>高级话题</h2><h2 id="Push-amp-Pull-——-Git-远程仓库！"><a href="#Push-amp-Pull-——-Git-远程仓库！" class="headerlink" title="Push &amp; Pull —— Git 远程仓库！"></a>Push &amp; Pull —— Git 远程仓库！</h2><h3 id="GIt-clone"><a href="#GIt-clone" class="headerlink" title="GIt clone"></a>GIt clone</h3><blockquote><p>把远程仓库复制一份放在本地</p></blockquote><ul><li>远程仓库和本地仓库本质一样。</li><li><code>git clone 远程仓库链接</code> 命令在真实的环境下的作用是在本地创建一个远程仓库的拷贝（比如从 github.com）。</li></ul><h3 id="远程分支（指本地）"><a href="#远程分支（指本地）" class="headerlink" title="远程分支（指本地）"></a>远程分支（指本地）</h3><ul><li>远程分支反映了远程仓库(在你上次和它通信时)的状态。</li><li>远程分支有一个特别的属性，在你检出时自动进入分离 HEAD 状态。Git 这么做是出于不能直接在这些分支上进行操作的原因, 你必须在别的地方完成你的工作, （更新了远程分支之后）再用远程分享你的工作成果。</li><li>远程分支有一个命名规范 —— <code>&lt;remote name&gt;/&lt;branch name&gt;</code></li><li>大多数的开发人员会将它们主要的远程仓库命名为 <code>origin</code>，并不是 <code>o</code>。这是因为当你用 <code>git clone</code> 某个仓库时，Git 已经帮你把远程仓库的名称设置为 <code>origin</code> 了</li><li>checkout 检出远程分支是没有用滴，HEAD会指向o/main指向的节点，成为分离的HEAD</li></ul><h3 id="Git-Fetch"><a href="#Git-Fetch" class="headerlink" title="Git Fetch"></a>Git Fetch</h3><blockquote><p>Git 远程仓库相当的操作，向远程仓库传输数据以及从远程仓库获取数据</p><p>如何从远程仓库获取数据 ——  <code>git fetch</code>。</p></blockquote><ul><li>当我们从远程仓库获取数据时, 本地的远程分支也会更新以反映最新的远程仓库。</li><li><code>Git Fetch</code>，远程分支同步至远程仓库，然后还需要把远程分支合并到主分支，所以需要<code>git merge o/main</code></li></ul><ol><li><p><code>git fetch</code> 完成了仅有的但是很重要的两步:</p><ol><li><p>从远程仓库下载本地仓库中缺失的提交记录</p></li><li><p>更新远程分支指针(如 <code>o/main</code>)，可同时更新多个</p></li></ol><p><code>git fetch</code> 实际上将本地仓库中的远程分支更新成了远程仓库相应分支最新的状态。</p><p>远程分支反映了远程仓库在你<strong>最后一次与它通信时</strong>的状态，<code>git fetch</code> 就是你与远程仓库通信的方式了！</p><p><code>git fetch</code> 通常通过互联网（使用 <code>http://</code> 或 <code>git://</code> 协议) 与远程仓库通信。</p></li><li><p><code>git fetch</code> 并不会改变你本地仓库的状态。它不会更新你的 <code>main</code> 分支，也不会修改你磁盘上的文件。你可以将 <code>git fetch</code> 的理解为单纯的下载操作。</p></li></ol><h3 id="Git-Pull"><a href="#Git-Pull" class="headerlink" title="Git Pull"></a>Git Pull</h3><blockquote><p>git fetch; git merge o/main</p></blockquote><p>当远程分支中有新的提交时，你可以像合并本地分支那样来合并远程分支。</p><ul><li><code>git cherry-pick o/main</code></li><li><code>git rebase o/main</code></li><li><code>git merge o/main</code></li></ul><p>git pull 完成了 git fetch; git merge o/main 的功能</p><h3 id="模拟团队合作"><a href="#模拟团队合作" class="headerlink" title="模拟团队合作"></a>模拟团队合作</h3><blockquote><p>如何制造远程仓库的变更</p></blockquote><h3 id="Git-Push"><a href="#Git-Push" class="headerlink" title="Git Push"></a>Git Push</h3><blockquote><p><code>git push</code> 负责将你的变更上传到指定的远程仓库，并在远程仓库上合并你的新提交记录。</p></blockquote><ul><li><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></li><li>远程仓库的main分支和本地的远程分支，都往下移同步到同一节点了，当前分支不动</li></ul><h3 id="偏离的提交历史"><a href="#偏离的提交历史" class="headerlink" title="偏离的提交历史"></a>偏离的提交历史</h3><blockquote><p>历史偏移：你写了一些方法，提交到远程仓库了，你同事把你写的方法修改/删除了，并提交了。你再push的时候，git仓库就不知道用哪一个。</p><p>注意：每次push的结果是，本地和远程分支结构一致。</p></blockquote><ul><li><p>因为这情况（历史偏离）有许多的不确定性，Git 是不会允许你 <code>push</code> 变更的。实际上它会强制你先合并远程最新的代码，然后才能分享你的工作。</p></li><li><p>如何解决这个问题呢？很简单，你需要做的就是使你的工作基于最新的远程分支。使用rebase </p><p><code>git fetch; git rebase o/main; git push</code></p><p>我们用 <code>git fetch</code> 更新了本地仓库中的远程分支，然后用 rebase 将我们的工作移动到最新的提交记录下，最后再用 <code>git push</code> 推送到远程仓库。</p></li><li><p>尽管 <code>git merge</code> 不会移动你的工作（它会创建新的合并提交），但是它会告诉 Git 你已经合并了远程仓库的所有变更。</p></li><li><p><code>git pull -rebase</code>，pull默认使用merge合并，可显式使用–rebase合并方式。pull后rebase当前分支到远程分支下。</p></li></ul><h3 id="锁定的Main-Locked-Main-（）"><a href="#锁定的Main-Locked-Main-（）" class="headerlink" title="锁定的Main(Locked Main)（）"></a>锁定的Main(Locked Main)（）</h3><blockquote><p>远程服务器拒绝!(Remote Rejected)</p><p>如果你是在一个大的合作团队中工作, 很可能是main被锁定了, 需要一些Pull Request流程来合并修改。如果你直接提交(commit)到本地main, 然后试图推送(push)修改, 你将会收到这样类似的信息:</p><p><code>! [远程服务器拒绝] main -&gt; main (TF402455: 不允许推送(push)这个分支; 你必须使用pull request来更新这个分支.)</code></p></blockquote><p>远程服务器拒绝直接推送(push)提交到main, 因为策略配置要求 pull requests 来提交更新.</p><p>你应该按照流程,新建一个分支, 推送(push)这个分支并申请pull request,但是你忘记并直接提交给了main.现在你卡住并且无法推送你的更新.</p><h2 id="Git-远程仓库高级操作"><a href="#Git-远程仓库高级操作" class="headerlink" title="Git 远程仓库高级操作"></a>Git 远程仓库高级操作</h2><p>关于 origin 和它的周边 —— Git 远程仓库高级操作</p><h3 id="推送主分支"><a href="#推送主分支" class="headerlink" title="推送主分支"></a>推送主分支</h3><p>在大型项目中开发人员通常会在（从 <code>main</code> 上分出来的）特性分支上工作，工作完成后只做一次集成。</p><p><code>git rebase 基本分支 变更分支</code></p><h3 id="合并远程仓库"><a href="#合并远程仓库" class="headerlink" title="合并远程仓库"></a>合并远程仓库</h3><p>为了 push 新变更到远程仓库，你要做的就是包含远程仓库中最新变更。意思就是只要你的本地分支包含了远程分支（如 o/main）中的最新变更就可以了，</p><ul><li><p>优点：Rebase 使你的提交树变得很干净, 所有的提交都在一条线上</p></li><li><p>缺点：Rebase 修改了提交树的历史</p></li></ul><h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><h3 id="git使用过程"><a href="#git使用过程" class="headerlink" title="git使用过程"></a>git使用过程</h3><ol><li>初始化git目录：<code>git init [文件夹名]</code></li><li>在gitee或github创建远程仓库，复制git链接</li><li>在本地添加远程仓库，<code>git remote 远程仓库name 远程仓库url链接</code></li><li>从远程仓库拉取到目录，<code>git pull 远程仓库名origin 远程分支名master</code></li></ol><h3 id="git小知识"><a href="#git小知识" class="headerlink" title="git小知识"></a>git小知识</h3><table><thead><tr><th>字母</th><th>说明</th></tr></thead><tbody><tr><td>A</td><td>你本地新增的文件（服务器上没有）.</td></tr><tr><td>C</td><td>文件的一个新拷贝.</td></tr><tr><td>D</td><td>你本地删除的文件（服务器上还在）.</td></tr><tr><td>M</td><td>文件的内容或者mode被修改了.</td></tr><tr><td>R</td><td>文件名被修改了。</td></tr><tr><td>T</td><td>文件的类型被修改了。</td></tr><tr><td>U</td><td>文件没有被合并(你需要完成合并才能进行提交)。</td></tr><tr><td>X</td><td>未知状态(很可能是遇到git的bug了，你可以向git提交bug report)。</td></tr></tbody></table><p>在man git diff-files中可以查到这些标志的说明。<br>这些状态标志在git的源代码的diff.h文件中被定义。</p><p>先clone项目，然后本地新建一个属于自己的分支，在自己分支上写代码。写完切换到master分支，先拉取远程进行同步，防止有人在此期间push然后出现问题。然后把csl分支merge到master分支。然后push。然后在csl分支merge合并master分支，快速前进到达master分支的位置（这个操作是为了使自己的分支及时更新，不然自己这个分支只能看到自己写的代码，无法及时与别人的代码结合调用别人写好的接口）（当然也可以在需要的时候在merge到主分支获取master分支的代码）。</p><p><del>打开项目准备写的时候，可以先在master分支上pull看看有没有人提交，如果有，自己的csl分支及时跟进</del></p><p>merge和rebase，目标分支的指针不动，没有到最新位置。</p><p>开发相对过程中，pull的时机是 ？？？</p><p>一般情况下，merge和rebase的当前分支都是master吧？？？</p><ol><li>没有pull和push的远程行为，本地的o/main和o/csl不会有变化。并且不能指向o/main这个名字，会指向它指向的节点造成分离的HEAD。分离的HEADcommit的之后会有警告提示：当前是分离的HEAD状态。</li><li>==git merge 目标分支，如果目标分支和当前分支不在一条线上，则把目标分支合并过来到当前分支。如果在一条线上且在目标分支上面，则合并（跳到）目标分支。如果在目标分支下面，则不做任何处理==</li><li><code>git rebase 目标分支 </code>：线性结构与git merge原理相同。不在同一条线上，则把自己当前分支变动到目标分支上面。 变动之后原来的节点还存在，话说git会记录所有的节点吧。</li><li>git rebase 与git merge 都要解决文件冲突吧？？</li><li><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code>，如果本地分支名与远程分支名相同，则可以只写一个。–force强制推送。推送的是当前分支，并且移动本地o/main指针。</li><li><code>git fetch</code>拉取的时候是看远程分支的指针的位置，如果和远程位置一样，则本地已经是最新的了。</li><li>如果本地分支和本地对应的远程分支产生了分歧，不在同一条线上，那么push就会出错而被拒绝。解决方法：git pull或git pull –rebase 让他们在同一条线上（合并之后csl会向下移动，因而处在了o/csl的下面）。</li><li><code>git push --force</code> 强制远程仓库回退</li><li><code>git pull</code> 拉取远程后会merge，导致快速前进（main前进到o/main的位置）。push的话会把本地main的路径复制上传到远程，在此期间右分支和main合并了，所以main有两个父节点，所以远程出现了分支。</li><li>一个分支的路径是，从当前节点开始顺着向上的箭头找，直到开始。</li><li><code>git pull</code>或<code>git fetch</code>下载远程之后，o/main会同步和远程路径一样，之后在合并之后，要oush之后o/main会到达最新。  </li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cbc-MySQL</title>
      <link href="/posts/24215/"/>
      <url>/posts/24215/</url>
      
        <content type="html"><![CDATA[<h2 id="01-数据库入门"><a href="#01-数据库入门" class="headerlink" title="01 数据库入门"></a>01 数据库入门</h2><h2 id="09-MySQL视图、索引"><a href="#09-MySQL视图、索引" class="headerlink" title="09 MySQL视图、索引"></a>09 MySQL视图、索引</h2><p>视图在数据库中的作用类似于窗户，用户可以通过这个窗口看到只对自己有用的数据。既保障了数据的安全性，又大大提高了查询效率。</p><p>索引是提高数据库性能的重要方式，用来快速找出数据表中的特定记录。如果在表中查询的列有一个索引，MySQL 能快速到达一个位置去搜寻数据，而不必查看所有数据。</p><h3 id="9-1-MySQL视图是什么？"><a href="#9-1-MySQL视图是什么？" class="headerlink" title="9.1 MySQL视图是什么？"></a>9.1 MySQL视图是什么？</h3><ol><li>MySQL 视图（View）是一种虚拟存在的表，同真实表一样，视图也由列和行构成，但视图并不实际存在于数据库中。行和列的数据来自于定义视图的查询中所使用的表，并且还是在使用视图时动态生成的。</li><li>数据库中只存放了视图的定义，并没有存放视图中的数据，这些数据都存放在定义视图查询所引用的真实表中。使用视图查询数据时，数据库会从真实表中取出对应的数据。因此，视图中的数据是依赖于真实表中的数据的。一旦真实表中的数据发生改变，显示在视图中的数据也会发生改变。</li><li>视图可以从原有的表上选取对用户有用的信息，那些对用户没用，或者用户没有权限了解的信息，都可以直接屏蔽掉，作用类似于筛选。这样做既使应用简单化，也保证了系统的安全。</li></ol><p>MySQL 的视图不支持输入参数的功能，因此交互性上还有欠缺。但对于变化不是很大的操作，使用视图可以很大程度上简化用户的操作。</p><p>视图并不同于数据表，它们的区别在于以下几点：</p><ul><li>视图不是数据库中真实的表，而是一张虚拟表，其结构和数据是建立在对数据中真实表的查询基础上的。</li><li>存储在数据库中的查询操作 SQL 语句定义了视图的内容，列数据和行数据来自于视图查询所引用的实际表，引用视图时动态生成这些数据。</li><li>视图没有实际的物理记录，不是以数据集的形式存储在数据库中的，它所对应的数据实际上是存储在视图所引用的真实表中的。</li><li>视图是数据的窗口，而表是内容。表是实际数据的存放单位，而视图只是以不同的显示方式展示数据，其数据来源还是实际表。</li><li>视图是查看数据表的一种方法，可以查询数据表中某些字段构成的数据，只是一些 SQL 语句的集合。从安全的角度来看，视图的数据安全性更高，使用视图的用户不接触数据表，不知道表结构。</li><li>视图的建立和删除只影响视图本身，不影响对应的基本表。</li></ul><p><strong>要注意区别视图和数据表的本质，即视图是基于真实表的一张虚拟的表，其数据来源均建立在真实表的基础上。</strong></p><ul><li>视图不包含数据，所以每次使用视图时，都必须执行查询中所需的任何一个检索操作。如果用多个连接和过滤条件创建了复杂的视图或嵌套了视图，可能会发现系统运行性能下降得十分严重。因此，在部署大量视图应用时，应该进行系统测试。</li></ul><h3 id="9-2-MySQL创建视图（CREATE-VIEW）"><a href="#9-2-MySQL创建视图（CREATE-VIEW）" class="headerlink" title="9.2 MySQL创建视图（CREATE VIEW）"></a>9.2 MySQL创建视图（CREATE VIEW）</h3><p><code>CREATE VIEW &lt;视图名&gt; AS &lt;SELECT语句&gt;</code></p><blockquote><p>也就是，查询视图的时候每次都会调用 select 语句</p></blockquote><p>视图用于查询主要应用在以下几个方面：</p><ul><li>使用视图重新格式化检索出的数据。</li><li>使用视图简化复杂的表连接。</li><li>使用视图过滤数据。</li></ul><p>DESCRIBE 可以用来查看视图，语法如下：</p><p><code>DESCRIBE 视图名；</code></p><h3 id="9-3-MySQL查看视图"><a href="#9-3-MySQL查看视图" class="headerlink" title="9.3 MySQL查看视图"></a>9.3 MySQL查看视图</h3><ol><li><p><strong>查看视图的字段信息</strong>与查看数据表的字段信息一样，都是使用 DESCRIBE 关键字来查看的。具体语法如下：</p><p><code>DESCRIBE 视图名;</code> 或简写 <code>DESC 视图名;</code></p></li><li><p>在 MySQL 中，SHOW CREATE VIEW 语句可以<strong>查看视图的详细定义</strong>。其语法如下所示：</p><p><code>SHOW CREATE VIEW 视图名;</code></p></li><li><p>扩展知识：所有视图的定义都是存储在 information_schema 数据库下的 views 表中，也可以在这个表中查看所有视图的详细信息，SQL 语句如下：</p><p><code>SELECT * FROM information_schema.views;</code></p></li></ol><h3 id="9-4-MySQL修改视图（ALTER-VIEW）"><a href="#9-4-MySQL修改视图（ALTER-VIEW）" class="headerlink" title="9.4 MySQL修改视图（ALTER VIEW）"></a>9.4 MySQL修改视图（ALTER VIEW）</h3><p><code>ALTER VIEW &lt;视图名&gt; AS &lt;SELECT语句&gt;</code> 修改视图的构造语句</p><p>某些视图是可更新的。也就是说，可以使用 UPDATE、DELETE 或 INSERT 等语句更新基本表的内容。对于可更新的视图，视图中的行和基本表的行之间必须具有一对一的关系。</p><p>用户可以通过视图来插入、更新、删除表中的数据，因为视图是一个虚拟的表，没有数据。通过视图更新时转到基本表上进行更新，如果对视图增加或删除记录，实际上是对基本表增加或删除记录。</p><p>还有一些特定的其他结构，这些结构会使得视图不可更新。更具体地讲，如果视图包含以下结构中的任何一种，它就是不可更新的：</p><ul><li>聚合函数 SUM()、MIN()、MAX()、COUNT() 等。</li><li>DISTINCT 关键字。</li><li>GROUP BY 子句。</li><li>HAVING 子句。</li><li>UNION 或 UNION ALL 运算符。</li><li>位于选择列表中的子查询。</li><li>FROM 子句中的不可更新视图或包含多个表。</li><li>WHERE 子句中的子查询，引用 FROM 子句中的表。</li><li>ALGORITHM 选项为 TEMPTABLE（使用临时表总会使视图成为不可更新的）的时候。</li></ul><p><strong>修改视图的名称</strong>可以先将视图删除，然后按照相同的定义语句进行视图的创建，并命名为新的视图名称。</p><h3 id="9-5-MySQL删除视图（DORP-VIEW）"><a href="#9-5-MySQL删除视图（DORP-VIEW）" class="headerlink" title="9.5 MySQL删除视图（DORP VIEW）"></a>9.5 MySQL删除视图（DORP VIEW）</h3><p><code>DROP VIEW &lt;视图名1&gt; [ , &lt;视图名2&gt; …]</code></p><p><code> DROP VIEW IF EXISTS v_students_info;</code></p><h3 id="9-6-MySQL索引（Index）是什么？为什么要使用索引？"><a href="#9-6-MySQL索引（Index）是什么？为什么要使用索引？" class="headerlink" title="9.6 MySQL索引（Index）是什么？为什么要使用索引？"></a>9.6 MySQL索引（Index）是什么？为什么要使用索引？</h3><p>索引是一种特殊的数据库结构，由数据表中的一列或多列组合而成，可以用来快速查询数据表中有某一特定值的记录。</p><p>通过索引，查询数据时不用读完记录的所有信息，而只是查询索引列。否则，数据库系统将读取每条记录的所有信息进行匹配。</p><p>可以把索引比作新华字典的音序表。例如，要查“库”字，如果不使用音序，就需要从字典的 400 页中逐页来找。但是，如果提取拼音出来，构成音序表，就只需要从 10 多页的音序表中直接查找。这样就可以大大节省时间。</p><p>因此，使用索引可以很大程度上提高数据库的查询速度，还有效的提高了数据库系统的性能。</p><p>索引可以提高查询速度，但是会影响插入记录的速度。因为，向有索引的表中插入记录时，数据库系统会按照索引进行排序，这样就降低了插入记录的速度，插入大量记录时的速度影响会更加明显。这种情况下，最好的办法是先删除表中的索引，然后插入数据，插入完成后，再创建索引。</p><h3 id="9-7-MySQL索引可以分为哪些类型？"><a href="#9-7-MySQL索引可以分为哪些类型？" class="headerlink" title="9.7 MySQL索引可以分为哪些类型？"></a>9.7 MySQL索引可以分为哪些类型？</h3><ul><li>根据<strong>存储方式</strong>的不同，MySQL 中常用的索引在物理上分为 B-树索引和 HASH 索引两类，两种不同类型的索引各有其不同的适用范围。</li><li>根据索引的具体用途，MySQL 中的索引在<strong>逻辑</strong>上分为以下 5 类：<ul><li>普通索引</li><li>唯一索引</li><li>主键索引</li><li>空间索引（新手很少用到）</li><li>全文索引</li></ul></li><li>索引在逻辑上分为以上 5 类，但在<strong>实际使用</strong>中，索引通常被创建成单列索引和组合索引。<ul><li>单字段索引</li><li>组合索引（多字段）</li></ul></li></ul><h3 id="9-8-MySQL创建索引（CREATE-INDEX）"><a href="#9-8-MySQL创建索引（CREATE-INDEX）" class="headerlink" title="9.8 MySQL创建索引（CREATE INDEX）"></a>9.8 MySQL创建索引（CREATE INDEX）</h3><p><strong>1) 使用 CREATE INDEX 语句</strong></p><p>用于创建索引的 CREATE INDEX 语句在一个已有的表上创建索引，但该语句不能创建主键。</p><p><code>CREATE &lt;索引名&gt; ON &lt;表名&gt; (&lt;列名&gt; [&lt;长度&gt;] [ ASC | DESC])</code></p><p><strong>2) 使用 CREATE TABLE 语句</strong></p><ol><li><p><code>CONSTRAINT PRIMARY KEY [索引类型] (&lt;列名&gt;,…)</code></p><p>在 CREATE TABLE 语句中添加此语句，表示在创建新表的同时创建该表的<strong>主键</strong>。</p></li><li><p><code>KEY | INDEX [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…)</code></p><p>在 CREATE TABLE 语句中添加此语句，表示在创建新表的同时创建该表的<strong>索引</strong>。</p></li><li><p><code>UNIQUE [ INDEX | KEY] [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…)</code></p><p>在 CREATE TABLE 语句中添加此语句，表示在创建新表的同时创建该表的<strong>唯一性索引</strong>。</p></li><li><p><code>FOREIGN KEY &lt;索引名&gt; &lt;列名&gt;</code></p><p>在 CREATE TABLE 语句中添加此语句，表示在创建新表的同时创建该表的<strong>外键</strong>。</p></li></ol><p><strong>3) 使用 ALTER TABLE 语句</strong></p><ol><li><p><code>ADD INDEX [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…)</code></p><p>在 ALTER TABLE 语句中添加此语法成分，表示在修改表的同时为该表<strong>添加索引</strong>。</p></li><li><p><code>ADD PRIMARY KEY [&lt;索引类型&gt;] (&lt;列名&gt;,…)</code></p><p>在 ALTER TABLE 语句中添加此语法成分，表示在修改表的同时为该表<strong>添加主键</strong>。</p></li><li><p><code>ADD UNIQUE [ INDEX | KEY] [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…)</code></p><p>在 ALTER TABLE 语句中添加此语法成分，表示在修改表的同时为该表<strong>添加唯一性索引</strong>。</p></li><li><p><code>ADD FOREIGN KEY [&lt;索引名&gt;] (&lt;列名&gt;,…)</code></p><p>在 ALTER TABLE 语句中添加此语法成分，表示在修改表的同时为该表<strong>添加外键</strong>。</p></li></ol><h3 id="9-9-MySQL查看索引（SHOW-INDEX）"><a href="#9-9-MySQL查看索引（SHOW-INDEX）" class="headerlink" title="9.9 MySQL查看索引（SHOW INDEX）"></a>9.9 MySQL查看索引（SHOW INDEX）</h3><p><code>SHOW INDEX FROM &lt;表名&gt; [ FROM &lt;数据库名&gt;]</code></p><h3 id="9-10-MySQL修改和删除索引（DROP-INDEX）"><a href="#9-10-MySQL修改和删除索引（DROP-INDEX）" class="headerlink" title="9.10 MySQL修改和删除索引（DROP INDEX）"></a>9.10 MySQL修改和删除索引（DROP INDEX）</h3><p>删除索引： <code>DROP INDEX &lt;索引名&gt; ON &lt;表名&gt;</code></p><p>根据 ALTER TABLE 语句的语法可知，该语句也可以用于删除索引。具体使用方法是将 ALTER TABLE 语句的语法中部分指定为以下子句中的某一项。</p><ul><li>DROP PRIMARY KEY：表示删除表中的主键。一个表只有一个主键，主键也是一个索引。</li><li>DROP INDEX index_name：表示删除名称为 index_name 的索引。</li><li>DROP FOREIGN KEY fk_symbol：表示删除外键。</li></ul><blockquote><p>注意：如果删除的列是索引的组成部分，那么在删除该列时，也会将该列从索引中删除；如果组成索引的所有列都被删除，那么整个索引将被删除。</p></blockquote><h3 id="9-11-索引在什么情况下不会被使用？"><a href="#9-11-索引在什么情况下不会被使用？" class="headerlink" title="9.11 索引在什么情况下不会被使用？"></a>9.11 索引在什么情况下不会被使用？</h3><blockquote><p>索引可以提高查询的速度，但并不是使用带有索引的字段查询时，索引都会起作用。使用索引有几种特殊情况，在这些情况下，有可能使用带有索引的字段查询时，索引并没有起作用，</p></blockquote><ol><li>查询语句中使用LIKE关键字<ul><li>在查询语句中使用 LIKE 关键字进行查询时，如果匹配字符串的第一个字符为“%”，索引不会被使用。如果“%”不是在第一个位置，索引就会被使用。</li></ul></li><li>查询语句中使用多列索引<ul><li>多列索引是在表的多个字段上创建一个索引，只有查询条件中使用了这些字段中（索引）的第一个字段，索引才会被使用。</li></ul></li><li>查询语句中使用OR关键字<ul><li>查询语句只有 OR 关键字时，如果 OR 前后的两个条件的列都是索引，那么查询中将使用索引。如果 OR 前后有一个条件的列不是索引，那么查询中将不使用索引。</li></ul></li></ol><blockquote><p><strong>小总结</strong></p><p>使用索引查询记录时，一定要注意索引的使用情况。</p><ol><li>例如，LIKE 关键字配置的字符串不能以“%”开头；</li><li>使用多列索引时，查询条件必须要使用这个索引的第一个字段；</li><li>使用 OR 关键字时，OR 关键字连接的所有条件都必须使用索引。</li></ol></blockquote><h3 id="9-12-怎么提升索引的使用效率，设计出更高效的索引"><a href="#9-12-怎么提升索引的使用效率，设计出更高效的索引" class="headerlink" title="9.12 怎么提升索引的使用效率，设计出更高效的索引"></a>9.12 怎么提升索引的使用效率，设计出更高效的索引</h3><h4 id="1-选择唯一性索引"><a href="#1-选择唯一性索引" class="headerlink" title="1. 选择唯一性索引"></a>1. 选择唯一性索引</h4><p>唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。例如，学生表中学号是具有唯一性的字段。为该字段建立唯一性索引可以很快的确定某个学生的信息。如果使用姓名的话，可能存在同名现象，从而降低查询速度。</p><h4 id="2-为经常需要排序、分组和联合操作的字段建立索引"><a href="#2-为经常需要排序、分组和联合操作的字段建立索引" class="headerlink" title="2. 为经常需要排序、分组和联合操作的字段建立索引"></a>2. 为经常需要排序、分组和联合操作的字段建立索引</h4><p>经常需要 ORDER BY、GROUP BY、DISTINCT 和 UNION 等操作的字段，排序操作会浪费很多时间。如果为其建立索引，可以有效地避免排序操作。</p><h4 id="3-为常作为查询条件的字段建立索引"><a href="#3-为常作为查询条件的字段建立索引" class="headerlink" title="3. 为常作为查询条件的字段建立索引"></a>3. 为常作为查询条件的字段建立索引</h4><p>如果某个字段经常用来做查询条件，那么该字段的查询速度会影响整个表的查询速度。因此，为这样的字段建立索引，可以提高整个表的查询速度。</p><p>注意：常查询条件的字段不一定是所要选择的列，换句话说，最适合索引的列是出现在 WHERE 子句中的列，或连接子句中指定的列，而不是出现在 SELECT 关键字后的选择列表中的列。</p><h4 id="4-限制索引的数目"><a href="#4-限制索引的数目" class="headerlink" title="4. 限制索引的数目"></a>4. 限制索引的数目</h4><p>索引的数目不是“越多越好”。每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。在修改表的内容时，索引必须进行更新，有时还可能需要重构。因此，索引越多，更新表的时间就越长。</p><p>如果有一个索引很少利用或从不使用，那么会不必要地减缓表的修改速度。此外，MySQL 在生成一个执行计划时，要考虑各个索引，这也要花费时间。创建多余的索引给查询优化带来了更多的工作。索引太多，也可能会使 MySQL 选择不到所要使用的最佳索引。</p><h4 id="5-尽量使用数据量少的索引"><a href="#5-尽量使用数据量少的索引" class="headerlink" title="5. 尽量使用数据量少的索引"></a>5. 尽量使用数据量少的索引</h4><p>如果索引的值很长，那么查询的速度会受到影响。例如，对一个 CHAR(100) 类型的字段进行全文检索需要的时间肯定要比对 CHAR(10) 类型的字段需要的时间要多。</p><h4 id="6-数据量小的表最好不要使用索引"><a href="#6-数据量小的表最好不要使用索引" class="headerlink" title="6. 数据量小的表最好不要使用索引"></a>6. 数据量小的表最好不要使用索引</h4><p>由于数据较小，查询花费的时间可能比遍历索引的时间还要短，索引可能不会产生优化效果。</p><h4 id="7-尽量使用前缀来索引"><a href="#7-尽量使用前缀来索引" class="headerlink" title="7. 尽量使用前缀来索引"></a>7. 尽量使用前缀来索引</h4><p>如果索引字段的值很长，最好使用值的前缀来索引。例如，TEXT 和 BLOG 类型的字段，进行全文检索会很浪费时间。如果只检索字段的前面的若干个字符，这样可以提高检索速度。</p><h4 id="8-删除不再使用或者很少使用的索引"><a href="#8-删除不再使用或者很少使用的索引" class="headerlink" title="8. 删除不再使用或者很少使用的索引"></a>8. 删除不再使用或者很少使用的索引</h4><p>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。应该定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>选择索引的最终目的是为了使查询的速度变快，上面给出的原则是最基本的准则，但不能只拘泥于上面的准则。应该在学习和工作中不断的实践，根据应用的实际情况进行分析和判断，选择最合适的索引方式。</p><h2 id="10-MySQL存储过程和触发器"><a href="#10-MySQL存储过程和触发器" class="headerlink" title="10 MySQL存储过程和触发器"></a>10 MySQL存储过程和触发器</h2><h2 id="11-MySQL事务和字符集"><a href="#11-MySQL事务和字符集" class="headerlink" title="11 MySQL事务和字符集"></a>11 MySQL事务和字符集</h2><p>当多个用户访问同一数据时，一个用户在更改数据的过程中可能有其它用户同时发起更改请求，为保证数据的一致性状态，MySQL 引入了事务。</p><h3 id="11-1-为什么说一定要开启事务后才能对数据进行操作？"><a href="#11-1-为什么说一定要开启事务后才能对数据进行操作？" class="headerlink" title="11.1 为什么说一定要开启事务后才能对数据进行操作？"></a>11.1 为什么说一定要开启事务后才能对数据进行操作？</h3><p>从张三的账户直接转账 500 元到李四的账户，可以使用 UPDATE 语句分别修改张三的账户和李四的账户。张三的账户减少 500 元，李四的账户增加 500 元，如在张三的账户减少 500 元之后，这时发生了服务器故障，李四的账户没有立即增加 500 元。</p><p>MySQL 为了解决此类问题，提供了事务。事务可以将一系列的数据操作捆绑成一个整体进行统一管理，如果某一事务执行成功，则在该事务中进行的所有数据更改均会提交，成为数据库中的永久组成部分。如果事务执行时遇到错误，则就必须取消或回滚。取消或回滚后，数据将全部恢复到操作前的状态，所有数据的更改均被清除。</p><h3 id="11-2-数据库事务的概念和特性"><a href="#11-2-数据库事务的概念和特性" class="headerlink" title="11.2 数据库事务的概念和特性"></a>11.2 数据库事务的概念和特性</h3><p>数据库的<strong>事务（Transaction）</strong>是一种机制、一个操作序列，包含了一组数据库操作命令。事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令要么都执行，要么都不执行，因此事务是一个不可分割的工作逻辑单元。</p><p>事务具有 4 个特性，即原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability），这 4 个特性通常简称为 ACID。</p><h3 id="11-3-MySQL执行事务的语法和流程"><a href="#11-3-MySQL执行事务的语法和流程" class="headerlink" title="11.3 MySQL执行事务的语法和流程"></a>11.3 MySQL执行事务的语法和流程</h3><ol><li>开始事务：<code>BEGIN;</code> 或 <code>START TRANSACTION;</code> 这个语句显式地标记一个事务的起始点。</li><li>提交事务：<code>COMMIT;</code></li><li>回滚（撤销）事务： <code>ROLLBACK;</code> 当事务执行过程中遇到错误时，使用 ROLLBACK 语句使事务回滚到起点或指定的保持点处。同时，系统将清除自事务起点或到某个保存点所做的所有的数据修改，并且释放由事务控制的资源。因此，这条语句也标志着事务的结束。</li></ol><p><strong>总结</strong></p><p>BEGIN 或 START TRANSACTION 语句后面的 SQL 语句对数据库数据的更新操作都将记录在事务日志中，直至遇到 ROLLBACK 语句或 COMMIT 语句。如果事务中某一操作失败且执行了 ROLLBACK 语句，那么在开启事务语句之后所有更新的数据都能回滚到事务开始前的状态。如果事务中的所有操作都全部正确完成，并且使用了 COMMIT 语句向数据库提交更新数据，则此时的数据又处在新的一致状态。</p><h3 id="11-4-MySQL设置事务自动提交（开启和关闭）"><a href="#11-4-MySQL设置事务自动提交（开启和关闭）" class="headerlink" title="11.4 MySQL设置事务自动提交（开启和关闭）"></a>11.4 MySQL设置事务自动提交（开启和关闭）</h3><ol><li><p>MySQL 默认开启事务自动提交模式，即除非显式的开启事务（BEGIN 或 START TRANSACTION），否则每条 SOL 语句都会被当做一个单独的事务自动执行。但有些情况下，我们需要关闭事务自动提交来保证数据的一致性。下面主要介绍如何设置事务自动提交模式。</p></li><li><p>在 MySQL 中，可以通过  <code>SHOW VARIABLES LIKE &#39;autocommit&#39;;</code> 语句查看当前事务自动提交模式，</p><p>设置事务的自动提交模式： <code>SET autocommit = 0|1|ON|OFF;</code></p></li><li><p>使用 BEGIN 或 START TRANSACTION 开启一个事务之后，自动提交将保持禁用状态，直到使用 COMMIT 或 ROLLBACK 结束事务。之后，自动提交模式会恢复到之前的状态，即如果 BEGIN 前 autocommit = 1，则完成本次事务后 autocommit 还是 1。如果 BEGIN 前 autocommit = 0，则完成本次事务后 autocommit 还是 0。</p></li></ol><h3 id="11-5-从实例出发，搞懂高并发下的数据库事务隔离级别（（"><a href="#11-5-从实例出发，搞懂高并发下的数据库事务隔离级别（（" class="headerlink" title="11.5 从实例出发，搞懂高并发下的数据库事务隔离级别（（"></a>11.5 从实例出发，搞懂高并发下的数据库事务隔离级别（（</h3><p> MySQL 事务的四大特性，其中事务的隔离性就是指当多个事务同时运行时，各事务之间相互隔离，不可互相干扰。事务并发时就容易出现脏读、不可重复读和幻读等情况。</p><p>为了保证并发时操作数据的正确性，数据库都会有事务隔离级别的概念。</p><p><strong>1) 脏读</strong>（使用了 事务作用 之前的数据）</p><ul><li>A 事务读取了这个数据并使用，B 事务修改了这个数据</li></ul><p>脏读是指一个事务正在访问数据，并且对数据进行了修改，但是这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</p><p><strong>2) 不可重复读</strong>（多次读取同一数据，数据被其他事务修改了）</p><ul><li>A 事务读取这个数据，B 事务修改了这个数据，A 事务又读取了这个数据</li></ul><p>不可重复读是指在一个事务内，多次读取同一个数据。</p><p>在这个事务还没有结束时，另外一个事务也访问了该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。</p><p><strong>3) 幻读</strong>（读完数据，就被改了）</p><ul><li>A 事务修改了这个数据，B 事务修改了这个数据</li></ul><p>幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。</p><p>为了解决以上这些问题，标准 SQL 定义了 4 类事务隔离级别，用来指定事务中的哪些数据改变是可见的，哪些数据改变是不可见的。<br>MySQL 事务隔离级别可能产生的问题如下表所示：</p><table><thead><tr><th>隔离级别</th><th>脏读（是否可见）</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ UNCOMITTED 读未提交</td><td>√</td><td>√</td><td>√</td></tr><tr><td>READ COMMITTED 读提交</td><td>×</td><td>√</td><td>√</td></tr><tr><td>REPEATABLE READ 可重复读</td><td>×</td><td>×</td><td>√</td></tr><tr><td>SERIALIZABLE 串行化</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>MySQL 的事务的隔离级别由低到高分别为 READ UNCOMITTED、READ COMMITTED、REPEATABLE READ、SERIALIZABLE。低级别的隔离级别可以支持更高的并发处理，同时占用的系统资源更少。</p><p><strong>1. 读未提交（READ UNCOMITTED，RU）</strong></p><p>顾名思义，读未提交就是可以读到未提交的内容。</p><p>如果一个事务读取到了另一个未提交事务修改过的数据，那么这种隔离级别就称之为读未提交。</p><p>在该隔离级别下，所有事务都可以看到其它未提交事务的执行结果。因为它的性能与其他隔离级别相比没有高多少，所以一般情况下，该隔离级别在实际应用中很少使用。</p><p><strong>2. 读提交（READ COMMITTED，RC）</strong></p><p>顾名思义，读提交就是只能读到已经提交了的内容。</p><p>如果一个事务只能读取到另一个已提交事务修改过的数据，并且其它事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值，那么这种隔离级别就称之为读提交。</p><p>该隔离级别满足了隔离的简单定义：一个事务从开始到提交前所做的任何改变都是不可见的，事务只能读取到已经提交的事务所做的改变。</p><p>这是大多数数据库系统的默认事务隔离级别（例如 Oracle、SQL Server），但不是 MySQL 默认的。</p><p><strong>3. 可重复读（REPEATABLE READ，RR）</strong></p><p>顾名思义，可重复读是专门针对不可重复读这种情况而制定的隔离级别，可以有效的避免不可重复读。</p><p>在一些场景中，一个事务只能读取到另一个已提交事务修改过的数据，但是第一次读过某条记录后，即使其它事务修改了该记录的值并且提交，之后该事务再读该条记录时，读到的仍是第一次读到的值，而不是每次都读到不同的数据。那么这种隔离级别就称之为可重复读。</p><p>可重复读是 MySQL 的默认事务隔离级别，它能确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。在该隔离级别下，如果有事务正在读取数据，就不允许有其它事务进行修改操作，这样就解决了可重复读问题。</p><p><strong>4. 串行化（SERIALIZABLE）</strong></p><p>如果一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来。那么这种隔离级别就称之为串行化。</p><p>SERIALIZABLE 是最高的事务隔离级别，主要通过强制事务排序来解决幻读问题。简单来说，就是在每个读取的数据行上加上共享锁实现，这样就避免了脏读、不可重复读和幻读等问题。但是该事务隔离级别执行效率低下，且性能开销也最大，所以一般情况下不推荐使用。</p><h3 id="11-6-MySQL查看和修改事务隔离级别"><a href="#11-6-MySQL查看和修改事务隔离级别" class="headerlink" title="11.6 MySQL查看和修改事务隔离级别"></a>11.6 MySQL查看和修改事务隔离级别</h3><p>在 MySQL 中，可以通过<code>show variables like &#39;%tx_isolation%&#39;</code>或<code>select @@tx_isolation;</code>语句来查看当前事务隔离级别。</p><p>另外，还可以使用下列语句分别查询全局和会话的事务隔离级别：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> @<span class="token variable">@global.tx_isolation</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> @<span class="token variable">@session.tx_isolation</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提示：在MySQL 8.0.3 中，tx_isolation 变量被 transaction_isolation 变量替换了。在 MySQL 8.0.3 版本中查询事务隔离级别，只要把上述查询语句中的 tx_isolation 变量替换成 transaction_isolation 变量即可。</p><p>MySQL 提供了 SET TRANSACTION 语句，该语句可以改变单个会话或全局的事务隔离级别。语法格式如下：</p><p><code>SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE&#125;</code></p><p>其中，SESSION 和 GLOBAL 关键字用来指定修改的事务隔离级别的范围：</p><ul><li>SESSION：表示修改的事务隔离级别将应用于当前 session（当前 cmd 窗口）内的所有事务；</li><li>GLOBAL：表示修改的事务隔离级别将应用于所有 session（全局）中的所有事务，且当前已经存在的 session 不受影响；</li><li>如果省略 SESSION 和 GLOBAL，表示修改的事务隔离级别将应用于当前 session 内的下一个还未开始的事务。</li></ul><p>任何用户都能改变会话的事务隔离级别，但是只有拥有 SUPER 权限的用户才能改变全局的事务隔离级别。</p><h3 id="11-7-MySQL锁机制（入门篇）"><a href="#11-7-MySQL锁机制（入门篇）" class="headerlink" title="11.7 MySQL锁机制（入门篇）"></a>11.7 MySQL锁机制（入门篇）</h3><ol><li>按锁级别分类，可分为共享锁、排他锁和意向锁。</li><li>也可以按锁粒度分类，可分为行级锁、表级锁和页级锁。</li></ol><h4 id="1-共享锁"><a href="#1-共享锁" class="headerlink" title="1. 共享锁"></a>1. 共享锁</h4><p>共享锁的代号是 S，是 Share 的缩写，也可称为读锁。是一种可以查看但无法修改和删除的数据锁。</p><p>共享锁的锁粒度是行或者元组（多个行）。一个事务获取了共享锁之后，可以对锁定范围内的数据执行读操作。会阻止其它事务获得相同数据集的排他锁。</p><h4 id="2-排他锁"><a href="#2-排他锁" class="headerlink" title="2. 排他锁"></a>2. 排他锁</h4><p>排他锁的代号是 X，是 eXclusive 的缩写，也可称为写锁，是基本的锁类型。</p><p>排他锁的粒度与共享锁相同，也是行或者元组。一个事务获取了排他锁之后，可以对锁定范围内的数据执行写操作。允许获得排他锁的事务更新数据，阻止其它事务取得相同数据集的共享锁和排他锁。</p><blockquote><p>共享锁（读锁）和排他锁（写锁）不能共存，并且写锁只能存在一个，而读锁可以多个共存。</p></blockquote><h4 id="3-意向锁"><a href="#3-意向锁" class="headerlink" title="3. 意向锁"></a>3. 意向锁</h4><p>为了允许行锁和表锁共存，实现多粒度锁机制，InnoDB 还有两种内部使用的意向锁。</p><p>意向锁是一种表锁，锁定的粒度是整张表，分为意向共享锁（IS）和意向排他锁（IX）两类。</p><p>意向共享锁表示一个事务有意对数据上共享锁或者排他锁。“有意”表示事务想执行操作但还没有真正执行。</p><p>锁和锁之间的关系，要么是相容的，要么是互斥的。</p><ul><li>锁 a 和锁 b 相容是指：操作同样一组数据时，如果事务 t1 获取了锁 a，另一个事务 t2 还可以获取锁 b；</li><li>锁 a 和锁 b 互斥是指：操作同样一组数据时，如果事务 t1 获取了锁 a，另一个事务 t2 在 t1 释放锁 a 之前无法释放锁 b。</li></ul><p>其中共享锁、排他锁、意向共享锁、意向排他锁相互之间的兼容/互斥关系如下表所示，其中 Y 表示相容，N 表示互斥。</p><table><thead><tr><th>参数</th><th>X</th><th>S</th><th>IX</th><th>IS</th></tr></thead><tbody><tr><td>X（排他锁）</td><td>N</td><td>N</td><td>N</td><td>N</td></tr><tr><td>S（共享锁）</td><td>N</td><td>Y</td><td>N</td><td>Y</td></tr><tr><td>IX（意向排他锁）</td><td>N</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>IS（意向共享锁）</td><td>N</td><td>Y</td><td>Y</td><td>Y</td></tr></tbody></table><p>如果一个事务请求的锁模式与当前的锁兼容，InnoDB 就将请求的锁授予该事务；反之，如果两者不兼容，该事务就要等待锁释放。</p><h3 id="11-8-MySQL表锁、行锁和页锁"><a href="#11-8-MySQL表锁、行锁和页锁" class="headerlink" title="11.8 MySQL表锁、行锁和页锁"></a>11.8 MySQL表锁、行锁和页锁</h3><p>MySQL 按锁的粒度（可以理解成锁范围）可以细分为行级锁、页级锁和表级锁。</p><h4 id="1）表级锁（table-lock）"><a href="#1）表级锁（table-lock）" class="headerlink" title="1）表级锁（table lock）"></a>1）表级锁（table lock）</h4><p>一个用户在对表进行写操作（插入、删除、更新等）时，需要先获得写锁，这会阻塞其它用户对该表的所有读写操作。没有写锁时，其它读取的用户才能获得读锁，读锁之间是不相互阻塞的。</p><p>表级锁最大的特点就是实现逻辑非常简单，带来的系统负面影响最小。所以获取锁和释放锁的速度很快。当然，锁定颗粒度大带来最大的负面影响就是出现锁定资源争用的概率会很高，致使并发度大打折扣。</p><h4 id="2）页级锁（page-lock）"><a href="#2）页级锁（page-lock）" class="headerlink" title="2）页级锁（page lock）"></a>2）页级锁（page lock）</h4><p>页级锁是 MySQL 中比较独特的一种锁定级别，在其他数据库管理软件中并不常见。</p><p>页级锁的颗粒度介于行级锁与表级锁之间，所以获取锁定所需要的资源开销，以及所能提供的并发处理能力同样也是介于上面二者之间。另外，页级锁和行级锁一样，会发生死锁。</p><h4 id="3）行级锁（row-lock）"><a href="#3）行级锁（row-lock）" class="headerlink" title="3）行级锁（row lock）"></a>3）行级锁（row lock）</h4><p>行级锁的锁定颗粒度在 MySQL 中是最小的，只针对操作的当前行进行加锁，所以行级锁发生锁定资源争用的概率也最小。</p><p>行级锁能够给予应用程序尽可能大的并发处理能力，从而提高需要高并发应用系统的整体性能。虽然行级锁在并发处理能力上面有较大的优势，但也因此带来了不少弊端。</p><p>由于锁定资源的颗粒度很小，所以每次获取锁和释放锁需要做的事情也就更多，带来的消耗自然也就更大。此外，行级锁也最容易发生死锁。所以说行级锁最大程度地支持并发处理的同时，也带来了最大的锁开销。</p><table><thead><tr><th></th><th>表级锁</th><th>行级锁</th><th>页级锁</th></tr></thead><tbody><tr><td>开销</td><td>小</td><td>大</td><td>介于表级锁和行级锁之间</td></tr><tr><td>加锁</td><td>快</td><td>慢</td><td>介于表级锁和行级锁之间</td></tr><tr><td>死锁</td><td>不会出现死锁</td><td>会出现死锁</td><td>会出现死锁</td></tr><tr><td>锁粒度</td><td>大</td><td>小</td><td>介于表级锁和行级锁之间</td></tr><tr><td>并发度</td><td>低</td><td>高</td><td>一般</td></tr></tbody></table><h3 id="11-9-MySQL-InnoDB的3种行锁定方式"><a href="#11-9-MySQL-InnoDB的3种行锁定方式" class="headerlink" title="11.9 MySQL InnoDB的3种行锁定方式"></a>11.9 MySQL InnoDB的3种行锁定方式</h3><p>在 MySQL 中，InnoDB 行锁通过给索引上的索引项加锁来实现，如果没有索引，InnoDB 将通过隐藏的聚簇索引来对记录加锁。</p><p>InnoDB 支持 3 种行锁定方式：</p><ul><li>行锁（Record Lock）：直接对索引项加锁。</li><li>间隙锁（Gap Lock）：锁加在索引项之间的间隙，也可以是第一条记录前的“间隙”或最后一条记录后的“间隙”。</li><li>Next-Key Lock：行锁与间隙锁组合起来用就叫做 Next-Key Lock。 前两种的组合，对记录及其前面的间隙加锁。</li></ul><p>默认情况下，InnoDB 工作在可重复读（默认隔离级别）下，并且以 Next-Key Lock 的方式对数据行进行加锁，这样可以有效防止幻读的发生。</p><p>Next-Key Lock 是行锁与间隙锁的组合，这样，当 InnoDB 扫描索引项的时候，会首先对选中的索引项加上行锁（Record Lock），再对索引项两边的间隙（向左扫描扫到第一个比给定参数小的值， 向右扫描扫到第一个比给定参数大的值， 然后以此为界，构建一个区间）加上间隙锁（Gap Lock）。如果一个间隙被事务 T1 加了锁，其它事务不能在这个间隙插入记录。</p><p>开启一个事务时，InnoDB 存储引擎会在更新的记录上加行级锁，此时其它事务不可以更新被锁定的记录。</p><h3 id="11-10-Mysql并发时常见的死锁及解决方法"><a href="#11-10-Mysql并发时常见的死锁及解决方法" class="headerlink" title="11.10 Mysql并发时常见的死锁及解决方法"></a>11.10 Mysql并发时常见的死锁及解决方法</h3><p>死锁是指两个或两个以上的事务在执行过程中，因争夺资源而造成的一种互相等待的现象。就是所谓的锁资源请求产生了回路现象，即死循环，此时称系统处于死锁状态或系统产生了死锁。常见的报错信息为“Deadlock found when trying to get lock…”。</p><p>死锁发生以后，只有部分或完全回滚其中一个事务，才能打破死锁。多数情况下只需要重新执行因死锁回滚的事务即可。下面我们通过一个实例来了解死锁是如何产生的。</p><p><strong>死锁检测</strong></p><p>InnoDB 的并发写操作会触发死锁，同时 InnoDB 也提供了死锁检测机制。通过设置 innodb_deadlock_detect 参数的值来控制是否打开死锁检测。</p><ul><li>innodb_deadlock_detect = ON ：默认值，打开死锁检测。数据库发生死锁时，系统会自动回滚其中的某一个事务，让其它事务可以继续执行。</li><li>innodb_deadlock_detect = OFF：关闭死锁检测。发生死锁时，系统会用锁等待来处理。</li></ul><p>锁等待是指在事务过程中产生的锁，其它事务需要等待上一个事务释放锁，才能占用该资源。如果该事务一直不释放，就需要持续等待下去，直到超过了锁等待时间。<strong>当超过锁等待允许的最大时间，就会出现死锁，然后当前事务执行失败，自动执行回滚操作。</strong></p><h3 id="11-11-MySQL锁监控"><a href="#11-11-MySQL锁监控" class="headerlink" title="11.11 MySQL锁监控"></a>11.11 MySQL锁监控</h3><p>通常情况下，当出现锁问题时，我们习惯性通过 SHOW FULL PROCESSLIST 和 SHOW ENGINE INNODB STATUS 命令来判断事务中锁问题的情况。其实还有特别重要的三张表，即在 information_schema 数据库下的 innodb_trx、innodb_locks 和 innodb_lock_waits 表。</p><h2 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h2><h3 id="mysql分页查询和提高效率"><a href="#mysql分页查询和提高效率" class="headerlink" title="mysql分页查询和提高效率"></a>mysql分页查询和提高效率</h3><p>比如limit 100000,10虽然最后只返回10条数据，但是偏移量却高达100000，数据库的操作其实是拿到100010数据，然后返回最后10条。</p><p>那么解决思路就是，我能不能跳过100000条数据然后读取10条，而不是读取100010条数据然后返回10条数据。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 优化前</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span> mytbl <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">limit</span> <span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 优化后</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token keyword">from</span>　mytbl<span class="token keyword">where</span> id<span class="token operator">>=</span> <span class="token punctuation">(</span>  <span class="token keyword">select</span> id <span class="token keyword">from</span> mytbl <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">limit</span> <span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">limit</span> <span class="token number">10</span><span class="token comment">-- 注：假设id是主键索引，那么里层走的是索引，外层也是走的索引，所以性能大大提高</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>  这份优化总结酝酿了有段时间了，主要始从自己目前在带领的一个项目当中吸取的、经历的，以及从自己了解到的一些实用的mysql语句或者设计方面的优化方案，特别是sql语句的书写方面。</p><p>  话不多说，直接开始。</p><p>  一、语句优化</p><p>  1、select时尽量不要用<em>。需要什么字段、多少字段则写多少。如果使用</em>，数据库还需要在执行完语句之后进行字段的转换。</p><p>  2、普通情况下少用group by。group by在表数据很大，几十万就开始表现出缓慢，几百万或者上千万则会达到十秒以上的缓慢（具体要视语句而定）；一般可以通过关联查询或者distinct来代替一下，如果非要用group by，可以考虑对分组的字段添加索引。</p><p>  3、善用limit。limit的实用更多是在分页中使用，这里延生一种使用方式是：在查询结果明确了为一条或者只想获取第一条记录的话，可以加入 “limit 1”，不需要查询出来再get第一条记录。limit 1在查询到第一条记录后会停止查询，提高查询效率。</p><p>  4、灵活运用exist和in、not exist和not in 两组关键字。不深入讨论，简单的说一下使用场景：</p><p>​    exist和in：假设有两个待查询的表，如果两个表的数据量相差不大，那么用in和exists差别不大；如果两个表中数据量一个较小一个较大，则子查询表大的用exists，子查询表小的用in；</p><p>​    not exsit 和 not in：用not exsit 总是比 not in效率高。</p><p>  5、查询字段为空的条件时，注意查询 is not null 和 != ‘’ 的结合使用，前者是查询数据库值不为数据库NULL 的，后者是查询内容不为空的；特别是列表查询反选查询不为空的条件时，这两个都要加上。</p><p>   6、多用函数。MySQL的函数方法非常多，包括运算函数、操作函数等，日常的业务使用中，字符拼接、数量计算、字符截取、日期时间格式化、case when 、if 和 ifNull等等，都能在数据操作这一层面解决，可以减少页面标签或其他应用端的再度转换。</p><p>  7、用order by field 自定义排序。将查询后的结果（注意是：结果，例如 as 之后的别名），按照自定义的排序。简例：SELECT CANCAT(my_level,’级’) as level FROM my_info WHERE sex = 1 ORDER BY FIELD(level,’0级’,’1级’,’2级’,’3级’,’4级’,’5级’) ASC 。</p><p>  二、结构优化</p><p>  1、选择合适的引擎。几个常用的MySQL数据引擎要知道，例如最常用的InnoDB 和 MyISAM 。如果写或改数据都是日常操作，则选用InnoDB，因为Inn DB有事务操作，总体来说性能比较综合；但如果在读写分离的多数据库情况下，读的数据库最好采用My ISAM，因为MyISAM 没有事务的概念，在搜索和检索方面却是强化了的。</p><p>  2、利用索引。索引是双刃剑，用得好能大幅度提高效率，用得不好会阻塞数据库；一般来说，读取或查询较多、字符串字段、非NULL的字段的有利于索引的应用。</p><p>  3、用上存储过程和触发器。存储过程、触发器能在数据的增查改上很好的改善数据联动，并非数据的改动上都需要动用到代码层。例如某一字段的变动，会单纯触发其他表格的字段变动，则可以用上触发器，可以不使用代码定时器来处理。例如对某一类似的列表进行查询，会返回不同的结果字段但整体结构相似，可以使用存储过程。</p><p>  三、Tips</p><p>  1、在对SQL语句有疑惑或者功能语句存在多种解决方案的情况下，可以使用DESC 关键字对SQL 语句进行分析，查看SQL的语句性能、是否利用到索引等分析，从而进一步了解如何优化SQL。</p><p>  例：如图</p><p>  <img src="https://oscimg.oschina.net/oscnet/fcfbca13fb13e1e4cb23872dc1c1c94e0e7.jpg" alt="img"></p><p>2、在Java中，可以对几个通用的字段进行提炼，例如创建时间、主键、更新时间等，作为BaseEntity，然后所有需要到这些字段的都继承该实体</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python-爬虫</title>
      <link href="/posts/57649/"/>
      <url>/posts/57649/</url>
      
        <content type="html"><![CDATA[<p><strong>Python爬虫教程（从入门到精通）</strong></p><p>网络爬虫（Web Spider）又称“网络蜘蛛”或“网络机器人”，它是一种按照一定规则从 Internet 中获取网页内容的程序。</p><p>广为人知的“搜索引擎”就是最常见的爬虫程序，比如当我们使用百度引擎搜索关键字时，“百度蜘蛛”就会根据您输入的关键字去互联网资源中抓取相应的页面。</p><h2 id="01-网络爬虫是什么"><a href="#01-网络爬虫是什么" class="headerlink" title="01 网络爬虫是什么"></a>01 网络爬虫是什么</h2><h3 id="认识爬虫"><a href="#认识爬虫" class="headerlink" title="认识爬虫"></a>认识爬虫</h3><p>网络爬虫又称网络蜘蛛、网络机器人，它是一种按照一定的规则自动浏览、检索网页信息的程序或者脚本。</p><p>网络爬虫能够自动请求网页，并将所需要的数据抓取下来。通过对抓取的数据进行处理，从而提取出有价值的信息。</p><h3 id="爬虫分类"><a href="#爬虫分类" class="headerlink" title="爬虫分类"></a>爬虫分类</h3><p>爬虫可分为三大类：通用网络爬虫、聚焦网络爬虫、增量式网络爬虫。</p><blockquote><p><a href="https://baike.baidu.com/item/robots%E5%8D%8F%E8%AE%AE/2483797?fr=aladdin">robots 协议</a>：是一种“约定俗称”的协议，并不具备法律效力，它体现了互联网人的“契约精神”。行业从业者会自觉遵守该协议，因此它又被称为“君子协议”。</p></blockquote><h3 id="编写爬虫的流程"><a href="#编写爬虫的流程" class="headerlink" title="编写爬虫的流程"></a>编写爬虫的流程</h3><ol><li>先由 urllib 模块的 request 方法打开 URL 得到网页 HTML 对象。</li><li>使用浏览器打开网页源代码分析网页结构以及元素节点。</li><li>通过 Beautiful Soup 或则正则表达式提取数据。</li><li>存储数据到本地磁盘或数据库。</li></ol><blockquote><p>爬虫程序需要尽量伪装成人访问网站的样子，而非机器访问，否则就会被网站的反爬策略限制，甚至直接封杀 IP</p></blockquote><h2 id="02-网页构成"><a href="#02-网页构成" class="headerlink" title="02 网页构成"></a>02 网页构成</h2><p>爬虫程序之所以可以抓取数据，是因为爬虫能够对网页进行分析，并在网页中提取出想要的数据。</p><p>网页一般由三部分组成，分别是 HTML（超文本标记语言）、CSS（层叠样式表）和 JavaScript（简称“JS”动态脚本语言），它们三者在网页中分别承担着不同的任务。</p><ul><li>HTML 负责定义网页的内容</li><li>CSS 负责描述网页的布局</li><li>JavaScript 负责网页的行为</li></ul><h2 id="03-静态网页和动态网页"><a href="#03-静态网页和动态网页" class="headerlink" title="03 静态网页和动态网页"></a>03 静态网页和动态网页</h2><p>当我们在编写一个爬虫程序前，首先要明确待爬取的页面是静态的，还是动态的，只有确定了页面类型，才方便后续对网页进行分析和程序编写。对于不同的网页类型，编写爬虫程序时所使用的方法也不尽相同。</p><ol><li>静态网页的数据全部包含在 HTML 中，因此爬虫程序可以直接在 HTML 中提取数据。通过分析静态网页的 URL，并找到 URL 查询参数的变化规律，就可以实现页面抓取。与动态网页相比，并且静态网页对搜索引擎更加友好，有利于搜索引擎收录。</li><li>动态网页中除了有 HTML 标记语言外，还包含了一些特定功能的代码。这些代码使得浏览器和服务器可以交互，服务器端会根据客户端的不同请求来生成网页，其中涉及到数据库的连接、访问、查询等一系列 IO 操作，所以其响应速度略差于静态网页。</li></ol><h2 id="04-审查网页元素"><a href="#04-审查网页元素" class="headerlink" title="04 审查网页元素"></a>04 审查网页元素</h2><p>对于一个优秀的爬虫工程师而言，要善于发现网页元素的规律，并且能从中提炼出有效的信息。因此，在动手编写爬虫程序前，必须要对网页元素进行审查。</p><blockquote><p>提示：通过检查网页结构，然后发现规律，这是编写爬虫程序最为重要的一步。</p></blockquote><h2 id="05-学习Python爬虫前的准备工作"><a href="#05-学习Python爬虫前的准备工作" class="headerlink" title="05 学习Python爬虫前的准备工作"></a>05 学习Python爬虫前的准备工作</h2><ol><li><p>python语言</p><p>同时，了解 Python 语言的多进程与多线程（参考《<a href="http://c.biancheng.net/python/thread/">Python并发编程</a>》），并熟悉正则表达式语法，也有助于您编写爬虫程序。</p></li><li><p>Web前端</p><p>了解 Web 前端的基本知识，比如 HTML、CSS、JavaScript，这能够帮助你分析网页结构，提炼出有效信息。</p></li><li><p> HTTP协议</p></li></ol><p>   掌握 OSI 七层网络模型，了解 TCP/IP 协议、HTTP 协议，这些知识将帮助您了解网络请求（GET 请求、POST 请求）和网络传输的基本原理。同时，也有助您了解爬虫程序的编写逻辑，这里推荐阅读《<a href="http://c.biancheng.net/tcp_ip/">TCP/IP协议入门教程</a>》。</p><ol start="4"><li>环境</li></ol><h2 id="06-第一个Python爬虫程序"><a href="#06-第一个Python爬虫程序" class="headerlink" title="06 第一个Python爬虫程序"></a>06 第一个Python爬虫程序</h2><p>urllib 库属于 Python 的标准库模块，无须单独安装，它是 Python 爬虫的常用模块。</p><ol><li><p>获取响应对象</p></li><li><p>输出HTML信息</p></li></ol> <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#导包,发起请求使用urllib库的request请求模块</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token comment"># urlopen()向URL发请求,返回响应对象,注意url必须完整</span>response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com/'</span><span class="token punctuation">)</span><span class="token comment"># from urllib import request # 另一种导包</span><span class="token comment"># response=request.urlopen('http://www.baidu.com/')</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token comment"># &lt;http.client.HTTPResponse object at 0x032F0F90></span>   <span class="token comment">#提取响应内容</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment">#打印响应内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过调用 response 响应对象的 read() 方法提取 HTML 信息，该方法返回的结果是字节串类型(bytes)，因此需要使用 decode() 转换为字符串。</p><p><strong>常用方法</strong></p><ol><li><p><code>urllib.request.urlopen(url,timeout)</code>，表示向网站发起请求并获取响应对象，</p></li><li><p><code>urllib.request.Request(url,headers)</code></p><p>该方法用于创建请求对象、包装请求头，比如重构 User-Agent（即用户代理，指用户使用的浏览器）使程序更像人类的请求，而非机器。重构 User-Agent 是爬虫和反爬虫斗争的第一步。</p></li><li><p>html响应对象方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">bytes</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># read()返回结果为 bytes 数据类型</span>string <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># decode()将字节串转换为 string 类型</span>url <span class="token operator">=</span> response<span class="token punctuation">.</span>geturl<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 返回响应对象的URL地址</span>code <span class="token operator">=</span> response<span class="token punctuation">.</span>getcode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 返回请求时的HTTP响应码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编码解码操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">string<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token comment"># 字符串转换为字节码</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token comment"># 字节码转换为字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="07-User-Agent（用户代理）"><a href="#07-User-Agent（用户代理）" class="headerlink" title="07 User-Agent（用户代理）"></a>07 User-Agent（用户代理）</h2><p>User-Agent 即用户代理，简称“UA”，它是一个特殊字符串头。网站服务器通过识别 “UA”来确定用户所使用的操作系统版本、CPU 类型、浏览器版本等信息。而网站服务器则通过判断 UA 来给客户端发送不同的页面。</p><p>网站通过识别请求头中 User-Agent 信息来判断是否是爬虫访问网站。如果是，网站首先对该 IP 进行预警，对其进行重点监控，当发现该 IP 超过规定时间内的访问次数， 将在一段时间内禁止其再次访问网站。</p><p>通过向 HTTP 测试网站（<a href="http://httpbin.org/%EF%BC%89%E5%8F%91%E9%80%81">http://httpbin.org/）发送</a> GET 请求来查看请求头信息，从而获取爬虫程序的 UA。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#导入模块</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token comment">#向网站发送get请求</span>response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出结果可以看出，User-Agent 竟然是 Python-urllib/3.7，这显然是爬虫程序访问网站。因此就需要重构 User-Agent，将其伪装成“浏览器”访问网站。</p><p><strong>重构爬虫UA信息</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token comment"># 定义变量：URL 与 headers</span>url <span class="token operator">=</span> <span class="token string">'http://httpbin.org/get'</span> <span class="token comment">#向测试网站发送请求</span><span class="token comment">#重构请求头，伪装成 Mac火狐浏览器访问，可以使用上表中任意浏览器的UA信息</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:65.0) Gecko/20100101 Firefox/65.0'</span><span class="token punctuation">&#125;</span><span class="token comment"># 1、创建请求对象，包装ua信息</span>req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span> <span class="token comment">## 重构请求头</span><span class="token comment"># 2、发送请求，获取响应对象</span>res <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token comment"># 3、提取响应内容</span>html <span class="token operator">=</span> res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="08-构建User-Agnet代理池"><a href="#08-构建User-Agnet代理池" class="headerlink" title="08 构建User-Agnet代理池"></a>08 构建User-Agnet代理池</h2><p>构建用户代理池，能够避免总是使用一个 UA 来访问网站，因为短时间内总使用一个 UA 高频率访问的网站，可能会引起网站的警觉，从而封杀掉 IP。</p><p>在您的 Pycharm 工作目录中定义一个 ua_info.py 文件，如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ua_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent:Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0'</span><span class="token punctuation">,</span>    <span class="token string">' Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1'</span><span class="token punctuation">,</span>    <span class="token string">'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1'</span><span class="token punctuation">,</span>    <span class="token string">' Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>模块随机获取UA</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># pip install fake-useragent</span><span class="token keyword">from</span> fake_useragent <span class="token keyword">import</span> UserAgent<span class="token comment">#实例化一个对象</span>ua<span class="token operator">=</span>UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#随机获取一个ie浏览器ua</span><span class="token keyword">print</span><span class="token punctuation">(</span>ua<span class="token punctuation">.</span>ie<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ua<span class="token punctuation">.</span>ie<span class="token punctuation">)</span><span class="token comment">#随机获取一个火狐浏览器ua</span><span class="token keyword">print</span><span class="token punctuation">(</span>ua<span class="token punctuation">.</span>firefox<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ua<span class="token punctuation">.</span>firefox<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="09-URL编码-解码详解"><a href="#09-URL编码-解码详解" class="headerlink" title="09 URL编码/解码详解"></a>09 URL编码/解码详解</h2><p>当 URL 路径或者查询参数中，带有中文或者特殊字符的时候，就需要对 URL 进行编码（采用十六进制编码格式）。URL 编码的原则是使用安全字符去表示那些不安全的字符。</p><blockquote><p>安全字符，指的是没有特殊用途或者特殊意义的字符。</p></blockquote><p>URL 中规定了一些具有特殊意义的字符，常被用来分隔两个不同的 URL 组件，这些字符被称为<strong>保留字符</strong>。</p><p>常用的保留字符有：/ . … # @ $ + ; % : ? = &amp;</p><p><strong>哪些字符需要编码</strong></p><p>URL 之所以需要编码，是因为 URL 中的某些字符会引起歧义，比如 URL 查询参数中包含了”&amp;”或者”%”就会造成服务器解析错误；</p><p>URL 编码协议规定（RFC3986 协议）：URL 中只允许使用 ASCII 字符集<strong>可以显示的字符</strong>，比如英文字母、数字、和<code>- _ . ~ ! *</code>这 6 个<strong>特殊字符</strong>。当在 URL 中使用不属于 ASCII 字符集的字符时，就要使用特殊的符号对该字符进行编码，比如空格需要用<code>%20</code>来表示。</p><table><thead><tr><th>字符</th><th>含义</th><th>十六进制值编码</th></tr></thead><tbody><tr><td>+</td><td>URL 中 + 号表示空格</td><td>%2B</td></tr><tr><td>空格</td><td>URL中的空格可以编码为 + 号或者 %20</td><td>%20</td></tr><tr><td>/</td><td>分隔目录和子目录</td><td>%2F</td></tr><tr><td>?</td><td>分隔实际的 URL 和参数</td><td>%3F</td></tr><tr><td>%</td><td>指定特殊字符</td><td>%25</td></tr><tr><td>#</td><td>表示书签</td><td>%23</td></tr><tr><td>&amp;</td><td>URL 中指定的参数间的分隔符</td><td>%26</td></tr><tr><td>=</td><td>URL 中指定参数的值</td><td>%3D</td></tr></tbody></table><p>下面简单总结一下，哪些字符需要编码，分为以下三种情况：</p><ul><li>ASCII 表中没有对应的可显示字符，例如，汉字。</li><li>不安全字符，包括：# ”% &lt;&gt; [] {} | \ ^ ` 。</li><li>部分保留字符，即 &amp; / : ; = ? @ 。</li></ul><p><strong>Python实现编码与解码</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#导入parse模块</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token comment">#构建查询字符串字典</span>query_string <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'wd'</span> <span class="token punctuation">:</span> <span class="token string">'爬虫'</span><span class="token punctuation">&#125;</span><span class="token comment">#调用parse模块的urlencode()进行编码</span>result <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>query_string<span class="token punctuation">)</span><span class="token comment">#使用format函数格式化字符串，拼接url地址</span>url <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/s?&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment"># wd=%E7%88%AC%E8%99%AB</span><span class="token comment"># http://www.baidu.com/s?wd=%E7%88%AC%E8%99%AB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了使用 urlencode() 方法之外，也可以使用 quote(string) 方法实现编码，代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token comment">#注意url的书写格式，和 urlencode存在不同</span>url <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/s?wd=&#123;&#125;'</span>word <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入要搜索的内容:'</span><span class="token punctuation">)</span><span class="token comment">#quote()只能对字符串进行编码</span>query_string <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>query_string<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：quote() 只能对字符串编码，而 urlencode() 可以直接对查询字符串字典进行编码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># urllib.parse</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token string">'value'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">#字典</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token comment">#字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>URL解码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parsestring <span class="token operator">=</span> <span class="token string">'%E7%88%AC%E8%99%AB'</span>result <span class="token operator">=</span> parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment"># 爬虫</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-【实例】爬虫抓取网页"><a href="#10-【实例】爬虫抓取网页" class="headerlink" title="10 【实例】爬虫抓取网页"></a>10 【实例】爬虫抓取网页</h2><ol><li>拼接 url 地址</li><li>发送请求</li><li>将照片保存至本地</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span>parse<span class="token comment"># 1.拼url地址</span>url <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/s?wd=&#123;&#125;'</span>word <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入搜索内容:'</span><span class="token punctuation">)</span>params <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>word<span class="token punctuation">)</span>full_url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token comment"># 2.发请求保存到本地</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0) Gecko/20100101 Firefox/6.0'</span><span class="token punctuation">&#125;</span>req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>full_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>res <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>html <span class="token operator">=</span> res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment"># 3.保存文件至当前目录</span>filename <span class="token operator">=</span> word <span class="token operator">+</span> <span class="token string">'.html'</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token comment"># 拼接URL地址</span><span class="token keyword">def</span> <span class="token function">get_url</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/s?&#123;&#125;'</span>    <span class="token comment"># 此处使用urlencode()进行编码</span>    params <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'wd'</span><span class="token punctuation">:</span> word<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token keyword">return</span> url<span class="token comment"># 发请求,保存本地文件</span><span class="token keyword">def</span> <span class="token function">request_url</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0) Gecko/20100101 Firefox/6.0'</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 请求对象 + 响应对象 + 提取内容</span>    req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    res <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>    html <span class="token operator">=</span> res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment"># 保存文件至本地</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token comment"># 主程序入口</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    word <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入搜索内容:'</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> get_url<span class="token punctuation">(</span>word<span class="token punctuation">)</span>    filename <span class="token operator">=</span> word <span class="token operator">+</span> <span class="token string">'.html'</span>    request_url<span class="token punctuation">(</span>url<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-【实例】抓取百度贴吧数据"><a href="#11-【实例】抓取百度贴吧数据" class="headerlink" title="11 【实例】抓取百度贴吧数据"></a>11 【实例】抓取百度贴吧数据</h2><p><a href="https://tieba.baidu.com/f?kw=python%E7%88%AC%E8%99%AB&amp;ie=utf-8&amp;pn=50">https://tieba.baidu.com/f?kw=python爬虫&amp;ie=utf-8&amp;pn=50</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span>parse<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">from</span> ua_info <span class="token keyword">import</span> ua_list <span class="token comment">#使用自定义的ua池</span><span class="token comment">#定义一个爬虫类</span><span class="token keyword">class</span> <span class="token class-name">TiebaSpider</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#初始化url属性</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>url<span class="token operator">=</span><span class="token string">'http://tieba.baidu.com/f?&#123;&#125;'</span>    <span class="token comment"># 1.请求函数，得到页面，传统三步</span>    <span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>        req<span class="token operator">=</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>ua_list<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        res<span class="token operator">=</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>        <span class="token comment">#windows会存在乱码问题，需要使用 gbk解码，并使用ignore忽略不能处理的字节</span>        <span class="token comment">#linux不会存在上述问题，可以直接使用decode('utf-8')解码</span>        html<span class="token operator">=</span>res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">,</span><span class="token string">"ignore"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> html    <span class="token comment"># 2.解析函数，此处代码暂时省略，还没介绍解析模块</span>    <span class="token keyword">def</span> <span class="token function">parse_html</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment"># 3.保存文件函数</span>    <span class="token keyword">def</span> <span class="token function">save_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>filename<span class="token punctuation">,</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    <span class="token comment"># 4.入口函数</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        name<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入贴吧名：'</span><span class="token punctuation">)</span>        begin<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入起始页：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        stop<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'输入终止页：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># +1 操作保证能够取到整数</span>        <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span>stop<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pn<span class="token operator">=</span><span class="token punctuation">(</span>page<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">50</span>            params<span class="token operator">=</span><span class="token punctuation">&#123;</span>                <span class="token string">'kw'</span><span class="token punctuation">:</span>name<span class="token punctuation">,</span>                <span class="token string">'pn'</span><span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">(</span>pn<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">#拼接URL地址   </span>            params<span class="token operator">=</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>params<span class="token punctuation">)</span>            url<span class="token operator">=</span>self<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>            <span class="token comment">#发请求</span>            html<span class="token operator">=</span>self<span class="token punctuation">.</span>get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token comment">#定义路径</span>            filename<span class="token operator">=</span><span class="token string">'&#123;&#125;-&#123;&#125;页.html'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>page<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>save_html<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>html<span class="token punctuation">)</span>            <span class="token comment">#提示</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第%d页抓取成功'</span><span class="token operator">%</span>page<span class="token punctuation">)</span>            <span class="token comment">#每爬取一个页面随机休眠1-2秒钟的时间</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#以脚本的形式启动爬虫</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>     start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    spider<span class="token operator">=</span>TiebaSpider<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#实例化一个对象spider</span>    spider<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#调用入口函数</span>    end<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#查看程序执行时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行时间:%.2f'</span><span class="token operator">%</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#爬虫执行时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>爬虫程序结构</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 程序结构</span><span class="token keyword">class</span> <span class="token class-name">xxxSpider</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 定义常用变量,比如url或计数变量等</span>    <span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取响应内容函数,使用随机User-Agent</span>    <span class="token keyword">def</span> <span class="token function">parse_html</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 使用正则表达式来解析页面，提取数据</span>    <span class="token keyword">def</span> <span class="token function">write_html</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 将提取的数据按要求保存，csv、MySQL数据库等</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 主函数，用来控制整体逻辑</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 程序开始运行时间</span>    spider <span class="token operator">=</span> xxxSpider<span class="token punctuation">(</span><span class="token punctuation">)</span>    spider<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-正则表达式基本语法"><a href="#12-正则表达式基本语法" class="headerlink" title="12 正则表达式基本语法"></a>12 正则表达式基本语法</h2><p>正则表达式(regular expression)是一种字符串匹配模式或者规则，它可以用来检索、替换那些符合特定规则的文本。</p><p>在使用 Python 编写爬虫的过程中，re 模块通常做为一种解析方法来使用。通过审查网页元素来获取网页的大体结构，然后使用解析模块来提取你想要的网页信息，最终实现数据的抓取。</p><table><thead><tr><th>元字符</th><th>匹配内容</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td>\w</td><td>匹配所有普通字符(数字、字母或下划线)</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\n</td><td>匹配一个换行符</td></tr><tr><td>\t</td><td>匹配一个制表符</td></tr><tr><td>\b</td><td>匹配一个单词的结尾</td></tr><tr><td>^</td><td>匹配字符串的开始位置</td></tr><tr><td>$</td><td>匹配字符串的结尾位置</td></tr><tr><td>\W</td><td>匹配非字母或数字或下划线</td></tr><tr><td>\D</td><td>匹配非数字</td></tr><tr><td>\S</td><td>匹配非空白符</td></tr><tr><td>a|b</td><td>匹配字符 a 或字符 b</td></tr><tr><td>()</td><td>正则表达式分组所用符号，匹配括号内的表达式，表示一个组。</td></tr><tr><td>[…]</td><td>匹配字符组中的字符</td></tr><tr><td>[^…]</td><td>匹配除了字符组中字符的所有字符</td></tr></tbody></table><table><thead><tr><th>量词</th><th>用法说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或者更多次</td></tr><tr><td>+</td><td>重复一次或者更多次</td></tr><tr><td>？</td><td>重复0次或者一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或者更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><p>正则表达式默认为贪婪匹配，也就是尽可能多的向后匹配字符，比如 {n,m}  贪婪模式以匹配m为目标，而在非贪婪模式是尽可能少的向后匹配内容，也就是说匹配 n 次即可。</p><table><thead><tr><th>元字符(贪婪模式)</th><th>非贪婪模式</th></tr></thead><tbody><tr><td>*</td><td>*?</td></tr><tr><td>+</td><td>+？</td></tr><tr><td>？</td><td>??</td></tr><tr><td>{n,m}</td><td>{n,m}？</td></tr></tbody></table><p>如果使用正则表达式匹配特殊字符时，则需要在字符前加<code>\</code>表示转意。常见的特殊字符如下：</p><pre class="line-numbers language-none"><code class="language-none">* + ? ^ $ [] () &#123;&#125; | \<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>1、<code>.</code> 匹配任意除换行符“\n”外的字符；<br>2、<code>*</code>表示匹配前一个字符0次或无限次；<br>3、<code>?</code>表示前边字符的0次或1次重复<br>4、<code>+</code>或后跟<code>？</code>表示非贪婪匹配，即尽可能少的匹配，如？重复任意次，但尽可能少重复；<br>5、 <code>.?</code> 表示匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。<br>如：<code>a.*?b</code>匹配最短的，以a开始，以b结束的字符串。如果把它应用于<code>aabab</code>的话，它会匹配<code>aab</code>和<code>ab</code>。否则贪婪模式下匹配结果为<code>aabab</code>。</p></blockquote><h2 id="13-Python-re模块用法"><a href="#13-Python-re模块用法" class="headerlink" title="13 Python re模块用法"></a>13 Python re模块用法</h2><p>在 Python 爬虫过程中，实现网页元素解析的方法有很多，正则解析只是其中之一，常见的还有 BeautifulSoup 和 lxml，它们都支持网页 HTML 元素的解析操作。</p><ul><li>pattern：正则表达式对象。</li><li>flags：代表功能标志位，扩展正则表达式的匹配。</li><li>pos 截取目标字符串的开始匹配位置。</li><li>endpos 截取目标字符串的结束匹配位置。</li></ul><ol><li><code>regex=re.compile(pattern,flags=0)</code>，用来生成正则表达式对象</li><li><code>re.findall(pattern,string,flags=0)</code>，该函数的返回值是匹配到的内容列表，如果正则表达式有子组，则只能获取到子组对应的内容。</li><li><code>regex.findall(string,pos,endpos)</code>，根据正则表达式对象匹配目标字符串内容</li><li><code>re.split(pattern,string,flags = 0)</code>，使用正则表达式匹配内容，切割目标字符串。返回值是切割后的内容列表。</li><li><code>re.sub(pattern,replace,string,max,flags = 0)</code>，使用一个字符串替换正则表达式匹配到的内容。返回值是替换后的字符串。<ul><li>max：最多替换几处，默认替换全部，</li></ul></li><li><code>re.search(pattern,string,flags=0)</code>，匹配目标字符串第一个符合的内容，返回值为匹配的对象。</li></ol><table><thead><tr><th>flag功能标志位</th><th>说明</th></tr></thead><tbody><tr><td>A</td><td>元字符只能匹配 ASCII码。</td></tr><tr><td>I</td><td>匹配忽略字母大小写。</td></tr><tr><td>S</td><td>使得<code>.</code>元字符可以匹配换行符。</td></tr><tr><td>M</td><td>使 ^ $ 可以匹配每一行的开头和结尾位置。</td></tr></tbody></table><p>可以同时使用福多个功能标志位，比如 flags=re.I|re.S。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rehtml<span class="token operator">=</span><span class="token triple-quoted-string string">"""&lt;div>&lt;p>www.biancheng.net&lt;/p>&lt;/div>&lt;div>&lt;p>编程帮&lt;/p>&lt;/div>"""</span><span class="token comment">#贪婪匹配，re.S可以匹配换行符</span><span class="token comment">#创建正则表达式对象</span>pattern<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;div>&lt;p>.*&lt;/p>&lt;/div>'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token comment">#匹配HTMLX元素，提取信息</span>re_list<span class="token operator">=</span>pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re_list<span class="token punctuation">)</span><span class="token comment">#非贪婪模式匹配，re.S可以匹配换行符</span>pattern<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;div>&lt;p>.*?&lt;/p>&lt;/div>'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>re_list<span class="token operator">=</span>pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从上述输出结果可以得出==非贪婪模式==更适合提取 HTML 信息。</p></blockquote><p><strong>正则表达式分组</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#正则表达式分组</span>website<span class="token operator">=</span><span class="token string">"编程帮 www.biancheng.net"</span><span class="token comment">#提取所有信息</span><span class="token comment">#注意此时正则表达式的 "." 需要转义因此使用 \.</span>pattern_1<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'\w+\s+\w+\.\w+\.\w+'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pattern_1<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>website<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#提取匹配信息的第一项</span>pattern_2<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'(\w+)\s+\w+\.\w+\.\w+'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pattern_2<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>website<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#有两个及以上的()则以元组形式显示</span>pattern_3<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'(\w+)\s+(\w+\.\w+\.\w+)'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pattern_3<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>website<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实战演练：从下面的 HTML 代码中使用 re 模块提取出两部影片的名称和主演信息。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">html<span class="token operator">=</span><span class="token triple-quoted-string string">"""&lt;div class="movie-item-info">&lt;p class="name">&lt;a title="你好，李焕英">你好，李焕英&lt;/a>&lt;/p>&lt;p class="star">主演：贾玲,张小斐,沈腾&lt;/p>    &lt;/div>&lt;div class="movie-item-info">&lt;p class="name">&lt;a title="刺杀，小说家">刺杀，小说家&lt;/a>&lt;/p>&lt;p class="star">主演：雷佳音,杨幂,董子健,于和伟&lt;/p>    &lt;/div> """</span><span class="token comment"># 寻找HTML规律，书写正则表达式，使用正则表达式分组提取信息</span>pattern<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'&lt;div.*?&lt;a title="(.*?)".*?star">(.*?)&lt;/p.*?div>'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>r_list<span class="token operator">=</span>pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r_list<span class="token punctuation">)</span><span class="token comment"># 整理数据格式并输出</span><span class="token keyword">if</span>  r_list<span class="token punctuation">:</span>    <span class="token keyword">for</span> r_info <span class="token keyword">in</span>  r_list<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"影片名称："</span><span class="token punctuation">,</span>r_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"影片主演："</span><span class="token punctuation">,</span>r_info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">*</span><span class="token string">"*"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-Python-csv模块（读写文件）"><a href="#14-Python-csv模块（读写文件）" class="headerlink" title="14 Python csv模块（读写文件）"></a>14 Python csv模块（读写文件）</h2><p>CSV 文件又称为逗号分隔值文件，是一种通用的、相对简单的文件格式，用以存储表格数据，包括数字或者字符。CSV 是电子表格和数据库中最常见的输入、输出文件格式，可参考《<a href="https://baike.baidu.com/item/CSV/10739?fr=aladdin">CSV介绍</a>》。</p><p>通过爬虫将数据抓取的下来，然后把数据保存在文件，或者数据库中，这个过程称为数据的持久化存储。</p><h4 id="CSV文件写入"><a href="#CSV文件写入" class="headerlink" title="CSV文件写入"></a>CSV文件写入</h4><ol><li> csv.writer()</li></ol><p>   <code>writer(csvfile, dialect=&#39;excel&#39;, **fmtparams)</code></p><ul><li>csvfile：必须是支持迭代(Iterator)的对象，可以是文件(file)对象或者列表(list)对象。</li><li>dialect：编码风格，默认为 excel 的风格，也就是使用逗号<code>,</code>分隔。</li><li>fmtparam：格式化参数，用来覆盖之前 dialect 对象指定的编码风格。</li></ul>   <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token comment"># 操作文件对象时，需要添加newline参数逐行写入，否则会出现空行现象</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'eggs.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> csvfile<span class="token punctuation">:</span>    <span class="token comment"># delimiter 指定分隔符，默认为逗号，这里指定为空格</span>    <span class="token comment"># quotechar 表示引用符</span>    <span class="token comment"># writerow 单行写入，列表格式传入数据</span>    spamwriter <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span>quotechar<span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">)</span>    spamwriter<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'www.biancheng.net'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'how are you'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    spamwriter<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> <span class="token string">'web site'</span><span class="token punctuation">,</span> <span class="token string">'www.biancheng.net'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># --------------------------</span><span class="token comment"># 写入多行</span><span class="token keyword">import</span> csv<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'aggs.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token comment"># 注意传入数据的格式为列表元组格式</span>    writer<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">,</span><span class="token string">'love'</span><span class="token punctuation">,</span><span class="token string">'you'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li> csv.DictWriter()</li></ol>   <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'names.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> csvfile<span class="token punctuation">:</span>    <span class="token comment">#构建字段名称，也就是key</span>    fieldnames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'first_name'</span><span class="token punctuation">,</span> <span class="token string">'last_name'</span><span class="token punctuation">]</span>    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictWriter<span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> fieldnames<span class="token operator">=</span>fieldnames<span class="token punctuation">)</span>    <span class="token comment"># 写入字段名，当做表头</span>    writer<span class="token punctuation">.</span>writeheader<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 多行写入</span>    writer<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'first_name'</span><span class="token punctuation">:</span> <span class="token string">'Baked'</span><span class="token punctuation">,</span> <span class="token string">'last_name'</span><span class="token punctuation">:</span> <span class="token string">'Beans'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'first_name'</span><span class="token punctuation">:</span> <span class="token string">'Lovely'</span><span class="token punctuation">,</span> <span class="token string">'last_name'</span><span class="token punctuation">:</span> <span class="token string">'Spam'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 单行写入</span>    writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'first_name'</span><span class="token punctuation">:</span> <span class="token string">'Wonderful'</span><span class="token punctuation">,</span> <span class="token string">'last_name'</span><span class="token punctuation">:</span> <span class="token string">'Spam'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CSV文件读取"><a href="#CSV文件读取" class="headerlink" title="CSV文件读取"></a>CSV文件读取</h4><ol><li><p><code>csv.reader(csvfile, dialect=&#39;excel&#39;, **fmtparams)</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'eggs.csv'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> csvfile<span class="token punctuation">:</span>    spamreader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> quotechar<span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> spamreader<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p> csv.DictReader()</p></li></ol>   <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'names.csv'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> csvfile<span class="token punctuation">:</span>    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>DictReader<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> reader<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'first_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'last_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-【实例】抓取猫眼电影排行榜"><a href="#15-【实例】抓取猫眼电影排行榜" class="headerlink" title="15 【实例】抓取猫眼电影排行榜"></a>15 【实例】抓取猫眼电影排行榜</h2><p>本节使用 Python 爬虫抓取猫眼电影网 TOP100 排行榜（<a href="https://maoyan.com/board/4%EF%BC%89%E5%BD%B1%E7%89%87%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%8C%85%E6%8B%AC%E7%94%B5%E5%BD%B1%E5%90%8D%E7%A7%B0%E3%80%81%E4%B8%8A%E6%98%A0%E6%97%B6%E9%97%B4%E3%80%81%E4%B8%BB%E6%BC%94%E4%BF%A1%E6%81%AF%E3%80%82">https://maoyan.com/board/4）影片信息，包括电影名称、上映时间、主演信息。</a></p><ol><li>要确定页面类型（静态页面或动态页面），</li><li>找出页面的 url 规律，</li><li>分析网页元素结构来确定正则表达式，从而提取网页信息。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token keyword">import</span> re<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">import</span> csv<span class="token keyword">from</span> ua_info <span class="token keyword">import</span> ua_list<span class="token comment"># 定义一个爬虫类</span><span class="token keyword">class</span> <span class="token class-name">MaoyanSpider</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment"># 初始化</span>    <span class="token comment"># 定义初始页面url</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">'https://maoyan.com/board/4?offset=&#123;&#125;'</span>        <span class="token comment"># 请求函数</span>    <span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>ua_list<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        res <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>        html <span class="token operator">=</span> res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 直接调用解析函数</span>        self<span class="token punctuation">.</span>parse_html<span class="token punctuation">(</span>html<span class="token punctuation">)</span>        <span class="token comment"># 解析函数</span>    <span class="token keyword">def</span> <span class="token function">parse_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 正则表达式</span>        re_bds <span class="token operator">=</span> <span class="token string">'&lt;div class="movie-item-info">.*?title="(.*?)".*?&lt;p class="star">(.*?)&lt;/p>.*?class="releasetime">(.*?)&lt;/p>'</span>        <span class="token comment"># 生成正则表达式对象</span>        pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>re_bds<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        <span class="token comment"># r_list: [('我不是药神','徐峥,周一围,王传君','2018-07-05'),...] 列表元组</span>        r_list <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>save_html<span class="token punctuation">(</span>r_list<span class="token punctuation">)</span>    <span class="token comment"># 保存数据函数，使用python内置csv模块</span>    <span class="token keyword">def</span> <span class="token function">save_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>r_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#生成文件对象  </span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'maoyan.csv'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span>newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token comment">#生成csv操作对象</span>            writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">)</span>            <span class="token comment">#整理数据</span>            <span class="token keyword">for</span> r <span class="token keyword">in</span> r_list<span class="token punctuation">:</span>                name <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                star <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token comment"># 上映时间：2018-07-05</span>                <span class="token comment"># 切片截取时间</span>                time <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">]</span>                L <span class="token operator">=</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span>star<span class="token punctuation">,</span>time<span class="token punctuation">]</span>                <span class="token comment"># 写入csv文件</span>                writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>L<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>time<span class="token punctuation">,</span>star<span class="token punctuation">)</span>    <span class="token comment"># 主函数</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#抓取第一页数据</span>        <span class="token keyword">for</span> offset <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> self<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token comment">#生成1-2之间的浮点数</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 以脚本方式启动</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment">#捕捉异常错误</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        spider <span class="token operator">=</span> MaoyanSpider<span class="token punctuation">(</span><span class="token punctuation">)</span>        spider<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"错误:"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-Python-Pymysql实现数据存储"><a href="#16-Python-Pymysql实现数据存储" class="headerlink" title="16 Python Pymysql实现数据存储"></a>16 Python Pymysql实现数据存储</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*-coding:utf-8-*-</span><span class="token keyword">import</span> pymysql<span class="token comment">#创建对象</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">,</span><span class="token string">'maoyandb'</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># sql语句执性，单行插入</span>info_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'刺杀,小说家'</span><span class="token punctuation">,</span><span class="token string">'雷佳音,杨幂'</span><span class="token punctuation">,</span><span class="token string">'2021-2-12'</span><span class="token punctuation">]</span>sql <span class="token operator">=</span> <span class="token string">'insert into movieinfo values(%s,%s,%s)'</span><span class="token comment">#列表传参</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span>info_list<span class="token punctuation">)</span><span class="token comment"># sql语句执性，列表元组</span><span class="token comment"># info_list = [('我不是药神','徐峥','2018-07-05'),('你好,李焕英','贾玲','2021-02-12')]</span><span class="token comment"># sql = 'insert into movieinfo values(%s,%s,%s)'</span><span class="token comment"># cursor.executemany(sql,info_list)</span>db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 关闭</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=gbk</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token keyword">import</span> re<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">from</span> ua_info <span class="token keyword">import</span> ua_list<span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">MaoyanSpider</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#初始化属性对象</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">'https://maoyan.com/board/4?offset=&#123;&#125;'</span>        <span class="token comment">#数据库连接对象</span>        self<span class="token punctuation">.</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            <span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">,</span><span class="token string">'maoyandb'</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>        <span class="token comment">#创建游标对象</span>        self<span class="token punctuation">.</span>cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>ua_list<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        res <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>        html <span class="token operator">=</span> res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 直接解析</span>        self<span class="token punctuation">.</span>parse_html<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>        re_bds <span class="token operator">=</span> <span class="token string">'&lt;div class="movie-item-info">.*?title="(.*?)".*?&lt;p class="star">(.*?)&lt;/p>.*?class="releasetime">(.*?)&lt;/p>'</span>        pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>re_bds<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        r_list <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>save_html<span class="token punctuation">(</span>r_list<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">save_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> r_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        sql <span class="token operator">=</span> <span class="token string">'insert into movieinfo values(%s,%s,%s)'</span>        <span class="token comment"># 整理数据</span>        <span class="token keyword">for</span> r <span class="token keyword">in</span> r_list<span class="token punctuation">:</span>            t <span class="token operator">=</span> <span class="token punctuation">(</span>                r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">]</span>            <span class="token punctuation">)</span>            L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span>        <span class="token comment"># 一次性插入多条数据 L:[(),(),()]</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span>sql<span class="token punctuation">,</span>L<span class="token punctuation">)</span>            <span class="token comment"># 将数据提交数据库</span>            self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token comment"># 发生错误则回滚</span>            self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> offset <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> self<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 断开游标与数据库连接</span>        self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    spider <span class="token operator">=</span> MaoyanSpider<span class="token punctuation">(</span><span class="token punctuation">)</span>    spider<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    end<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行时间:%.2f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-【实例】抓取多级页面数据"><a href="#17-【实例】抓取多级页面数据" class="headerlink" title="17 【实例】抓取多级页面数据"></a>17 【实例】抓取多级页面数据</h2><ul><li>一级页面提供了获取二级页面的访问链接。</li><li>二级页面作为详情页用来提取所需数据。</li></ul><p>使用 Python 内置模块 md5 来生成加密“指纹”</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#导入模块</span><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5<span class="token comment">#待加密的url</span>url<span class="token operator">=</span><span class="token string">"https://www.dytt8.net/html/gndy/dyzz/20210226/61131.html"</span><span class="token comment"># 生成MD5对象</span>secret <span class="token operator">=</span> md5<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 加密url</span>secret<span class="token punctuation">.</span>update<span class="token punctuation">(</span>url<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 提取十六进制的加密串</span>finger <span class="token operator">=</span> secret<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>finger<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token keyword">import</span> re<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">import</span> pymysql<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5<span class="token keyword">from</span> ua_info <span class="token keyword">import</span> ua_list<span class="token keyword">import</span> sys<span class="token keyword">class</span> <span class="token class-name">MovieSkySpider</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">'https://www.dytt8.net/html/gndy/dyzz/list_23_&#123;&#125;.html'</span>        self<span class="token punctuation">.</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>            <span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">,</span><span class="token string">'movieskydb'</span><span class="token punctuation">,</span>            charset<span class="token operator">=</span><span class="token string">'utf8'</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 1.请求函数</span>    <span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>ua_list<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        res <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>        <span class="token comment"># 本网站使用gb2312的编码格式</span>        html <span class="token operator">=</span> res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gb2312'</span><span class="token punctuation">,</span> <span class="token string">'ignore'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> html    <span class="token comment"># 2.正则解析函数</span>    <span class="token keyword">def</span> <span class="token function">re_func</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>re_bds<span class="token punctuation">,</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>        pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>re_bds<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        r_list <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span>        <span class="token keyword">return</span> r_list    <span class="token comment"># 3.提取数据函数</span>    <span class="token keyword">def</span> <span class="token function">parse_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>one_url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 调用请求函数，获取一级页面</span>        one_html <span class="token operator">=</span> self<span class="token punctuation">.</span>get_html<span class="token punctuation">(</span>one_url<span class="token punctuation">)</span>        re_bds <span class="token operator">=</span> <span class="token string">'&lt;table width="100%".*?&lt;td width="5%".*?&lt;a href="(.*?)".*?ulink">.*?&lt;/table>'</span>        <span class="token comment"># 获取二级页面链接</span>        <span class="token comment"># link_list: ['/html//html/gndy/dyzz/20210226/61131.html','/html/xxx','','']</span>        link_list <span class="token operator">=</span> self<span class="token punctuation">.</span>re_func<span class="token punctuation">(</span>re_bds<span class="token punctuation">,</span>one_html<span class="token punctuation">)</span>        <span class="token keyword">for</span> link <span class="token keyword">in</span> link_list<span class="token punctuation">:</span>            <span class="token comment"># 判断是否需要爬取此链接</span>            <span class="token comment"># 1.获取指纹</span>            <span class="token comment"># 拼接二级页面url</span>            two_url <span class="token operator">=</span> <span class="token string">'https://www.dytt8.net'</span> <span class="token operator">+</span> link            s <span class="token operator">=</span> md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">#加密url，需要是字节串</span>            s<span class="token punctuation">.</span>update<span class="token punctuation">(</span>two_url<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 生成指纹，获取十六进制加密字符串，</span>            finger <span class="token operator">=</span> s<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 2.通过函数判断指纹在数据库中是否存在</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_hold_on<span class="token punctuation">(</span>finger<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 抓取二级页面数据</span>                self<span class="token punctuation">.</span>save_html<span class="token punctuation">(</span>two_url<span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment"># 抓取后，把想用的url专属指纹存入数据库</span>                ins <span class="token operator">=</span> <span class="token string">'insert into request_finger values (%s)'</span>                self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>ins<span class="token punctuation">,</span><span class="token punctuation">[</span>finger<span class="token punctuation">]</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token string">'更新完成'</span><span class="token punctuation">)</span>    <span class="token comment"># 4.判断链接是否已经抓取过</span>    <span class="token keyword">def</span> <span class="token function">is_hold_on</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>finger<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 查询数据库</span>        sql<span class="token operator">=</span><span class="token string">'select finger from request_finger where finger=%s'</span>        <span class="token comment"># execute()函数返回值为受影响的行数（即0或者非0）</span>        r <span class="token operator">=</span> self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token punctuation">[</span>finger<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 如果为0表示没有抓取过</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> r<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token comment"># 5.解析二级页面，获取数据（名称与下载链接）</span>    <span class="token keyword">def</span> <span class="token function">save_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>two_url<span class="token punctuation">)</span><span class="token punctuation">:</span>        two_html <span class="token operator">=</span> self<span class="token punctuation">.</span>get_html<span class="token punctuation">(</span>two_url<span class="token punctuation">)</span>        re_bds <span class="token operator">=</span> '<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title_all"</span><span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>font color<span class="token operator">=</span><span class="token comment">#07519a>(.*?)&lt;/font>&lt;/h1> \</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token operator">&lt;</span>a<span class="token punctuation">.</span><span class="token operator">*</span>?href<span class="token operator">=</span><span class="token string">"(.*?)"</span><span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">*</span>?style<span class="token operator">=</span>"BACKGROUND<span class="token operator">-</span>COLOR<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>'        <span class="token comment"># film_list: [('name','downloadlink'),(),(),()]</span>        film_list <span class="token operator">=</span> self<span class="token punctuation">.</span>re_func<span class="token punctuation">(</span>re_bds<span class="token punctuation">,</span>two_html<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>film_list<span class="token punctuation">)</span>        <span class="token comment"># 插入数据库</span>        sql <span class="token operator">=</span> <span class="token string">'insert into movieinfo values(%s,%s)'</span>        <span class="token comment">#L = list(film_list[0])</span>        self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span>sql<span class="token punctuation">,</span>film_list<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#主函数 </span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 二级页面后四页的正则表达式略有不同，需要重新分析</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> self<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>parse_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    spider <span class="token operator">=</span> MovieSkySpider<span class="token punctuation">(</span><span class="token punctuation">)</span>    spider<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-Python-Requests库安装和使用"><a href="#18-Python-Requests库安装和使用" class="headerlink" title="18 Python Requests库安装和使用"></a>18 Python Requests库安装和使用</h2><p>Requests 库是在 urllib 的基础上开发而来，它使用 Python 语言编写，并且采用了 Apache2 Licensed（一种开源协议）的 HTTP 库。与 urllib 相比，Requests 更加方便、快捷，因此在编写爬虫程序时 Requests 库使用较多。</p><p><code>python -m pip install requests</code></p><ul><li>url：要抓取的 url 地址。</li><li>headers：用于包装请求头信息。</li><li>params：请求时携带的查询字符串参数。</li><li>timeout：超时时间，超过时间会抛出异常。</li></ul><ol><li><p><code>res = requests.get(url,headers=headers,params,timeout)</code></p><p>用于 GET 请求，表示向网站发起请求，获取页面响应对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsdata <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'编程帮'</span><span class="token punctuation">,</span>    <span class="token string">'url'</span><span class="token punctuation">:</span> <span class="token string">"www.biancheng.net"</span><span class="token punctuation">&#125;</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">,</span> params<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token comment">#直接拼接参数也可以</span><span class="token comment">#response = requests.get(http://httpbin.org/get?name=gemey&amp;age=22)</span><span class="token comment">#调用响应对象text属性，获取文本信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>response=requests.post(url,data=&#123;请求体的字典&#125;)</code></p><p>用于 POST 请求，先由用户向目标 url 提交数据，然后服务器返回一个 HttpResponse 响应对象，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment">#百度翻译</span>url <span class="token operator">=</span> <span class="token string">'https://fanyi.baidu.com'</span><span class="token comment">#post请求体携带的参数，可通过开发者调试工具查看</span><span class="token comment">#查看步骤：NetWork选项->Headers选项->Form Data</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'from'</span><span class="token punctuation">:</span> <span class="token string">'zh'</span><span class="token punctuation">,</span>        <span class="token string">'to'</span><span class="token punctuation">:</span> <span class="token string">'en'</span><span class="token punctuation">,</span>        <span class="token string">'query'</span><span class="token punctuation">:</span> <span class="token string">'编程帮www.biancheng.net你好'</span>        <span class="token punctuation">&#125;</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><table><thead><tr><th>HttpResponse 响应对象属性</th><th>说明</th></tr></thead><tbody><tr><td>encoding</td><td>查看或者指定响应字符编码</td></tr><tr><td>status_code</td><td>返回HTTP响应码</td></tr><tr><td>url</td><td>查看请求的 url 地址</td></tr><tr><td>headers</td><td>查看请求头信息</td></tr><tr><td>cookies</td><td>查看cookies 信息</td></tr><tr><td>text</td><td>以字符串形式输出</td></tr><tr><td>content</td><td>以字节流形式输出，若要保存下载图片需使用该属性。</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># response常用属性 示例</span><span class="token keyword">import</span> requestsresponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span>response<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span>    <span class="token comment">#更改为utf-8编码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>  <span class="token comment"># 打印状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>          <span class="token comment"># 打印请求url</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>      <span class="token comment"># 打印头信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>      <span class="token comment"># 打印cookie信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment">#以字符串形式打印网页源码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token comment">#以字节流形式打印</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用：下载python的logo</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=38785274,1357847304&amp;fm=26&amp;gp=0.jpg'</span><span class="token comment">#简单定义浏览器ua信息</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/4.0'</span><span class="token punctuation">&#125;</span>​<span class="token comment">#读取图片需要使用content属性</span>html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token comment">#以二进制的方式下载图片</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'C:/Users/Administrator/Desktop/image/python_logo.jpg'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-【实例】抓取网络照片"><a href="#19-【实例】抓取网络照片" class="headerlink" title="19 【实例】抓取网络照片"></a>19 【实例】抓取网络照片</h2><p>本节编写一个快速下载照片的程序，通过百度图片下载您想要的前 60 张图片，并将其保存至相应的目录。</p><p>百度为了限制爬虫，将原来的翻页版变为了“瀑布流”浏览形式，也就是通过滚动滑轮自动加载图片，此种方式在一定程度上限制了爬虫程序。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">BaiduImageSpider</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">'https://image.baidu.com/search/flip?tn=baiduimage&amp;word=&#123;&#125;'</span>        self<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/4.0'</span><span class="token punctuation">&#125;</span>    <span class="token comment"># 获取图片</span>    <span class="token keyword">def</span> <span class="token function">get_image</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">,</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#使用 requests模块得到响应对象</span>        res<span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>        <span class="token comment"># 更改编码格式</span>        res<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span>        <span class="token comment"># 得到html网页</span>        html<span class="token operator">=</span>res<span class="token punctuation">.</span>text        <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>        <span class="token comment">#正则解析</span>        pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'"hoverURL":"(.*?)"'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        img_link_list <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span>        <span class="token comment">#存储图片的url链接 </span>        <span class="token keyword">print</span><span class="token punctuation">(</span>img_link_list<span class="token punctuation">)</span>        <span class="token comment"># 创建目录，用于保存图片</span>        directory <span class="token operator">=</span> <span class="token string">'C:/Users/Administrator/Desktop/image/&#123;&#125;/'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>        <span class="token comment"># 如果目录不存在则创建，此方法常用</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>directory<span class="token punctuation">)</span>                <span class="token comment">#添加计数 </span>        i <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> img_link <span class="token keyword">in</span> img_link_list<span class="token punctuation">:</span>            filename <span class="token operator">=</span> <span class="token string">'&#123;&#125;&#123;&#125;_&#123;&#125;.jpg'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> word<span class="token punctuation">,</span> i<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>save_image<span class="token punctuation">(</span>img_link<span class="token punctuation">,</span>filename<span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment">#下载图片</span>    <span class="token keyword">def</span> <span class="token function">save_image</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>img_link<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>        html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>img_link<span class="token punctuation">,</span>headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>html<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'下载成功'</span><span class="token punctuation">)</span>    <span class="token comment"># 入口函数 </span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        word <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"您想要谁的照片？"</span><span class="token punctuation">)</span>        word_parse <span class="token operator">=</span> parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>word<span class="token punctuation">)</span>        url <span class="token operator">=</span> self<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>word_parse<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>get_image<span class="token punctuation">(</span>url<span class="token punctuation">,</span>word<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    spider <span class="token operator">=</span> BaiduImageSpider<span class="token punctuation">(</span><span class="token punctuation">)</span>    spider<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-Requests库常用方法和参数"><a href="#20-Requests库常用方法和参数" class="headerlink" title="20 Requests库常用方法和参数"></a>20 Requests库常用方法和参数</h2><p>Requests 库中定义了七个常用的请求方法，这些方法各自有着不同的作用，在这些请求方法中 requests.get() 与 requests.post() 方法最为常用。</p><table><thead><tr><th>请求方法</th><th>说明</th></tr></thead><tbody><tr><td>requests.request()</td><td>构造一个请求对象，该方法是实现以下各个方法的基础。</td></tr><tr><td>requests.get()</td><td>获取HTML网页的主要方法，对应于 HTTP 的 GET 方法。</td></tr><tr><td>requests.head()</td><td>获取HTML网页头信息的方法，对应于 HTTP 的 HEAD 方法。</td></tr><tr><td>requests.post()</td><td>获取 HTML 网页提交 POST请求方法，对应于 HTTP 的 POST。</td></tr><tr><td>requests.put()</td><td>获取HTML网页提交PUT请求方法，对应于 HTTP 的 PUT。</td></tr><tr><td>requests.patch()</td><td>获取HTML网页提交局部修改请求，对应于 HTTP 的 PATCH。</td></tr><tr><td>requests.delete()</td><td>获取HTML页面提交删除请求，对应于 HTTP 的 DELETE。</td></tr></tbody></table><h4 id="SSL认证-verify参数"><a href="#SSL认证-verify参数" class="headerlink" title="SSL认证-verify参数"></a>SSL认证-verify参数</h4><p><code>verify</code>参数的作用是检查 SSL 证书认证，参数的默认值为 True，如果设置为 False 则表示不检查 SSL证书，此参数适用于没有经过 CA 机构认证的 HTTPS 类型的网站。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>  url<span class="token operator">=</span>url<span class="token punctuation">,</span>  params<span class="token operator">=</span>params<span class="token punctuation">,</span>  headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>  verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代理IP-proxies参数"><a href="#代理IP-proxies参数" class="headerlink" title="代理IP-proxies参数"></a>代理IP-proxies参数</h4><p>代理 IP 就是解决上述问题（封杀IP）的，它突破了 IP 地址的访问限制，隐藏了本地网络的真实 IP，而使用第三方 IP 代替自己去访问网站。</p><ol><li><p> 代理IP池</p></li><li><p> proxies参数，Requests 提供了一个代理 IP 参数<code>proxies</code>，</p></li></ol>   <pre class="line-numbers language-python" data-language="python"><code class="language-python">proxies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'协议类型(http/https)'</span><span class="token punctuation">:</span><span class="token string">'协议类型://IP地址:端口号'</span><span class="token punctuation">&#125;</span>proxies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'http://IP:端口号'</span><span class="token punctuation">,</span>   <span class="token string">'https'</span><span class="token punctuation">:</span><span class="token string">'https://IP:端口号'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li> 代理IP使用</li></ol>   <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests​url <span class="token operator">=</span> <span class="token string">'http://httpbin.org/get'</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0'</span><span class="token punctuation">&#125;</span><span class="token comment"># 网上找的免费代理ip</span>proxies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'http://191.231.62.142:8000'</span><span class="token punctuation">,</span>    <span class="token string">'https'</span><span class="token punctuation">:</span><span class="token string">'https://191.231.62.142:8000'</span><span class="token punctuation">&#125;</span>html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>proxies<span class="token operator">=</span>proxies<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li> 付费代理IP</li></ol><p>   付费代理 IP 按照资源类型可划分为：开发代理、私密代理、隧道代理、独享代理，其中最常使用的是开放代理与私密代理。</p><p>   付费代理的收费标准根据 IP 使用的时间长短，以及 IP 的质量高低，从几元到几百元不等。89 免费代理（<a href="http://www.89ip.cn/%EF%BC%89%E6%98%AF%E4%B8%80%E4%B8%AA%E4%B8%93%E9%97%A8%E6%8F%90%E4%BE%9B%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86">http://www.89ip.cn/）是一个专门提供免费代理</a> IP 的网站，不过想找到一个质量较高的免费代理好比大海捞针。</p><h4 id="用户认证-auth参数"><a href="#用户认证-auth参数" class="headerlink" title="用户认证-auth参数"></a>用户认证-auth参数</h4><p>Requests 提供了一个<code>auth</code>参数，该参数的支持用户认证功能，也就是适合那些需要验证用户名、密码的网站。auth 的参数形式是一个元组，<code>auth = (&#39;username&#39;,&#39;password&#39;)</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">xxxSpider</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">'http://code.tarena.com.cn/AIDCode/aid1906/13Redis/'</span>        <span class="token comment"># 网站使用的用户名，密码</span>        self<span class="token punctuation">.</span>auth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'c语言中文网'</span><span class="token punctuation">,</span> <span class="token string">'c.biancheng.net'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_headers</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0"</span><span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> headers    <span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>get_headers<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> auth<span class="token operator">=</span>self<span class="token punctuation">.</span>auth<span class="token punctuation">)</span>        html <span class="token operator">=</span> res<span class="token punctuation">.</span>content        <span class="token keyword">return</span> html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-Proxy-SwitchyOmega安装和使用"><a href="#21-Proxy-SwitchyOmega安装和使用" class="headerlink" title="21 Proxy SwitchyOmega安装和使用"></a>21 Proxy SwitchyOmega安装和使用</h2><p>下载安装插件，Proxy SwitchyOmega 下载安装非常简单，除了通过 Chrome 应用商店安装之外，还可以直接访问官方网站下载相应的版本，网址为：<a href="https://proxy-switchyomega.com/download/%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E5%90%8E%EF%BC%8C%E6%8F%92%E4%BB%B6%E4%BC%9A%E8%A2%AB%E8%87%AA%E5%8A%A8%E5%AE%89%E8%A3%85%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A9%E5%B1%95%E7%A8%8B%E5%BA%8F%E4%B8%AD">https://proxy-switchyomega.com/download/，下载完成后，插件会被自动安装到浏览器扩展程序中</a></p><p><img src="http://c.biancheng.net/uploads/allimg/210819/9-210Q9135R1234.gif" alt="SwitchyOmega 界面"></p><p><img src="http://c.biancheng.net/uploads/allimg/210819/9-210Q9135U95F.gif" alt="新建情景模式"></p><p><img src="http://c.biancheng.net/uploads/allimg/210819/9-210Q9135950954.gif" alt="代理服务器配置"></p><p><img src="http://c.biancheng.net/uploads/allimg/210819/9-210Q914004M21.gif" alt="启用代理服务器"></p><p><img src="http://c.biancheng.net/uploads/allimg/210819/9-210Q9135620X8.gif" alt="查询本机IP"></p><h2 id="22-Xpath简明教程"><a href="#22-Xpath简明教程" class="headerlink" title="22 Xpath简明教程"></a>22 Xpath简明教程</h2><ol><li><p>XPath（全称：XML Path Language）即 XML 路径语言，它是一门在 XML 文档中查找信息的语言，最初被用来搜寻 XML 文档，同时它也适用于搜索 HTML 文档。因此，在爬虫过程中可以使用 XPath 来提取相应的数据。</p></li><li><p>Xpath 使用<strong>路径表达式</strong>来选取<code>XML/HTML</code>文档中的节点或者节点集。</p></li><li><p>Python <strong>第三方解析库 lxml</strong> 对 Xpath 路径表达式提供了良好的支持，能够解析 XML 与 HTML 文档。</p></li></ol><p>XPath 提供了多种类型的节点，常用的节点有：元素、属性、文本、注释以及文档节点。</p><p>XML 文档的节点关系和 HTML 文档相似，同样有父、子、同代、先辈、后代节点。</p><hr><ol><li><p>Xpath 使用路径表达式在文档中选取节点，下表列出了常用的表达式规则：</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>node_name</td><td>选取此节点的所有子节点。</td></tr><tr><td>/</td><td>绝对路径匹配，从根节点选取。</td></tr><tr><td>//</td><td>相对路径匹配，从所有节点中查找当前选择的节点，包括子节点和后代节点，其第一个 / 表示根节点。</td></tr><tr><td>.</td><td>选取当前节点。</td></tr><tr><td>..</td><td>选取当前节点的父节点。</td></tr><tr><td>@</td><td>选取属性值，通过属性值选取数据。常用元素属性有 @id 、@name、@type、@class、@tittle、@href。</td></tr></tbody></table></li><li><p> Xpath 表达式的通配符可以用来选取未知的节点元素</p></li></ol><table><thead><tr><th>通配符</th><th>描述说明</th></tr></thead><tbody><tr><td>*</td><td>匹配任意元素节点</td></tr><tr><td>@*</td><td>匹配任意属性节点</td></tr><tr><td>node()</td><td>匹配任意类型的节点</td></tr></tbody></table><ol start="3"><li><p>多个 Xpath 路径表达式可以同时使用，其语法如下：</p><p><code>xpath表达式1 | xpath表达式2 | xpath表达式3</code></p></li></ol><p>Xpath 提供 100 多个内建函数，这些函数给我们提供了很多便利，比如实现文本匹配、模糊匹配、以及位置匹配等，下面介绍几个常用的内建函数。</p><table><thead><tr><th>函数名称</th><th>xpath表达式示例</th><th>示例说明</th></tr></thead><tbody><tr><td>text()</td><td>./text()</td><td>文本匹配，表示值取当前节点中的文本内容。</td></tr><tr><td>contains()</td><td>//div[contains(@id,’stu’)]</td><td>模糊匹配，表示选择 id 中包含“stu”的所有 div 节点。</td></tr><tr><td>last()</td><td>//*[@class=’web’][last()]</td><td>位置匹配，表示选择@class=’web’的最后一个节点。</td></tr><tr><td>position()</td><td>//*[@class=’site’][position()&lt;=2]</td><td>位置匹配，表示选择@class=’site’的前两个节点。</td></tr><tr><td>start-with()</td><td>“//input[start-with(@id,’st’)]”</td><td>匹配 id 以 st 开头的元素。</td></tr><tr><td>ends-with()</td><td>“//input[ends-with(@id,’st’)]”</td><td>匹配 id 以 st 结尾的元素。</td></tr><tr><td>concat(string1,string2)</td><td>concat(‘C语言中文网’,.//*[@class=’stie’]/@href)</td><td>C语言中文与标签类别属性为”stie”的 href 地址做拼接。</td></tr></tbody></table><h2 id="23-Xpath-Helper的安装和使用"><a href="#23-Xpath-Helper的安装和使用" class="headerlink" title="23 Xpath Helper的安装和使用"></a>23 Xpath Helper的安装和使用</h2><p>Xpath Helper 是一款谷歌应用商店推出的免费工具，因此您需要在谷歌商店进行下载。下载完毕后，谷歌浏览器会将其作为插件自动安装在扩展程序中</p><p>安装完毕后，在需要匹配数据的页面处，使用快捷键打开助手工具（快捷键：ctrl+shift+x）</p><p>将鼠标悬停在需要选取数据的文本上，并按下<code>shift</code>按键就会自动出现 Xpath 表达式，然后再根据您自己的需求对表达式稍微修改即可。</p><p>谷歌开发者调试工具也内置了 Xpath 表达式匹配功能，首先打开调试工具，在下方的调试工作区内使用快捷键<code>ctrl+F</code>打开 Xpath 匹配功能</p><h2 id="24-Python-lxml库的安装和使用"><a href="#24-Python-lxml库的安装和使用" class="headerlink" title="24 Python lxml库的安装和使用"></a>24 Python lxml库的安装和使用</h2><p>lxml 是 Python 的第三方解析库，完全使用 Python 语言编写，它对 Xpath 表达式提供了良好的支持，因此能够了高效地解析 HTML/XML 文档。</p><p>lxml 属于 Python 第三方库，安装：<code>pip3 install lxml</code></p><p>lxml 库提供了一个 etree 模块，该模块专门用来解析 HTML/XML 文档，HTML() 方法能够将 HTML 标签字符串解析为 HTML 文件，该方法可以自动修正 HTML 文本（HTML 字符串存在缺少标签的情况，比如“C语言中文网”缺少一个 </li> 闭合标签，当使用了 HTML() 方法后，会将其自动转换为符合规范的 HTML 文档格式）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreehtml_str <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div>    &lt;ul>         &lt;li class="item1">&lt;a href="link1.html">Python&lt;/a>&lt;/li>         &lt;li class="item2">&lt;a href="link2.html">Java&lt;/a>&lt;/li>         &lt;li class="site1">&lt;a href="c.biancheng.net">C语言中文网&lt;/a>         &lt;li class="site2">&lt;a href="www.baidu.com">百度&lt;/a>&lt;/li>         &lt;li class="site3">&lt;a href="www.jd.com">京东&lt;/a>&lt;/li>     &lt;/ul>&lt;/div>'''</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span><span class="token comment"># tostring()将标签元素转换为字符串输出，注意：result为字节类型</span>result <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-【实例】Python-lxml应用"><a href="#25-【实例】Python-lxml应用" class="headerlink" title="25 【实例】Python lxml应用"></a>25 【实例】Python lxml应用</h2><p>下面使用 lxml 库抓取猫眼电影 Top100 榜（<a href="http://maoyan.com/board/4?offset=0">点击访问</a>），编写程序的过程中，注意与《<a href="http://c.biancheng.net/python_spider/case02.html">Python爬虫抓取猫眼电影排行榜</a>》中使用的正则解析方式对比，这样您会发现 lxml 解析库是如此的方便。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf8</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">from</span> ua_info <span class="token keyword">import</span> ua_list<span class="token keyword">import</span> random<span class="token keyword">class</span> <span class="token class-name">MaoyanSpider</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>url<span class="token operator">=</span><span class="token string">'https://maoyan.com/board/4?offset=50'</span>        self<span class="token punctuation">.</span>headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>ua_list<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">save_html</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        html<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>self<span class="token punctuation">.</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment">#jiexi</span>        parse_html<span class="token operator">=</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html<span class="token punctuation">)</span>        <span class="token comment"># 基准 xpath 表达式，匹配10个&lt;dd>节点对象</span>        dd_list<span class="token operator">=</span>parse_html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//dl[@class="board-wrapper"]/dd'</span><span class="token punctuation">)</span> <span class="token comment">#列表放10个dd</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dd_list<span class="token punctuation">)</span>        <span class="token comment"># .// 表示dd节点的所有子节点后代节点</span>        <span class="token comment"># 构建item空字典将提取的数据放入其中</span>        item<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> dd <span class="token keyword">in</span> dd_list<span class="token punctuation">:</span>            <span class="token comment"># 处理字典数据，注意xpath表达式匹配结果是一个列表，因此需要索引[0]提取数据</span>            item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span>dd<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//p[@class="name"]/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'star'</span><span class="token punctuation">]</span><span class="token operator">=</span>dd<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//p[@class="star"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token operator">=</span>dd<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//p[@class="releasetime"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">#输出数据</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>save_html<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    spider<span class="token operator">=</span>MaoyanSpider<span class="token punctuation">(</span><span class="token punctuation">)</span>    spider<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="26-【实例】抓取链家二手房数据"><a href="#26-【实例】抓取链家二手房数据" class="headerlink" title="26 【实例】抓取链家二手房数据"></a>26 【实例】抓取链家二手房数据</h2><p>本节使用 Python 爬虫库完成链家二手房（<a href="https://bj.lianjia.com/ershoufang/rs/%EF%BC%89%E6%88%BF%E6%BA%90%E4%BF%A1%E6%81%AF%E6%8A%93%E5%8F%96%EF%BC%8C%E5%8C%85%E6%8B%AC%E6%A5%BC%E5%B1%82%E3%80%81%E5%8C%BA%E5%9F%9F%E3%80%81%E6%80%BB%E4%BB%B7%E3%80%81%E5%8D%95%E4%BB%B7%E7%AD%89%E4%BF%A1%E6%81%AF%E3%80%82">https://bj.lianjia.com/ershoufang/rs/）房源信息抓取，包括楼层、区域、总价、单价等信息。</a></p><p>使用 Chrome 开发者工具对页面元素进行审查，从而确定 Xpath 表达式。首先根据要抓取的数据确定“基准表达式”。</p><p>为了提高网页信息的抓取质量，减小网络波动带来的响应，我们可以设置一个规则：在超时时间内（3秒），在该时间内对于请求失败的页面尝试请求三次，如果均未成功，则抓取下一个页面。</p><p>requests.get() 方法提供了 timeout 参数可以用来设置超时时间，此方法还提供了其他实用性参数，比如 auth(用户认证)、veryify(证书认证)、proxies(设置代理 IP)，这在后续内容中会做相应介绍。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding:utf8</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> random<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> time<span class="token comment">#提供ua信息的的包</span><span class="token keyword">from</span> fake_useragent <span class="token keyword">import</span> UserAgent<span class="token keyword">class</span> <span class="token class-name">LinajiaSpider</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>url<span class="token operator">=</span><span class="token string">'https://bj.lianjia.com/ershoufang/pg&#123;&#125;/'</span>        <span class="token comment">#计数，请求一个页面的次数，初始值为1</span>        self<span class="token punctuation">.</span>blog<span class="token operator">=</span><span class="token number">1</span>    <span class="token comment"># 随机取一个UA</span>    <span class="token keyword">def</span> <span class="token function">get_header</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#实例化ua对象</span>        ua<span class="token operator">=</span>UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span>        headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span>ua<span class="token punctuation">.</span>random<span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> headers    <span class="token comment">#发送请求</span>    <span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment">#在超时间内，对于失败页面尝试请求三次</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>blog<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                res<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>self<span class="token punctuation">.</span>get_header<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>                html<span class="token operator">=</span>res<span class="token punctuation">.</span>text                <span class="token keyword">return</span> html            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>blog<span class="token operator">+=</span><span class="token number">1</span>                self<span class="token punctuation">.</span>get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment"># 解析提取数据</span>    <span class="token keyword">def</span> <span class="token function">parse_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>        html<span class="token operator">=</span>self<span class="token punctuation">.</span>get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">if</span> html<span class="token punctuation">:</span>            p<span class="token operator">=</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html<span class="token punctuation">)</span>            <span class="token comment">#基准xpath表达式-30个房源节点对象列表</span>            h_list<span class="token operator">=</span>p<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@class="sellListContent"]/li[@class="clear LOGVIEWDATA LOGCLICKDATA"]'</span><span class="token punctuation">)</span>            <span class="token comment">#所有列表节点对象</span>            <span class="token keyword">for</span> h <span class="token keyword">in</span> h_list<span class="token punctuation">:</span>                item<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                <span class="token comment">#名称</span>                name_list<span class="token operator">=</span>h<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//a[@data-el="region"]/text()'</span><span class="token punctuation">)</span>                <span class="token comment">#判断列表是否为空</span>                item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span>name_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">if</span> name_list <span class="token keyword">else</span> <span class="token boolean">None</span>    <span class="token comment">#户型+面积+方位+是否精装..['2室1厅 | 88.62平米 | 北 南 | 简装 | 顶层(共6层) | 2004年建 | 板楼']</span>                info_list<span class="token operator">=</span>h<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//div[@class="houseInfo"]/text()'</span><span class="token punctuation">)</span>                <span class="token comment">#判断列表是否为空</span>                <span class="token keyword">if</span> info_list<span class="token punctuation">:</span>                    L<span class="token operator">=</span>info_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>          <span class="token comment"># ['2室1厅 ', ' 88.62平米 ', ' 北 南 ', ' 简装 ', ' 顶层(共6层) ', ' 2004年建 ', ' 板楼']</span>                    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>                        item<span class="token punctuation">[</span><span class="token string">'model'</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                        item<span class="token punctuation">[</span><span class="token string">'area'</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                        item<span class="token punctuation">[</span><span class="token string">'direction'</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                        item<span class="token punctuation">[</span><span class="token string">'perfect'</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                        item<span class="token punctuation">[</span><span class="token string">'floor'</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">#区域+总价+单价</span>                address_list<span class="token operator">=</span>h<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//div[@class="positionInfo"]/a/text()'</span><span class="token punctuation">)</span>                item<span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span><span class="token operator">=</span>address_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> address_list <span class="token keyword">else</span> <span class="token boolean">None</span>                total_list<span class="token operator">=</span>h<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//div[@class="totalPrice"]/span/text()'</span><span class="token punctuation">)</span>                item<span class="token punctuation">[</span><span class="token string">'total_list'</span><span class="token punctuation">]</span><span class="token operator">=</span>total_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> total_list <span class="token keyword">else</span>  <span class="token boolean">None</span>                price_list<span class="token operator">=</span>h<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//div[@class="unitPrice"]/span/text()'</span><span class="token punctuation">)</span>                item<span class="token punctuation">[</span><span class="token string">'price_list'</span><span class="token punctuation">]</span><span class="token operator">=</span>price_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> price_list <span class="token keyword">else</span> <span class="token boolean">None</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>     <span class="token comment"># 入口函数</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                url<span class="token operator">=</span>self<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>parse_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">#每次抓取一页要初始化一次self.blog</span>                self<span class="token punctuation">.</span>blog<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'发生错误'</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    spider<span class="token operator">=</span>LinajiaSpider<span class="token punctuation">(</span><span class="token punctuation">)</span>    spider<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="27-浏览器实现抓包"><a href="#27-浏览器实现抓包" class="headerlink" title="27 浏览器实现抓包"></a>27 浏览器实现抓包</h2><blockquote><p>控制台抓包指的是利用浏览器开的发者调试工具抓取客户端与后端服务器交互的数据，它能够将网络传输中发送与接收的数据进行截获、重发和编辑。</p></blockquote><p>控制台抓包非常适合于 POST 请求类型。我们知道，POST 请求使用 Form 表单向服务器提交数据，通过抓包可以获取 POST 请求体的数据以及相应参数，从而对响应内容进行分析。下面以有道翻译（<a href="http://fanyi.youdao.com/%EF%BC%89%E4%B8%BA%E4%BE%8B%EF%BC%8C%E8%AE%B2%E8%A7%A3%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8A%93%E5%8C%85%E3%80%82">http://fanyi.youdao.com/）为例，讲解如何进行控制台抓包。</a></p><p>抓包是分析请求、响应数据，以及监视 HTTP(S) 通信的常用方法，它能够帮助我们明确要请求的 URL、请求参数/参数值、Cookies，以及其他响应信息，这对于构建 POST 请求方法十分重要。</p><p>除了使用浏览器自带的调试工具外，您也可以使用 Fiddler 抓包工具，这款软件不仅适用于 Web 抓包，同样也适用于手机移动端抓包， 如果感兴趣的话可以点击了解（<a href="https://www.telerik.com/fiddler%EF%BC%89%E3%80%82">https://www.telerik.com/fiddler）。</a></p><h2 id="28-【实例】破解有道翻译"><a href="#28-【实例】破解有道翻译" class="headerlink" title="28 【实例】破解有道翻译"></a>28 【实例】破解有道翻译</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding:utf8</span><span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5<span class="token keyword">import</span> requests<span class="token keyword">class</span> <span class="token class-name">YoudaoSpider</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># url一定要写抓包时抓到的POST请求的提交地址，但是还需要去掉 url中的“_o”，</span>        <span class="token comment"># “_o”这是一种url反爬策略，做了页面跳转，若直接访问会返回&#123;"errorCode":50&#125;</span>        self<span class="token punctuation">.</span>url<span class="token operator">=</span><span class="token string">'http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule'</span>        self<span class="token punctuation">.</span>headers<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token comment"># 获取lts时间戳,salt加密盐,sign加密签名</span>    <span class="token keyword">def</span> <span class="token function">get_lts_salt_sign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>        lts<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        salt<span class="token operator">=</span>lts<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        string <span class="token operator">=</span> <span class="token string">"fanyideskweb"</span> <span class="token operator">+</span> word <span class="token operator">+</span> salt <span class="token operator">+</span> <span class="token string">"Tbh5E8=q6U3EXe+&amp;L[4c@"</span>        s<span class="token operator">=</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>update<span class="token punctuation">(</span>string<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sign<span class="token operator">=</span>s<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>lts<span class="token punctuation">,</span>salt<span class="token punctuation">,</span>sign<span class="token punctuation">)</span>        <span class="token keyword">return</span> lts<span class="token punctuation">,</span>salt<span class="token punctuation">,</span>sign    <span class="token keyword">def</span> <span class="token function">attack_yd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>        lts<span class="token punctuation">,</span>salt<span class="token punctuation">,</span>sign<span class="token operator">=</span>self<span class="token punctuation">.</span>get_lts_salt_sign<span class="token punctuation">(</span>word<span class="token punctuation">)</span>        <span class="token comment">#构建form表单数据</span>        data<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string">"i"</span><span class="token punctuation">:</span> word<span class="token punctuation">,</span>            <span class="token string">"from"</span><span class="token punctuation">:</span> <span class="token string">"AUTO"</span><span class="token punctuation">,</span>            <span class="token string">"to"</span><span class="token punctuation">:</span> <span class="token string">"AUTO"</span><span class="token punctuation">,</span>            <span class="token string">"smartresult"</span><span class="token punctuation">:</span> <span class="token string">"dict"</span><span class="token punctuation">,</span>            <span class="token string">"client"</span><span class="token punctuation">:</span> <span class="token string">"fanyideskweb"</span><span class="token punctuation">,</span>            <span class="token string">"salt"</span><span class="token punctuation">:</span> salt<span class="token punctuation">,</span>            <span class="token string">"sign"</span><span class="token punctuation">:</span> sign<span class="token punctuation">,</span>            <span class="token string">"lts"</span><span class="token punctuation">:</span> lts<span class="token punctuation">,</span>            <span class="token string">"bv"</span><span class="token punctuation">:</span> <span class="token string">"cda1e53e0c0eb8dd4002cefc117fa588"</span><span class="token punctuation">,</span>            <span class="token string">"doctype"</span><span class="token punctuation">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>            <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"2.1"</span><span class="token punctuation">,</span>            <span class="token string">"keyfrom"</span><span class="token punctuation">:</span> <span class="token string">"fanyi.web"</span><span class="token punctuation">,</span>            <span class="token string">"action"</span><span class="token punctuation">:</span> <span class="token string">"FY_BY_REALTlME"</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">#使用 reqeusts.post()方法提交请求</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            url<span class="token operator">=</span>self<span class="token punctuation">.</span>url<span class="token punctuation">,</span>            data<span class="token operator">=</span>data<span class="token punctuation">,</span>            headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token comment"># res.json() 将json格式的字符串转为python数据类型</span>        <span class="token comment"># 客户端与服务器数据交互以json字符串传递，因此需要将它转换为python数据类型</span>        html<span class="token operator">=</span>res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span>        <span class="token comment"># 查看响应结果response  html:&#123;"translateResult":[[&#123;"tgt":"hello","src":"你好"&#125;]],"errorCode":0,"type":"zh-CHS2en"&#125;</span>        result<span class="token operator">=</span>html<span class="token punctuation">[</span><span class="token string">"translateResult"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tgt"</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'翻译结果:'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            word<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入要翻译的单词：'</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>attack_yd<span class="token punctuation">(</span>word<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    spider<span class="token operator">=</span>YoudaoSpider<span class="token punctuation">(</span><span class="token punctuation">)</span>    spider<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="29-【实例】抓取动态加载数据"><a href="#29-【实例】抓取动态加载数据" class="headerlink" title="29 【实例】抓取动态加载数据"></a>29 【实例】抓取动态加载数据</h2><p>本节讲解如何抓取豆瓣电影“分类排行榜”中的电影数据（<a href="https://movie.douban.com/chart">https://movie.douban.com/chart</a>)），比如输入“犯罪”则会输出所有犯罪影片的电影名称、评分</p><blockquote><p>首先要明确豆瓣电影网站的类型，即是动态还是静态。检查方法：右键查看网页源码 —&gt; 搜索“辛德勒的名单”关键字，最终发现源码页中没有出现想要抓取的数据，只有一大堆的 JS 代码，由此确定该网站为动态网站。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding:utf8</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">import</span> re<span class="token keyword">import</span> json<span class="token keyword">from</span> ua_info <span class="token keyword">import</span> ua_list<span class="token keyword">class</span> <span class="token class-name">DoubanSpider</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/j/chart/top_list?'</span>        self<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 获取随机headers</span>    <span class="token keyword">def</span> <span class="token function">get_headers</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>ua_list<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> headers    <span class="token comment"># 获取页面</span>    <span class="token keyword">def</span> <span class="token function">get_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 将json转换为 python 数据类型，并返回</span>      html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>self<span class="token punctuation">.</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>params<span class="token punctuation">,</span>headers<span class="token operator">=</span>self<span class="token punctuation">.</span>get_headers<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text      html<span class="token operator">=</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>html<span class="token punctuation">)</span>      self<span class="token punctuation">.</span>parse_page<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    <span class="token comment"># 解析并保存数据</span>    <span class="token keyword">def</span> <span class="token function">parse_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>       item <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token comment"># html列表类型： [&#123;电影1&#125;,&#123;电影2&#125;,&#123;电影3&#125;...]</span>       <span class="token keyword">for</span> one <span class="token keyword">in</span> html<span class="token punctuation">:</span>            <span class="token comment"># 名称 + 评分</span>           item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>           item<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>one<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>           self<span class="token punctuation">.</span>i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 获取电影总数</span>    <span class="token keyword">def</span> <span class="token function">total_number</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>type_number<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># F12抓包抓到的地址，type表示电影类型</span>        url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/j/chart/top_list_count?type=&#123;&#125;&amp;interval_id=100%3A90'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>type_number<span class="token punctuation">)</span>        headers <span class="token operator">=</span> self<span class="token punctuation">.</span>get_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>        html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        total <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>html<span class="token punctuation">[</span><span class="token string">'total'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> total    <span class="token comment"># 获取所有电影的类型和对应type值</span>    <span class="token keyword">def</span> <span class="token function">get_all_type_films</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取类型与类型码</span>        url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/chart'</span>        headers <span class="token operator">=</span> self<span class="token punctuation">.</span>get_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>        html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text        re_bds <span class="token operator">=</span> <span class="token string">r'&lt;a href=.*?type_name=(.*?)&amp;type=(.*?)&amp;.*?&lt;/a>'</span>        pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>re_bds<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        r_list <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span>        <span class="token comment"># 存放所有类型和对应类型码大字典</span>        type_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token comment">#定义一个选择电影类型的菜单</span>        menu <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> r <span class="token keyword">in</span> r_list<span class="token punctuation">:</span>            type_dict<span class="token punctuation">[</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 获取input的菜单，显示所有电影类型</span>            menu <span class="token operator">+=</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'|'</span>        <span class="token keyword">return</span> type_dict<span class="token punctuation">,</span>menu    <span class="token comment"># 主程序入口函数</span>    <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取type的值</span>        type_dict<span class="token punctuation">,</span>menu <span class="token operator">=</span> self<span class="token punctuation">.</span>get_all_type_films<span class="token punctuation">(</span><span class="token punctuation">)</span>        menu <span class="token operator">=</span> menu <span class="token operator">+</span> <span class="token string">'\n你想了解什么类型电影:'</span>        name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span>        type_number <span class="token operator">=</span> type_dict<span class="token punctuation">[</span>name<span class="token punctuation">]</span>        <span class="token comment"># 获取电影总数</span>        total <span class="token operator">=</span> self<span class="token punctuation">.</span>total_number<span class="token punctuation">(</span>type_number<span class="token punctuation">)</span>        <span class="token keyword">for</span> start <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span>total<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment">#构建查询参数</span>            params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">'type'</span> <span class="token punctuation">:</span> type_number<span class="token punctuation">,</span>                <span class="token string">'interval_id'</span> <span class="token punctuation">:</span> <span class="token string">'100:90'</span><span class="token punctuation">,</span>                <span class="token string">'action'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                <span class="token string">'start'</span> <span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">'limit'</span> <span class="token punctuation">:</span> <span class="token string">'20'</span>            <span class="token punctuation">&#125;</span>            <span class="token comment"># 调用函数,传递params参数</span>            self<span class="token punctuation">.</span>get_page<span class="token punctuation">(</span>params<span class="token punctuation">)</span>            <span class="token comment"># 随机休眠1-3秒</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'电影总数量:%d部'</span><span class="token operator">%</span>self<span class="token punctuation">.</span>i <span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    spider <span class="token operator">=</span> DoubanSpider<span class="token punctuation">(</span><span class="token punctuation">)</span>    spider<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>确定网站是否为动态网站，通过查看源码搜索相应的关键字即可确定。</li><li>动态网站主要通过异步方式加载数据。触发数据加载的 JS 事件主要有滚动鼠标滑轮、鼠标点击、拉动滚动条等有关动作， 也有一些网站通过局部更新的方式加载数据，比如有道翻译案例。</li></ol><h2 id="30-Python-json模块"><a href="#30-Python-json模块" class="headerlink" title="30 Python json模块"></a>30 Python json模块</h2><p>Python 语言内置了专门处理 JOSN 数据的模块 —— jons 模块，通过该模块就可以完成 JSON 与 Python 两种数据格式的相互转换。</p><ol><li> <code>json.dump(object,f,inden=0，ensure_ascii=False)</code></li></ol><ul><li>object：Python 数据对象，比如字典，列表等</li><li>f：文件流对象，即文件句柄。</li><li>indent：格式化存储数据，使 JSON 字符串更易阅读。</li><li>ensure_ascii：是否使用 ascii 编码，当数据中出现中文的时候，需要将其设置为 False。</li></ul><p>   将 Python 对象（字典、列表等）转换为 json 字符串，并将转换后的数据写入到 json 格式的文件中 ，因此该方法必须操作文件流对象。比如当使用爬虫程序完成数据抓取后，有时需要将数据保存为 json 格式，此时就用到了 json.dump() 方法</p>   <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token comment"># json对象</span>ditc_info<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span> <span class="token punctuation">:</span> <span class="token string">"c语言中文网"</span><span class="token punctuation">,</span><span class="token string">"PV"</span> <span class="token punctuation">:</span> <span class="token string">"50万"</span><span class="token punctuation">,</span><span class="token string">"UV"</span> <span class="token punctuation">:</span> <span class="token string">"20万"</span><span class="token punctuation">,</span><span class="token string">"create_time"</span> <span class="token punctuation">:</span> <span class="token string">"2010年"</span><span class="token punctuation">&#125;</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"web.josn"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>ditc_info<span class="token punctuation">,</span>f<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment"># json数组</span>item_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>item <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'website'</span><span class="token punctuation">:</span> <span class="token string">'C语言中文网'</span><span class="token punctuation">,</span> <span class="token string">'url'</span><span class="token punctuation">:</span> <span class="token string">"c.biancheng.net"</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> item<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    item_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'info_web.json'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>item_list<span class="token punctuation">,</span> f<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li> json.load()</li></ol><p>   用于操作文件流对象，不过它与 dump() 恰好相反，它表示从 json 文件中读取 JSON 字符串，并将读取内容转换为 Python 对象。</p>   <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jsonsite <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'c语言中文网'</span><span class="token punctuation">,</span><span class="token string">"url"</span><span class="token punctuation">:</span><span class="token string">"c.biancheng.net"</span><span class="token punctuation">&#125;</span>filename <span class="token operator">=</span> <span class="token string">'website.json'</span><span class="token keyword">with</span> <span class="token builtin">open</span> <span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>site<span class="token punctuation">,</span>f<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span> <span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li> json.dumps()</li></ol><p>   将 Python 对象转换成 JSON 字符串。</p>   <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token comment">#python字典</span>item <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'website'</span><span class="token punctuation">:</span> <span class="token string">'C语言中文网'</span><span class="token punctuation">,</span> <span class="token string">'rank'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment"># json.dumps之后</span>item <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>item<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'转换之后的数据类型为：'</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>json.dumps()</td><td>将 Python 对象转换成 JSON 字符串。</td></tr><tr><td>json.loads()</td><td>将 JSON 字符串转换成 Python 对象。</td></tr><tr><td>json.dump()</td><td>将 Python 中的对象转化成 JSON 字符串储存到文件中。</td></tr><tr><td>json.load()</td><td>将文件中的 JSON 字符串转化成 Python 对象提取出来。</td></tr></tbody></table><p>综上所述 json.load() 与 json.dump() 操作的是文件流对象，实现了 json 文件的读写操作，而 json.loads() 与 json.dumps() 操作的是 Python 对象或者 JOSN 字符串。</p><h2 id="31-【实例】实现Cookie模拟登录"><a href="#31-【实例】实现Cookie模拟登录" class="headerlink" title="31 【实例】实现Cookie模拟登录"></a>31 【实例】实现Cookie模拟登录</h2><p>Cookie 是一个记录了用户登录状态以及用户属性的加密字符串。当你第一次登陆网站时，服务端会在返回的 Response Headers 中添加 Cookie， 浏览器接收到响应信息后，会将 Cookie 保存至浏览器本地存储中，当你再次向该网站发送请求时，请求头中就会携带 Cookie，这样服务器通过读取 Cookie 就能识别登陆用户了。</p><p>下面介绍如何实现 Cookie 模拟登录，本节以模拟登录人人网（<a href="http://life.renren.com/%EF%BC%89%E4%B8%BA%E4%BE%8B%E8%BF%9B%E8%A1%8C%E8%AE%B2%E8%A7%A3%E3%80%82">http://life.renren.com/）为例进行讲解。</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">class</span> <span class="token class-name">RenrenLogin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 个人主页的url地址</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">'http://www.renren.com/972496145/profile'</span>        self<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token comment"># 将拷贝的cookie值放在此处</span>            <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'anonymid=kmol2vxqgd4n0e; depovince=HEB; _r01_=1; ick_login=c577d6c0-0ec3-465a-89d0-9e2b8f23e107; taihe_bi_sdk_uid=0738130d7f4532165841f09abc596215; taihe_bi_sdk_session=6277ea795624ba1eddb2603d7fe45c85; _de=1D29BC9596B9643C92425970B59A3DAE; p=3e6989099ff75de92407b791266376095; first_login_flag=1; ln_uact=18519784236; ln_hurl=http://hdn.xnimg.cn/photos/hdn321/20191017/0945/h_main_El46_9a13000ecbe41986.jpg; t=7f25f8a4d3515786d146143f63d108b25; societyguester=7f25f8a4d3515786d146143f63d108b25; id=972496145; xnsid=9770206d; wpsid=15900539012757; ver=7.0; loginfrom=null; wp_fold=0; jebecookies=59f8dfaf-8416-4dbc-a539-016a7ae1b6c5|||||'</span><span class="token punctuation">,</span>            <span class="token comment"># 注意，useragent不能改变，否则cookie失效</span>            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>self<span class="token punctuation">.</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text        self<span class="token punctuation">.</span>parse_html<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">:</span>        parse_html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html<span class="token punctuation">)</span>        r_school <span class="token operator">=</span> parse_html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="operate_area"]/div[1]/ul/li[1]/span/text()'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>r_school<span class="token punctuation">)</span>        r_birthday <span class="token operator">=</span> parse_html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[@class="birthday"]/span/text()'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>r_birthday<span class="token punctuation">)</span>        home_info <span class="token operator">=</span> parse_html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="operate_area"]/div[1]/ul/li/text()'</span><span class="token punctuation">)</span>        item <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        item<span class="token punctuation">[</span><span class="token string">'hometown'</span><span class="token punctuation">]</span> <span class="token operator">=</span> home_info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span> <span class="token operator">=</span> home_info<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    spider <span class="token operator">=</span> RenrenLogin<span class="token punctuation">(</span><span class="token punctuation">)</span>    spider<span class="token punctuation">.</span>get_html<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="32-Python多线程爬虫"><a href="#32-Python多线程爬虫" class="headerlink" title="32 Python多线程爬虫"></a>32 Python多线程爬虫</h2><p>网络爬虫程序是一种 IO 密集型程序，程序中涉及了很多网络 IO 以及本地磁盘 IO 操作，这些都会消耗大量的时间，从而降低程序的执行效率，而 Python 提供的多线程能够在一定程度上提升 IO 密集型程序的执行效率。</p><p>Python 提供了两个支持多线程的模块，分别是 _thread 和 threading。其中 _thread 模块偏底层，它相比于 threading 模块功能有限，因此推荐大家使用 threading 模块。 threading 中不仅包含了 _thread 模块中的所有方法，还提供了一些其他方法，</p><ul><li>threading.currentThread() 返回当前的线程变量。</li><li>threading.enumerate() 返回一个所有正在运行的线程的列表。</li><li>threading.activeCount() 返回正在运行的线程数量。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token comment">#线程创建、启动、回收</span>t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>函数名<span class="token punctuation">)</span> <span class="token comment"># 创建线程对象</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建并启动线程</span>t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 阻塞等待回收线程</span><span class="token comment"># 创建多线程的具体流程:</span>t_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>函数名<span class="token punctuation">)</span>    t_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> t <span class="token keyword">in</span> t_list<span class="token punctuation">:</span>    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用多线程将抓取数据写入磁盘文件，此时，就要对执行写入操作的线程加锁，这样才能够避免写入的数据被覆盖。当线程执行完写操作后会主动释放锁，继续让其他线程去获取锁，周而复始，直到所有写操作执行完毕。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Locklock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取锁</span>lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>wirter<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span><span class="token string">"线程锁问题解决"</span><span class="token punctuation">)</span><span class="token comment"># 释放锁</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要构建一个多线程共享数据的模型，让所有线程都到该模型中获取数据。queue（队列，先进先出） 模块提供了创建共享数据的队列模型。比如，把所有待爬取的 URL 地址放入队列中，每个线程都到这个队列中去提取 URL。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入模块</span><span class="token keyword">from</span> queue <span class="token keyword">import</span> Queueq <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#创界队列对象</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>url<span class="token punctuation">)</span> 向队列中添加爬取一个url链接q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获取一个url，当队列为空时，阻塞</span>q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 判断队列是否为空，True/False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面通过多线程方法抓取小米应用商店（<a href="https://app.mi.com/%EF%BC%89%E4%B8%AD%E5%BA%94%E7%94%A8%E5%88%86%E7%B1%BB%E4%B8%80%E6%A0%8F%EF%BC%8C%E6%89%80%E6%9C%89%E7%B1%BB%E5%88%AB%E4%B8%8B%E7%9A%84">https://app.mi.com/）中应用分类一栏，所有类别下的</a> APP 的名称、所属类别以及下载详情页 URL 。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:utf8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue<span class="token keyword">import</span> time<span class="token keyword">from</span> fake_useragent <span class="token keyword">import</span> UserAgent<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> csv<span class="token keyword">from</span> threading <span class="token keyword">import</span> Lock<span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">XiaomiSpider</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">'http://app.mi.com/categotyAllListApi?page=&#123;&#125;&amp;categoryId=&#123;&#125;&amp;pageSize=30'</span>        <span class="token comment"># 存放所有URL地址的队列</span>        self<span class="token punctuation">.</span>q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># 存放所有类型id的空列表</span>        self<span class="token punctuation">.</span>id_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 打开文件</span>        self<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'XiaomiShangcheng.csv'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>self<span class="token punctuation">.</span>f<span class="token punctuation">)</span>        <span class="token comment"># 创建锁</span>        self<span class="token punctuation">.</span>lock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_cateid</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 请求</span>        url <span class="token operator">=</span> <span class="token string">'http://app.mi.com/'</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">&#125;</span>        html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token comment"># 解析</span>        parse_html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html<span class="token punctuation">)</span>        xpath_bds <span class="token operator">=</span> <span class="token string">'//ul[@class="category-list"]/li'</span>        li_list <span class="token operator">=</span> parse_html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>xpath_bds<span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            typ_name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            typ_id <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment"># 计算每个类型的页数</span>            pages <span class="token operator">=</span> self<span class="token punctuation">.</span>get_pages<span class="token punctuation">(</span>typ_id<span class="token punctuation">)</span>            <span class="token comment"># 往列表中添加二元组</span>            self<span class="token punctuation">.</span>id_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>typ_id<span class="token punctuation">,</span> pages<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 入队列</span>        self<span class="token punctuation">.</span>url_in<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 获取count的值并计算页数</span>    <span class="token keyword">def</span> <span class="token function">get_pages</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> typ_id<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 获取count的值，即app总数</span>        url <span class="token operator">=</span> self<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> typ_id<span class="token punctuation">)</span>        html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            url<span class="token operator">=</span>url<span class="token punctuation">,</span>            headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        count <span class="token operator">=</span> html<span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span>        pages <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">30</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> pages    <span class="token comment"># url入队函数，拼接url，并将url加入队列</span>    <span class="token keyword">def</span> <span class="token function">url_in</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>id_list<span class="token punctuation">:</span>            <span class="token comment"># id格式：('4',pages)</span>            <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                url <span class="token operator">=</span> self<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment"># 把URL地址入队列</span>                self<span class="token punctuation">.</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment"># 线程事件函数: get() -请求-解析-处理数据,三步骤</span>    <span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment"># 判断队列不为空则执行，否则终止</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                url <span class="token operator">=</span> self<span class="token punctuation">.</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>                headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">&#125;</span>                html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>                res_html <span class="token operator">=</span> html<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>                html <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>res_html<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>parse_html<span class="token punctuation">(</span>html<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>    <span class="token comment"># 解析函数</span>    <span class="token keyword">def</span> <span class="token function">parse_html</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 写入到csv文件</span>        app_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> app <span class="token keyword">in</span> html<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment"># app名称 + 分类 + 详情链接</span>            name <span class="token operator">=</span> app<span class="token punctuation">[</span><span class="token string">'displayName'</span><span class="token punctuation">]</span>            link <span class="token operator">=</span> <span class="token string">'http://app.mi.com/details?id='</span> <span class="token operator">+</span> app<span class="token punctuation">[</span><span class="token string">'packageName'</span><span class="token punctuation">]</span>            typ_name <span class="token operator">=</span> app<span class="token punctuation">[</span><span class="token string">'level1CategoryName'</span><span class="token punctuation">]</span>            <span class="token comment"># 把每一条数据放到app_list中,并通过writerows()实现多行写入</span>            app_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span> typ_name<span class="token punctuation">,</span> link<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> typ_name<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># 向CSV文件中写入数据</span>        self<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>writer<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>app_list<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 入口函数</span>    <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># URL入队列</span>        self<span class="token punctuation">.</span>get_cateid<span class="token punctuation">(</span><span class="token punctuation">)</span>        t_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 创建多线程</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>get_data<span class="token punctuation">)</span>            t_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>            <span class="token comment"># 启动线程</span>            t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> t_list<span class="token punctuation">:</span>            <span class="token comment"># 回收线程   </span>            t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数量:'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    spider <span class="token operator">=</span> XiaomiSpider<span class="token punctuation">(</span><span class="token punctuation">)</span>    spider<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行时间:%.1f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="33-Python-BS4解析库"><a href="#33-Python-BS4解析库" class="headerlink" title="33 Python BS4解析库"></a>33 Python BS4解析库</h2><p>Beautiful Soup 简称 BS4（其中 4 表示版本号）是一个 Python 第三方库，它可以从 HTML 或 XML 文档中快速地提取指定的数据。Beautiful Soup 语法简单，使用方便，并且容易理解，因此您可以快速地学习并掌握它。</p><p>由于 Bautiful Soup 是第三方库，因此需要单独下载，BS4 解析页面时需要依赖==文档解析器==，所以还需要安装 lxml 作为解析库</p><p><code>pip install bs4</code>，<code>pip install lxml</code></p><p>Python 也自带了一个文档解析库 html.parser， 但是其解析速度要稍慢于 lxml。除了上述解析器外，还可以使用 html5lib 解析器，</p><p><code>pip install html5lib</code></p><hr><p>Beautiful Soup 将 HTML 文档转换成一个树形结构，该结构有利于快速地遍历和搜索 HTML 文档。</p><p><code>&lt;html&gt;&lt;head&gt;&lt;title&gt;c语言中文网&lt;/title&gt;&lt;/head&gt;&lt;h1&gt;c.biancheng.net&lt;/h1&gt;&lt;p&gt;&lt;b&gt;一个学习编程的网站&lt;/b&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></p><p><img src="http://c.biancheng.net/uploads/allimg/210819/9-210Q9153041P7.gif" alt="HTML文档树结构图"></p><p>文档树中的每个节点都是 Python 对象，这些对象大致分为四类：Tag , NavigableString , BeautifulSoup , Comment 。其中使用最多的是 Tag 和 NavigableString。</p><ul><li>Tag：标签类，HTML 文档中所有的标签都可以看做 Tag 对象。</li><li>NavigableString：字符串类，指的是标签中的文本内容，使用 text、string、strings 来获取文本内容。</li><li>BeautifulSoup：表示一个 HTML 文档的全部内容，您可以把它当作一个人特殊的 Tag 对象。</li><li>Comment：表示 HTML 文档中的注释内容以及特殊字符串，它是一个特殊的 NavigableString。</li></ul><p>标签（Tag）是组成 HTML 文档的基本元素。在 BS4 中，通过标签名和标签属性可以提取出想要的内容。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupsoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token string">'&lt;p class="Web site url">&lt;b>c.biancheng.net&lt;/b>&lt;/p>'</span><span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span><span class="token comment">#获取整个p标签的html代码</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token comment">#获取b标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token comment">#获取p标签内容，使用NavigableString类中的string、text、get_text()</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment">#返回一个字典，里面是多有属性和值</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span><span class="token comment">#查看返回的数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#根据属性，获取标签的属性值，返回值为列表</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#给class属性赋值,此时属性值由列表转换为字符串</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Web'</span><span class="token punctuation">,</span><span class="token string">'Site'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tag 对象提供了许多遍历 tag 节点的属性，比如 contents、children 用来遍历子节点；parent 与 parents 用来遍历父节点；而 next_sibling 与 previous_sibling 则用来遍历兄弟节点 。</p><p>Tag 的 children 属性会生成一个可迭代对象，可以用来遍历子节点，示例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> child <span class="token keyword">in</span> body_tag<span class="token punctuation">.</span>children<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>find_all() 方法用来搜索当前 tag 的所有子节点，并判断这些节点是否符合过滤条件，最后以列表形式将符合条件的内容返回，</p><p><code>find_all( name , attrs , recursive , text , limit )</code></p><p>参数说明：</p><ul><li>name：查找所有名字为 name 的 tag 标签，字符串对象会被自动忽略。</li><li>attrs：按照属性名和属性值搜索 tag 标签，注意由于 class 是 Python 的关键字吗，所以要使用 “class_”。</li><li>recursive：find_all() 会搜索 tag 的所有子孙节点，设置 recursive=False 可以只搜索 tag 的直接子节点。</li><li>text：用来搜文档中的字符串内容，该参数可以接受字符串 、正则表达式 、列表、True。</li><li>limit：由于 find_all() 会返回所有的搜索结果，这样会影响执行效率，通过 limit 参数可以限制返回结果的数量。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> rehtml_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>"c语言中文网"&lt;/title>&lt;/head>&lt;body>&lt;p class="title">&lt;b>c.biancheng.net&lt;/b>&lt;/p>&lt;p class="website">一个学习编程的网站&lt;/p>&lt;a href="http://c.biancheng.net/python/" id="link1">python教程&lt;/a>&lt;a href="http://c.biancheng.net/c/" id="link2">c语言教程&lt;/a>&lt;a href="http://c.biancheng.net/django/" id="link3">django教程&lt;/a>&lt;p class="vip">加入我们阅读所有教程&lt;/p>&lt;a href="http://vip.biancheng.net/?from=index" id="link4">成为vip&lt;/a>"""</span><span class="token comment">#创建soup解析对象</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span><span class="token comment">#查找所有a标签并返回</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#查找前两条a标签并返回</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>limit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">"website"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"link4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 正则表达式、列表，以及 True 也可以当做过滤条件，使用示例如下：</span><span class="token comment">#列表行书查找tag标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#正则表达式匹配id属性值</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token builtin">id</span><span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'.\d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#True可以匹配任何值，下面代码会查找所有tag，并返回相应的tag名称</span><span class="token keyword">for</span> tag <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment">#输出所有以b开始的tag标签</span><span class="token keyword">for</span> tag <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"^b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment">#简化前</span>soup<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment">#简化后</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>find() 方法与 find_all() 类似，不同之处在于 find_all() 会将文档中所有符合条件的结果返回，而 find() 仅返回一个符合条件的结果，所以 find() 方法没有<code>limit</code>参数。</p><p>使用 find() 时，如果没有找到查询标签会返回 None，而 find_all() 方法返回空列表。</p><p>BS4 也为 find()提供了简化写法，如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#简化写法</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token comment">#上面代码等价于</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CSS选择器</strong></p><p>BS4 支持大部分的 CSS 选择器，比如常见的标签选择器、类选择器、id 选择器，以及层级选择器。Beautiful Soup 提供了一个 select() 方法，通过向该方法中添加选择器，就可以在 HTML 文档中搜索到与之对应的内容。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding:utf8</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>"c语言中文网"&lt;/title>&lt;/head>&lt;body>&lt;p class="title">&lt;b>c.biancheng.net&lt;/b>&lt;/p>&lt;p class="website">一个学习编程的网站&lt;/p>&lt;a href="http://c.biancheng.net/python/" id="link1">python教程&lt;/a>&lt;a href="http://c.biancheng.net/c/" id="link2">c语言教程&lt;/a>&lt;a href="http://c.biancheng.net/django/" id="link3">django教程&lt;/a>&lt;p class="vip">加入我们阅读所有教程&lt;/p>&lt;a href="http://vip.biancheng.net/?from=index" id="link4">成为vip&lt;/a>&lt;p class="introduce">介绍:&lt;a href="http://c.biancheng.net/view/8066.html" id="link5">关于网站&lt;/a>&lt;a href="http://c.biancheng.net/view/8092.html" id="link6">关于站长&lt;/a>&lt;/p>"""</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupsoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span><span class="token comment">#根据元素标签查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#根据属性选择器查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'a[href]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#根据类查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.vip'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#后代节点查找</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'html head title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#查找兄弟节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'p + a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#根据id选择p标签的兄弟节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'p ~ #link3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#nth-of-type(n)选择器，用于匹配同类型中的第n个同级兄弟元素</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'p ~ a:nth-of-type(1)'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#查找子节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'p > a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.introduce > #link5'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="34-【实例】Pyhon爬虫下载小说"><a href="#34-【实例】Pyhon爬虫下载小说" class="headerlink" title="34 【实例】Pyhon爬虫下载小说"></a>34 【实例】Pyhon爬虫下载小说</h2><p>本节通过具体的爬虫程序，演示 BS4 解析库的实际应用。爬虫程序目标：下载诗词名句网（<a href="https://www.shicimingju.com/book/%EF%BC%89%E3%80%8A[%E4%B8%A4%E6%99%8B%E6%BC%94%E4%B9%89](https://www.shicimingju.com/book/liangjinyanyi.html)%E3%80%8B%E5%B0%8F%E8%AF%B4%E3%80%82">https://www.shicimingju.com/book/）《[两晋演义](https://www.shicimingju.com/book/liangjinyanyi.html)》小说。</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> random<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">request_html</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span><span class="token punctuation">&#125;</span>    request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">return</span> request<span class="token keyword">def</span> <span class="token function">parse_html</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 生成soup对象</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment"># 查找所有的章节链接和标题内容</span>    list_name <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.book-mulu > ul > li > a'</span><span class="token punctuation">)</span>    <span class="token comment"># 遍历每一个列表中的tag对象，获取链接个目录</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> list_name<span class="token punctuation">:</span>        <span class="token comment"># 获取链接</span>        <span class="token comment">#item: &lt;a href="/book/liangjinyanyi/1.html">自序&lt;/a></span>        <span class="token comment">#拼接目录链接,此处item类型为&lt;class 'bs4.element.Tag'>，使用下面方法可以值获取href属性值</span>        href <span class="token operator">=</span> <span class="token string">'http://www.shicimingju.com'</span> <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>        <span class="token comment"># 获取标题</span>        title <span class="token operator">=</span> item<span class="token punctuation">.</span>text        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在下载:-**--%s--**-......'</span> <span class="token operator">%</span> title<span class="token punctuation">)</span>        <span class="token comment"># 获取章节内容函数</span>        text <span class="token operator">=</span> get_text<span class="token punctuation">(</span>href<span class="token punctuation">)</span>        <span class="token comment"># 写入文件</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> text<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束下载:-**--%s--**-'</span> <span class="token operator">%</span> title<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 提取章节内容</span><span class="token keyword">def</span> <span class="token function">get_text</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#创建请求对象</span>    request <span class="token operator">=</span> request_html<span class="token punctuation">(</span>href<span class="token punctuation">)</span>    content <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment"># 查找包含内容的tag--div</span>    artist <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'chapter_content'</span><span class="token punctuation">)</span>    <span class="token comment">#获取tag标签中的文本内容</span>    <span class="token keyword">return</span> artist<span class="token punctuation">.</span>text<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 打开文件</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'两晋演义.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">'http://www.shicimingju.com/book/liangjinyanyi.html'</span>    <span class="token comment"># 构建请求对象</span>    request <span class="token operator">=</span> request_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment"># 发送请求，得到响应，转换为HTML对象</span>    html <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token comment"># 解析内容</span>    parse_html<span class="token punctuation">(</span>html<span class="token punctuation">,</span>f<span class="token punctuation">)</span>    <span class="token comment">#关闭文件</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="35-Python-Selenium的下载和安装"><a href="#35-Python-Selenium的下载和安装" class="headerlink" title="35 Python Selenium的下载和安装"></a>35 Python Selenium的下载和安装</h2><p>Selenium 是一个用于测试 Web 应用程序的自动化测试工具，它直接运行在浏览器中，实现了对浏览器的自动化操作，它支持所有主流的浏览器，包括 IE，Firefox，Safari，Chrome 等。它实现了诸多自动化功能，比如软件自动化测试，检测软件与浏览器兼容性，自动录制、生成不同语言的测试脚本，以及自动化爬虫等。</p><p>Selenium下载安装，Windows：<code>python -m pip install selenium</code></p><p>安装浏览器驱动，谷歌浏览器 chromedrive：<a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></p><p>各种浏览器的驱动安装规程基本一致。不过需要注意：安装 Chrome、Firefox 驱动时，需要下载与浏览器版本相匹配的驱动程序，否则不能驱动浏览器。</p><p>配置好环境变量，在cmd控制台输入 chromedriver 启动。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入seleinum webdriver接口</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> time<span class="token comment"># 创建Chrome浏览器对象</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#访问百度网站</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com/'</span><span class="token punctuation">)</span><span class="token comment">#阻塞3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 自动退出浏览器</span>browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>毫不夸张的说，Selenium 自动化爬虫是一种万能的爬虫程序，它可以仿照人的样子去打开网站，并拿到你想要的数据，因此你无须在意反爬措施。不过它最致命的缺点就是效率很低，因为每次点击、输入等操作都需要花费一定的时间，因此它仅适用于小批量的数据抓取。</p><h2 id="36-Python-Selenium基本用法"><a href="#36-Python-Selenium基本用法" class="headerlink" title="36 Python Selenium基本用法"></a>36 Python Selenium基本用法</h2><p>Selenium 作为一款 Web 自动化测试框架，提供了诸多操作浏览器的方法，</p><p>Selenium 为<strong>浏览器对象</strong>提供了 8 种<strong>定位单个节点</strong>的方法，如下所示：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>find_element_by_id()</td><td>通过 id 属性值定位</td></tr><tr><td>find_element_by_name()</td><td>通过 name 属性值定位</td></tr><tr><td>find_element_by_class_name()</td><td>通过 class 属性值定位</td></tr><tr><td>find_element_by_tag_name()</td><td>通过 tag 标签名定位</td></tr><tr><td>find_element_by_link_text()</td><td>通过<a>标签内文本定位，即精准定位。</td></tr><tr><td>find_element_by_partial_link_text()</td><td>通过<a>标签内部分文本定位，即模糊定位。</td></tr><tr><td>find_element_by_xpath()</td><td>通过 xpath 表达式定位</td></tr><tr><td>find_element_by_css_selector()</td><td>通过 css 选择器定位</td></tr></tbody></table><p>定位一组元素的方法与定位单个元素类似，唯一的区别就是 element 后面多了一个 s（表示复数），因此上述方法的返回值是一个列表</p><p><strong>控制浏览器</strong></p><p>Selenium 可以操控浏览器的窗口大小、刷新页面，以及控制浏览器的前进、后退等</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问C语言中文网首页</span>first_url<span class="token operator">=</span> <span class="token string">'http://c.biancheng.net'</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>first_url<span class="token punctuation">)</span><span class="token comment"># 访问c语言教程</span>second_url<span class="token operator">=</span><span class="token string">'http://c.biancheng.net/c/'</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>second_url<span class="token punctuation">)</span><span class="token comment">#参数数字为像素点</span>driver<span class="token punctuation">.</span>set_window_size<span class="token punctuation">(</span><span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token comment">#设置窗口位置</span>driver<span class="token punctuation">.</span>set_window_position<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token comment">#同时设置窗口的大小和坐标</span>driver<span class="token punctuation">.</span>set_window_rect<span class="token punctuation">(</span><span class="token number">450</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token comment"># 返回（后退）到c语言中文网首页</span>driver<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 前进到C语言教程页</span>driver<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 刷新当前页面相当于F5</span>driver<span class="token punctuation">.</span>refresh<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 退出/关闭浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>WebDriver常用方法</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 请求url</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment"># 模拟键盘输入文本</span>send_keys <span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token comment"># 清除已经输入的文本</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment"># 单击已经定位的元素</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment"># 用于提交表单，比如百度搜索框内输入关键字之后的“回车” 操作</span>submit<span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">#返回属性的属性值，返回元素的属性值，可以是id、name、type 或其他任意属性</span>get_attribute<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment"># 返回布尔值，检查元素是否用户可见，比如 display属性为hidden或者none</span>is_displayed<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> timedriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token comment"># 获取HTML结构源码</span>driver<span class="token punctuation">.</span>page_source<span class="token comment">#在源码中查找指定的字符串</span>driver<span class="token punctuation">.</span>page_source<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'字符串'</span><span class="token punctuation">)</span><span class="token comment"># 返回百度页面底部备案信息</span>text <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"cp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment"># 获取输入框的尺寸</span>size <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token keyword">print</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token comment">#模拟键盘，输出文本</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"C语言中文网"</span><span class="token punctuation">)</span><span class="token comment">#单击“百度”一下查找</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"su"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#退出浏览器</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Selenium事件处理</strong>（鼠标、键盘等）</p><p>Selenium WebDriver 将关于鼠标的操作方法都封装在 ActionChains 类中，使用时需要引入 ActionChains 类，如下所示：</p><p><code>from selenium.webdriver.common.action_chains import ActionChains</code></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>ActionChains(driver)</td><td>构造 ActionChains 鼠标对象。</td></tr><tr><td>click()</td><td>单击</td></tr><tr><td>click_and_hold(on_element=None)</td><td>单击鼠标左键，不松开</td></tr><tr><td>context_click()</td><td>右击</td></tr><tr><td>double_click()</td><td>双击</td></tr><tr><td>drag_and_drop()</td><td>拖动</td></tr><tr><td>move_to_element(above)</td><td>执行鼠标悬停操作</td></tr><tr><td>context_click()</td><td>用于模拟鼠标右键操作， 在调用时需要指定元素定位。</td></tr><tr><td>perform()</td><td>将所有鼠标操作提交执行。</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token comment">#导入 ActionChains 类</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>action_chains <span class="token keyword">import</span> ActionChainsdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://c.biancheng.net"</span><span class="token punctuation">)</span><span class="token comment"># 通过xpath表达式定位到要悬停的元素</span>above <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//ul[@id="ad-link-top"]/li[1]'</span><span class="token punctuation">)</span><span class="token comment"># 对定位到的元素执行鼠标悬停操作</span>ActionChains<span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">.</span>move_to_element<span class="token punctuation">(</span>above<span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Selenium WebDriver 的 Keys 模块提供了模拟键盘输入的 send_keys() 方法，除此之外，该模块也提供了操作键盘的其他方法，比如复制、粘贴等等。在使用之前，首先需要导入 Keys 类，</p><p><code>from selenium.webdriver.common.keys import Keys</code></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>send_keys(Keys.BACK_SPACE)</td><td>删除键（BackSpace）</td></tr><tr><td>send_keys(Keys.SPACE)</td><td>空格键(Space)</td></tr><tr><td>send_keys(Keys.TAB)</td><td>制表键(Tab)</td></tr><tr><td>send_keys(Keys.ESCAPE)</td><td>回退键（Esc）</td></tr><tr><td>send_keys(Keys.ENTER)</td><td>回车键（Enter）</td></tr><tr><td>send_keys(Keys.CONTROL,’a’）</td><td>全选（Ctrl+A）</td></tr><tr><td>send_keys(Keys.CONTROL,’c’)</td><td>复制（Ctrl+C）</td></tr><tr><td>send_keys(Keys.CONTROL,’x’)</td><td>剪切（Ctrl+X）</td></tr><tr><td>send_keys(Keys.CONTROL,’v’）</td><td>粘贴（Ctrl+V）</td></tr><tr><td>send_keys(Keys.F1…Fn)</td><td>键盘 F1…Fn</td></tr><tr><td>keys.down(value,element=None)</td><td>按下键盘上的某个键</td></tr><tr><td>keys.up(value,element=None)</td><td>松开键盘上的某个键</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token comment"># 引入 Keys 模块</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keysdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token comment"># 输入框输入内容</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"C语言中文网H"</span><span class="token punctuation">)</span><span class="token comment"># 删除多输入的一个H</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>BACK_SPACE<span class="token punctuation">)</span><span class="token comment">#单击“百度”一下查找</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"su"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ----------------------------</span><span class="token comment"># 输入空格键 + “Python教程”</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>SPACE<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"Python教程"</span><span class="token punctuation">)</span><span class="token comment"># ctrl+a 全选输入框内容</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>CONTROL<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment"># ctrl+x 剪切输入框内容</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>CONTROL<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token comment"># ctrl+v 粘贴内容到输入框</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>CONTROL<span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">)</span><span class="token comment"># 使用回车键来代替单击操作click</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"su"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>ENTER<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>无界面浏览器</strong></p><p>Chromedriver 每一次运行都要打开浏览器，并执行相应的输入、搜索等操作，这样会导致浏览器交互能力变差，浪费许多时间。 Selenium 为了增强浏览器的交互能力，允许您使用无头浏览器模式，也就是无界面浏览器，它被广泛的应用于爬虫和自动化测试中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> timeoptions<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span><span class="token comment">#无界面浏览</span>driver<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>options<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>kw1<span class="token operator">=</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>title<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#关闭当前界面，只有一个窗口</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#关闭所有界面</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了可以设置无头界面之外，Selenium 还支持其他一些浏览器参数设置，如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">opption<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--window-size=600,600'</span><span class="token punctuation">)</span> <span class="token comment">#设置窗口大小</span>opption<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--incognito'</span><span class="token punctuation">)</span> <span class="token comment">#无痕模式</span>opption<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-infobars'</span><span class="token punctuation">)</span> <span class="token comment">#去掉chrome正受到自动测试软件的控制的提示</span>opption<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'user-agent="XXXX"'</span><span class="token punctuation">)</span> <span class="token comment">#添加请求头</span>opption<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--proxy-server=http://200.130.123.43:3456"</span><span class="token punctuation">)</span><span class="token comment">#代理服务器访问</span>opption<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'excludeSwitches'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'enable-automation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#开发者模式</span>opption<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'blink-settings=imagesEnabled=false'</span><span class="token punctuation">)</span>  <span class="token comment">#禁止加载图片</span>opption<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'lang=zh_CN.UTF-8'</span><span class="token punctuation">)</span> <span class="token comment">#设置默认编码为utf-8</span>opption<span class="token punctuation">.</span>add_extension<span class="token punctuation">(</span>create_proxyauth_extension<span class="token punctuation">(</span>           proxy_host<span class="token operator">=</span><span class="token string">'host'</span><span class="token punctuation">,</span>           proxy_port<span class="token operator">=</span><span class="token string">'port'</span><span class="token punctuation">,</span>           proxy_username<span class="token operator">=</span><span class="token string">"username"</span><span class="token punctuation">,</span>           proxy_password<span class="token operator">=</span><span class="token string">"password"</span>       <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 设置有账号密码的代理</span>opption<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-gpu'</span><span class="token punctuation">)</span>  <span class="token comment"># 这个参数可以规避谷歌的部分bug</span>opption<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-javascript'</span><span class="token punctuation">)</span>  <span class="token comment"># 禁用javascript</span>opption<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--hide-scrollbars'</span><span class="token punctuation">)</span>  <span class="token comment"># 隐藏滚动条</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行JS脚本</strong></p><p>WebDriver 提供了 execute_script() 方法来执行 JavaScript 代码，比如控制浏览器的滚动条。示例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 访问百度</span>driver<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token comment"># 最大化浏览器窗口</span>driver<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 搜索</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"C语言中文网"</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"su"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 通过js代码设置滚动条位置，数值代表(左边距，上边距)</span>js<span class="token operator">=</span><span class="token string">"window.scrollTo(100,500);"</span><span class="token comment">#执行js代码</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>js<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="37-【实例】Python-Selenium实战应用"><a href="#37-【实例】Python-Selenium实战应用" class="headerlink" title="37 【实例】Python Selenium实战应用"></a>37 【实例】Python Selenium实战应用</h2><p>实战案例目标：抓取京东商城（<a href="https://www.jd.com/%EF%BC%89%E5%95%86%E5%93%81%E5%90%8D%E7%A7%B0%E3%80%81%E5%95%86%E5%93%81%E4%BB%B7%E6%A0%BC%E3%80%81%E8%AF%84%E8%AE%BA%E6%95%B0%E9%87%8F%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%95%86%E9%93%BA%E5%90%8D%E7%A7%B0%E3%80%82%E6%AF%94%E5%A6%82%E8%BE%93%E5%85%A5%E6%90%9C%E7%B4%A2%E2%80%9CPython%E4%B9%A6%E7%B1%8D%E2%80%9D%EF%BC%8C%E5%88%99%E6%8A%93%E5%8F%96%E5%A6%82%E4%B8%8B%E6%95%B0%E6%8D%AE%EF%BC%9A">https://www.jd.com/）商品名称、商品价格、评论数量，以及商铺名称。比如输入搜索“Python书籍”，则抓取如下数据：</a></p><p>技术难点：第一，如何下拉滚动条下载商品，第二，如何实现翻页，也就是抓取下一页的内容，第三，如何判断数据已经抓取完毕，即终止页。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding:utf8</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> time<span class="token keyword">import</span> pymongo<span class="token keyword">class</span> <span class="token class-name">JdSpider</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>url<span class="token operator">=</span><span class="token string">'http://www.jd.com/'</span>        self<span class="token punctuation">.</span>options<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 无头模式</span>        self<span class="token punctuation">.</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>browser<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>self<span class="token punctuation">.</span>options<span class="token punctuation">)</span> <span class="token comment"># 创建无界面参数的浏览器对象</span>        self<span class="token punctuation">.</span>i<span class="token operator">=</span><span class="token number">0</span>  <span class="token comment">#计数，一共有多少件商品</span>        <span class="token comment">#输入地址+输入商品+点击按钮，切记这里元素节点是京东首页的输入栏、搜索按钮</span>    <span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="key"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'python书籍'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//*[@class='form']/button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#把进度条件拉倒最底部+提取商品信息</span>    <span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 执行js语句，拉动进度条件</span>        self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>            <span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span>        <span class="token punctuation">)</span>        <span class="token comment"># 给页面元素加载时预留时间</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment">#用 xpath 提取每页中所有商品，最终形成一个大列表</span>        li_list<span class="token operator">=</span>self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="J_goodsList"]/ul/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            <span class="token comment">#构建空字典</span>            item<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>              item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token operator">=</span>li<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'.//div[@class="p-name"]/a/em'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token operator">=</span>li<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'.//div[@class="p-price"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span><span class="token operator">=</span>li<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'.//div[@class="p-commit"]/strong'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'shop'</span><span class="token punctuation">]</span><span class="token operator">=</span>li<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'.//div[@class="p-shopnum"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>             self<span class="token punctuation">.</span>i<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#搜索出想要抓取商品的页面</span>        self<span class="token punctuation">.</span>get_html<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#循环执行点击“下一页”操作</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment">#获取每一页要抓取的数据</span>            self<span class="token punctuation">.</span>get_data<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">#判断是否是最一页</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>page_source<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'pn-next disabled'</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>browser<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'pn-next'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">#预留元素加载时间</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数量'</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>i<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    spider<span class="token operator">=</span>JdSpider<span class="token punctuation">(</span><span class="token punctuation">)</span>    spider<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Selenium 自动化爬虫让你无须关心网站的类型（静态或者动态），只需您按部就班的寻找元素节点，并依此点击，即可实现数据抓取。不过 Selenium 最大的缺点就是效率低，因此它只适合做小规模的数据采集工作。</p><h2 id="38-Python-Scrapy爬虫框架"><a href="#38-Python-Scrapy爬虫框架" class="headerlink" title="38 Python Scrapy爬虫框架"></a>38 Python Scrapy爬虫框架</h2><p>Scrapy 是一个基于 Twisted 实现的异步处理爬虫框架，该框架使用纯 Python 语言编写。Scrapy 框架应用广泛，常用于数据采集、网络监测，以及自动化测试等。</p><p>安装：<code>python -m pip install Scrapy</code></p><ol><li><p>Scrapy 框架提供了一些常用的命令用来创建项目、查看配置信息，以及运行爬虫程序。常用指令如下所示：</p><table><thead><tr><th>命令</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>startproject</td><td>scrapy startproject &lt;项目名&gt;</td><td>创建一个新项目。</td></tr><tr><td>genspider</td><td>scrapy genspider &lt;爬虫文件名&gt; &lt;域名&gt;</td><td>新建爬虫文件。</td></tr><tr><td>runspider</td><td>scrapy runspider &lt;爬虫文件&gt;</td><td>运行一个爬虫文件，不需要创建项目。</td></tr><tr><td>crawl</td><td>scrapy crawl <spidername></td><td>运行一个爬虫项目，必须要创建项目。</td></tr><tr><td>list</td><td>scrapy list</td><td>列出项目中所有爬虫文件。</td></tr><tr><td>view</td><td>scrapy view &lt;url地址&gt;</td><td>从浏览器中打开 url 地址。</td></tr><tr><td>shell</td><td>csrapy shell &lt;url地址&gt;</td><td>命令行交互模式。</td></tr><tr><td>settings</td><td>scrapy settings</td><td>查看当前项目的配置信息。</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">Baidu                   # 项目文件夹├── Baidu               # 用来装载项目文件的目录│   ├── items.py        # 定义要抓取的数据结构│   ├── middlewares.py  # 中间件，用来设置一些处理规则│   ├── pipelines.py    # 管道文件，处理抓取的数据│   ├── settings.py     # 全局配置文件│   └── spiders         # 用来装载爬虫文件的目录  │       ├── baidu.py    # 具体的爬虫程序└── scrapy.cfg          # 项目基本配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p> Scrapy爬虫工作流程</p></li></ol><p>   Scrapy 框架由五大组件构成，如下所示：</p><table><thead><tr><th>名称</th><th>作用说明</th></tr></thead><tbody><tr><td>Engine(引擎)</td><td>整个 Scrapy 框架的核心，主要负责数据和信号在不同模块间传递。</td></tr><tr><td>Scheduler(调度器)</td><td>用来维护引擎发送过来的 request 请求队列。</td></tr><tr><td>Downloader(下载器)</td><td>接收引擎发送过来的 request 请求，并生成请求的响应对象，将响应结果返回给引擎。</td></tr><tr><td>Spider(爬虫程序)</td><td>处理引擎发送过来的 response， 主要用来解析、提取数据和获取需要跟进的二级URL，然后将这些数据交回给引擎。</td></tr><tr><td>Pipeline(项目管道)</td><td>用实现数据存储，对引擎发送过来的数据进一步处理，比如存 MySQL 数据库等。</td></tr></tbody></table><p>   在整个执行过程中，还涉及到两个 middlewares 中间件，分别是下载器中间件（Downloader Middlewares）和蜘蛛中间件（Spider Middlewares），它们分别承担着不同的作用：</p><ul><li>下载器中间件，位于引擎和下载器之间，主要用来包装 request 请求头，比如 UersAgent、Cookies 和代理 IP 等</li><li>蜘蛛中间件，位于引擎与爬虫文件之间，它主要用来修改响应对象的属性。</li></ul><p>   <img src="http://c.biancheng.net/uploads/allimg/210819/9-210Q9154140Y6.gif" alt="Scrapy工作流程示意图"></p><p>   上述示意图描述如下，当一个爬虫项目启动后，Scrapy 框架会进行以下工作：</p><ul><li>第一步：由“引擎”向爬虫文件索要第一个待爬取的 URL，并将其交给调度器加入 URL 队列当中（对应图中1/2步骤）。 </li><li>第二步：调度器处理完请求后， 将第一个 URL 出队列返回给引擎；引擎经由下载器中间件将该 URL 交给下载器去下载 response 对象（对应3/4步骤）。</li><li>第三步：下载器得到响应对象后，将响应结果交给引擎，引擎收到后，经由蜘蛛中间件将响应结果交给爬虫文件（对应5/6步骤）。</li><li>第四步：爬虫文件对响应结果进行处理、分析，并提取出所需要的数据。</li><li>第五步：最后，提取的数据会交给管道文件去存数据库，同时将需要继续跟进的二级页面 URL 交给调度器去入队列（对应7/8/9步骤）。</li></ul><p>   上述过程会一直循环，直到没有要爬取的 URL 为止，也就是 URL 队列为空时才会停止。</p><ol start="3"><li> settings配置文件</li></ol>   <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1、定义User-Agent</span>USER_AGENT <span class="token operator">=</span> <span class="token string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)'</span><span class="token comment"># 2、是否遵循robots协议，一般设置为False</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># 3、最大并发量，默认为16</span>CONCURRENT_REQUESTS <span class="token operator">=</span> <span class="token number">32</span><span class="token comment"># 4、下载延迟时间</span>DOWNLOAD_DELAY <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># 设置日志级别，DEBUG &lt; INFO &lt; WARNING &lt; ERROR &lt; CRITICAL</span>LOG_LEVEL <span class="token operator">=</span> <span class="token string">' '</span><span class="token comment"># 将日志信息保存日志文件中，而不在终端输出</span>LOG_FILE <span class="token operator">=</span> <span class="token string">''</span><span class="token comment"># 设置导出数据的编码格式(主要针对于json文件)</span>FEED_EXPORT_ENCODING <span class="token operator">=</span> <span class="token string">''</span><span class="token comment"># 非结构化数据的存储路径</span>IMAGES_STORE <span class="token operator">=</span> <span class="token string">'路径'</span><span class="token comment"># 请求头，此处可以添加User-Agent、cookies、referer等</span>DEFAULT_REQUEST_HEADERS<span class="token operator">=</span><span class="token punctuation">&#123;</span>   <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class="token punctuation">,</span>   <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'en'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment"># 项目管道，300 代表激活的优先级 越小越优先，取值1到1000</span>ITEM_PIPELINES<span class="token operator">=</span><span class="token punctuation">&#123;</span>  <span class="token string">'Baidu.pipelines.BaiduPipeline'</span><span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">&#125;</span><span class="token comment"># 添加下载器中间件</span>DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   想要了解更多关于 Scrapy 框架的知识，可参考官方文档：<a href="https://docs.scrapy.org/en/latest/index.html">https://docs.scrapy.org/en/latest/index.html</a></p><h2 id="39-【实例】Scrapy框架应用"><a href="#39-【实例】Scrapy框架应用" class="headerlink" title="39 【实例】Scrapy框架应用"></a>39 【实例】Scrapy框架应用</h2>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java-lxf</title>
      <link href="/posts/21547/"/>
      <url>/posts/21547/</url>
      
        <content type="html"><![CDATA[<h2 id="Java快速入门"><a href="#Java快速入门" class="headerlink" title="Java快速入门"></a>Java快速入门</h2><h3 id="Java简介"><a href="#Java简介" class="headerlink" title="Java简介"></a>Java简介</h3><p>Java最早是由SUN公司（已被Oracle收购）的<a href="https://en.wikipedia.org/wiki/James_Gosling">詹姆斯·高斯林</a>（高司令，人称Java之父）在上个世纪90年代初开发的一种编程语言，最初被命名为Oak。</p><h4 id="Java特点"><a href="#Java特点" class="headerlink" title="Java特点"></a>Java特点</h4><ul><li>Java是基于JVM虚拟机的跨平台语言，一次编写，到处运行；</li><li>Java程序易于编写，而且有内置垃圾收集，不必考虑内存管理；</li><li>Java介于编译型语言和解释型语言之间。</li><li>编译型语言如C、C++，代码是直接编译成机器码执行，但是不同的平台（x86、ARM等）CPU的指令集不同，因此，需要编译出每一种平台的对应机器码。</li><li>解释型语言如Python、Ruby没有这个问题，可以由解释器直接加载源码然后运行，代价是运行效率太低。</li><li>而Java是将代码编译成一种“字节码”，它类似于抽象的CPU指令，然后，针对不同平台编写虚拟机，不同平台的虚拟机负责加载字节码并执行，这样就实现了“一次编写，到处运行”的效果。<em>当然，这是针对Java开发者而言。对于虚拟机，需要为每个平台分别开发。为了保证不同平台、不同公司开发的虚拟机都能正确执行Java字节码，SUN公司制定了一系列的Java虚拟机规范。从实践的角度看，JVM的兼容性做得非常好，低版本的Java字节码完全可以正常运行在高版本的JVM上。</em></li></ul><h4 id="JavaSE，JavaEE，JavaME"><a href="#JavaSE，JavaEE，JavaME" class="headerlink" title="JavaSE，JavaEE，JavaME"></a>JavaSE，JavaEE，JavaME</h4><ul><li>Java SE： Standard Edition，标准版，包含标准的JVM和标准库，</li><li>Java EE： Enterprise Edition，企业版，它只是在Java SE的基础上加上了大量的API和库，以便方便开发Web应用、数据库、消息服务等，Java EE的应用使用的虚拟机和Java SE完全相同。</li><li>Java ME： Micro Edition，Java ME就和Java SE不同，它是一个针对嵌入式设备的“瘦身版”，Java SE的标准库无法在Java ME上使用，Java ME的虚拟机也是“瘦身版”。</li></ul><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><ul><li>JDK： Java Development Kit</li><li>JRE： Java Runtime Environment</li></ul><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii"> ┌─    ┌──────────────────────────────────┐ │     │     Compiler, debugger, etc.     │ │     └──────────────────────────────────┘JDK ┌─ ┌──────────────────────────────────┐ │  │  │                                  │ │ JRE │      JVM + Runtime Library       │ │  │  │                                  │ └─ └─ └──────────────────────────────────┘       ┌───────┐┌───────┐┌───────┐┌───────┐       │Windows││ Linux ││ macOS ││others │       └───────┘└───────┘└───────┘└───────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Java相关命令"><a href="#Java相关命令" class="headerlink" title="Java相关命令"></a>Java相关命令</h4><ul><li>java：这个可执行程序其实就是JVM，运行Java程序，就是启动JVM，然后让JVM执行指定的编译后的代码；</li><li>javac：这是Java的编译器，它用于把Java源码文件（以<code>.java</code>后缀结尾）编译为Java字节码文件（以<code>.class</code>后缀结尾）；</li><li>jar：用于把一组<code>.class</code>文件打包成一个<code>.jar</code>文件，便于发布；</li><li>javadoc：用于从Java源码中自动提取注释并生成文档；</li><li>jdb： Java调试器，用于开发阶段的运行调试。</li></ul><h4 id="第一个程序的运行"><a href="#第一个程序的运行" class="headerlink" title="第一个程序的运行"></a>第一个程序的运行</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Hello.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java源码本质上是一个文本文件，我们需要先用<code>javac</code>把<code>Hello.java</code>编译成字节码文件<code>Hello.class</code>，然后，用<code>java</code>命令（在JVM上）执行这个字节码文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">javac Hello.java <span class="token comment"># 编译成字节码.class文件</span>java Hello <span class="token comment"># 在JVM上执行生成的Hello.class文件，</span>java Hello.java <span class="token comment"># 带.java后缀也可以运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>小总结：</p><p>一个Java源码只能定义一个<code>public</code>类型的class，并且class名称和文件名要完全一致；</p><p>使用<code>javac</code>可以将<code>.java</code>源码编译成<code>.class</code>字节码；</p><p>使用<code>java</code>可以运行一个已编译的Java程序，参数是类名。</p><p>不写<code>public</code>，也能正确编译，但是这个类将无法从命令行执行（java Hello）。</p></blockquote><h3 id="Java程序基础"><a href="#Java程序基础" class="headerlink" title="Java程序基础"></a>Java程序基础</h3><p><strong>变量和数据类型</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 整型</span><span class="token keyword">int</span> i3 <span class="token operator">=</span> <span class="token number">2_000_000_000</span><span class="token punctuation">;</span> <span class="token comment">// 加下划线更容易识别，</span><span class="token keyword">int</span> i4 <span class="token operator">=</span> <span class="token number">0xff0000</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制表示的16711680</span><span class="token keyword">int</span> i5 <span class="token operator">=</span> <span class="token number">0b1000000000</span><span class="token punctuation">;</span> <span class="token comment">// 二进制表示的512</span><span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">9000000000000000000L</span><span class="token punctuation">;</span> <span class="token comment">// long型的结尾需要加L</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>小知识：</p><ol><li><p>Java语言对布尔类型的存储并没有做规定，因为理论上存储布尔类型只需要1 bit，但是通常JVM内部会把<code>boolean</code>表示为4字节整数。</p></li><li><p>字符类型<code>char</code>表示一个字符，两个字节。Java的<code>char</code>类型保存一个Unicode字符，也可以表示标准的ASCII。</p></li><li><p>常量的作用是用有意义的变量名来避免魔术数字（Magic number），例如，不要在代码中到处写<code>3.14</code>，而是定义一个常量PI，常量名通常全部大写。</p></li><li><p>编译器会根据赋值语句自动推断出变量<code>sb</code>的类型是<code>StringBuilder</code>，因此，使用<code>var</code>定义变量，仅仅是少写了变量类型而已。</p></li></ol></blockquote><p><strong>整数运算</strong></p><blockquote><p>位运算小知识：</p><ol><li>无符号的右移运算，使用<code>&gt;&gt;&gt;</code>，它的特点是不管符号位，右移后高位总是补<code>0</code>，因此，对一个负数进行<code>&gt;&gt;&gt;</code>右移，它会变成正数，原因是最高位的<code>1</code>变成了<code>0</code>。对<code>byte</code>和<code>short</code>类型进行移位时，会首先转换为<code>int</code>再进行位移。</li></ol></blockquote><p><strong>浮点数运算</strong></p><blockquote><p>小知识：</p><ol><li>浮点数<code>0.1</code>在计算机中就无法精确表示，因为十进制的<code>0.1</code>换算成二进制是一个无限循环小数，很显然，无论使用<code>float</code>还是<code>double</code>，都只能存储一个<code>0.1</code>的近似值。但是，<code>0.5</code>这个浮点数又可以精确地表示。</li><li>比较两个浮点数通常比较它们的差的绝对值是否小于一个特定值（很小的一个值，比如0.00001） ；</li><li>编译器计算<code>24 / 5</code>这个子表达式时，按两个整数进行运算，结果仍为整数<code>4</code>。</li></ol></blockquote><p><strong>字符和字符串</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 字符类型</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span> <span class="token comment">// 字母“A”的Unicodde编码是65</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token string">'中'</span><span class="token punctuation">;</span> <span class="token comment">// 汉字“中”的Unicode编码是20013</span><span class="token comment">// 直接用转义字符\u+Unicode编码来表示一个字符：</span><span class="token comment">// 注意是十六进制:</span><span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token string">'\u0041'</span><span class="token punctuation">;</span> <span class="token comment">// 'A'，因为十六进制0041 = 十进制65</span><span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token string">'\u4e2d'</span><span class="token punctuation">;</span> <span class="token comment">// '中'，因为十六进制4e2d = 十进制20013</span><span class="token comment">// Java的字符类型char是基本类型，字符串类型String是引用类型；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>小知识：</p><ol><li>因为Java在内存中总是使用Unicode表示字符，所以，一个英文字符和一个中文字符都用一个<code>char</code>类型表示，它们都占用两个字节。要显示一个字符的Unicode编码，只需将<code>char</code>类型直接赋值给<code>int</code>类型即可。</li><li>从Java 13开始，字符串可以用<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code>表示多行字符串（Text Blocks）了，多行字符串前面==共同的空格==会被去掉，总是以最短的行首空格为基准</li></ol></blockquote><p><strong>数组类型</strong></p><blockquote><p>小知识：</p><ol><li>数组所有元素初始化为默认值，整型都是<code>0</code>，浮点型是<code>0.0</code>，布尔型是<code>false</code>；</li><li>数组一旦创建后，大小就不可改变。</li></ol></blockquote><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p><strong>输入和输出</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 输出</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// println是print line的缩写，表示输出并换行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello %s"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 格式化输出</span><span class="token comment">// 输入</span><span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建Scanner对象</span><span class="token class-name">String</span> name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读取一行输入并获取字符串</span><span class="token keyword">int</span> age <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读取一行输入并获取整数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>小知识：</p><ol><li>连续两个%%表示一个%字符本身</li></ol></blockquote><p><strong>Switch</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// java12 之后的语法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> fruit <span class="token operator">=</span> <span class="token string">"apple"</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">"apple"</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Selected apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"pear"</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Selected pear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"mango"</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Selected mango"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Good choice!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">default</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No fruit selected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">////////////////////////////</span><span class="token comment">// yield 返回值</span><span class="token class-name">String</span> fruit <span class="token operator">=</span> <span class="token string">"orange"</span><span class="token punctuation">;</span><span class="token keyword">int</span> opt <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token string">"apple"</span> <span class="token operator">-></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"pear"</span><span class="token punctuation">,</span> <span class="token string">"mango"</span> <span class="token operator">-></span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> code <span class="token operator">=</span> fruit<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> code<span class="token punctuation">;</span> <span class="token comment">// switch语句返回值</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 注意赋值语句要以;结束</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"opt = "</span> <span class="token operator">+</span> opt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>小知识：</p><ol><li><p>从Java 12开始，<code>switch</code>语句升级为更简洁的表达式语法，使用类似模式匹配（Pattern Matching）的方法，保证只有一种路径会被执行，并且不需要<code>break</code>语句：</p><p>注意新语法使用<code>-&gt;</code>，如果有多条语句，需要用<code>&#123;&#125;</code>括起来。不要写<code>break</code>语句，因为新语法只会执行匹配的语句，没有穿透效应。</p></li><li><p>使用新的<code>switch</code>语法，不但不需要<code>break</code>，还可以直接返回值。</p></li><li><p>用<code>yield</code>返回一个值作为<code>switch</code>语句的返回值，和<code>return</code>类似</p></li></ol></blockquote><p><strong>循环</strong></p><blockquote><p>小知识：</p><ol><li>如果循环条件永远满足，那这个循环就变成了死循环。死循环将导致100%的CPU占用，用户会感觉电脑运行缓慢，所以要避免编写死循环代码。</li><li><code>for each</code>循环无法指定遍历顺序，也无法获取数组的索引。除了数组外，<code>for each</code>循环能够遍历所有“可迭代”的数据类型，包括后面会介绍的<code>List</code>、<code>Map</code>等。</li></ol></blockquote><h3 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h3><p><strong>遍历数组</strong></p><blockquote><p>小知识：</p><ol><li>遍历数组可以使用<code>for</code>循环，<code>for</code>循环可以访问数组索引，<code>for each</code>循环直接迭代每个数组元素，但无法获取索引；</li><li>使用<code>Arrays.toString()</code>可以快速获取数组内容。</li></ol></blockquote><p><strong>数组排序</strong></p><ul><li>直接使用Java标准库提供的<code>Arrays.sort()</code>进行排序；</li></ul><p><strong>多维数组</strong></p><ul><li>打印多维数组可以使用<code>Arrays.deepToString()</code>；</li></ul><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>面向对象编程，英文是Object-Oriented Programming，简称OOP。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol><li><p>在方法内部，可以使用一个隐含的变量<code>this</code>，它始终指向当前实例。因此，通过<code>this.field</code>就可以访问当前实例的字段。</p><p>==如果没有命名冲突，可以省略<code>this</code>。==</p></li></ol><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote><p>小知识：</p><ol><li>如果一个类没有定义构造方法，编译器会自动为我们生成一个默认构造方法，它没有参数，也没有执行语句。如果我们自定义了一个构造方法，那么，编译器就<em>不再</em>自动创建默认构造方法：</li><li>没有在构造方法中初始化字段时，引用类型的字段默认是<code>null</code>，数值类型的字段用默认值，<code>int</code>类型默认值是<code>0</code>，布尔类型默认值是<code>false</code></li><li>在Java中，创建对象实例的时候，按照如下顺序进行初始化：<ol><li>先初始化字段，例如，<code>int age = 10;</code>表示字段初始化为<code>10</code>，<code>double salary;</code>表示字段默认初始化为<code>0</code>，<code>String name;</code>表示引用类型字段默认初始化为<code>null</code>；</li><li>执行构造方法的代码进行初始化。</li></ol></li></ol></blockquote><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><blockquote><p>小知识：</p><ol><li><p>方法名相同，但各自的参数不同，称为方法重载</p><p>方法重载的返回值类型通常都是相同的。</p><p>方法重载的目的是，功能类似的方法使用同一名字，更容易记住，因此，调用起来更简单。</p><ul><li><code>int indexOf(int ch)</code>：根据字符的Unicode码查找；</li><li><code>int indexOf(String str)</code>：根据字符串查找；</li><li><code>int indexOf(int ch, int fromIndex)</code>：根据字符查找，但指定起始位置；</li><li><code>int indexOf(String str, int fromIndex)</code>根据字符串查找，但指定起始位置。</li></ul></li></ol></blockquote><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote><p>小知识：</p><ol><li><p>继承是面向对象编程中非常强大的一种机制，它可以复用代码。</p></li><li><p> ==注意：==子类自动获得了父类的所有字段和方法（包括private），严禁定义与父类重名的字段！（子类定义的重名变量会覆盖父类定义的变量）</p></li><li><p>子类无法访问父类的<code>private</code>字段或者<code>private</code>方法。</p></li><li><p><code>protected</code>关键字可以把字段和方法的访问权限控制在继承树内部，一个<code>protected</code>字段和方法可以被其子类，以及子类的子类所访问</p></li><li><p>实际上，在子类中使用<code>super.name</code>，或者<code>this.name</code>，或者<code>name</code>，效果都是一样的。编译器会自动定位到父类的<code>name</code>字段</p></li><li><p>在Java中，任何<code>class</code>的构造方法，==第一行语句必须是调用父类的构造方法==。如果没有明确地调用父类的构造方法，编译器会帮我们自动加一句<code>super();</code></p></li><li><p>==阻止继承==</p><p>正常情况下，只要某个class没有<code>final</code>修饰符，那么任何类都可以从该class继承。==<code>final</code>方法不允许子类重写。==</p><p>从<code>Java 15</code>开始，允许使用<code>sealed</code>修饰class，并通过<code>permits</code>明确写出能够从该class继承的子类名称。</p><p><code>sealed</code>类在Java 15中目前是预览状态，要启用它，必须使用参数<code>--enable-preview</code>和<code>--source 15</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token keyword">permits</span> <span class="token class-name">Rect</span><span class="token punctuation">,</span> <span class="token class-name">Circle</span><span class="token punctuation">,</span> <span class="token class-name">Triangle</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Shape类就是一个sealed类，它只允许指定的3个类继承它</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>子类功能比父类多，多的功能无法凭空变出来。因此，向下转型很可能会失败。</p><p>从Java 14开始，判断<code>instanceof</code>后，可以直接转型为指定变量，避免再次强制转型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 可以直接使用变量s:</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>继承是is关系，组合是has关系。具有has关系不应该使用继承，而是使用组合。</p></li></ol></blockquote><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><blockquote><p>小知识：</p><ol><li><p>多态是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法（动态调用）。</p><p>多态的特性就是，运行期才能动态决定调用的子类方法。对某个类型调用某个方法，执行的实际方法可能是某个子类的覆写方法。</p></li><li><p>Java的方法调用取决于运行期对象的实际类型，这种行为称为多态；</p></li><li><p><code>final</code>关键字</p><ol><li><code>final</code>修饰的方法可以阻止被覆写；</li><li><code>final</code>修饰的class可以阻止被继承；</li><li><code>final</code>修饰的field必须在创建对象时初始化，随后不可修改。（可以在构造方法中初始化final字段）</li></ol></li></ol></blockquote><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ol><li>因为抽象类本身被设计成只能用于被继承，因此，抽象类可以强迫子类实现其定义的抽象方法，否则编译会报错。因此，抽象方法实际上相当于定义了“规范”。</li><li><code>Person e = new Employee();</code>这种尽量引用高层类型，避免引用实际子类型的方式，称之为==面向抽象编程==。</li><li>面向抽象编程使得调用者只关心抽象方法的定义，不关心子类的具体实现。</li></ol><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote><p>小知识：</p><ol><li>所谓<code>interface</code>，就是比抽象类还要抽象的纯抽象接口，因为它连字段都不能有（只是定义方法规范）。因为接口定义的所有方法默认都是<code>public abstract</code>的，所以这两个修饰符不需要写出来（写不写效果都一样）。</li><li>一般来说，公共逻辑适合放在<code>abstract class</code>中，具体逻辑放到各个子类，而接口层次代表抽象程度</li></ol><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">┌───────────────┐│   Iterable    │└───────────────┘        ▲                ┌───────────────────┐        │                │      Object       │┌───────────────┐        └───────────────────┘│  Collection   │                  ▲└───────────────┘                  │        ▲     ▲          ┌───────────────────┐        │     └──────────│AbstractCollection │┌───────────────┐        └───────────────────┘│     List      │                  ▲└───────────────┘                  │              ▲          ┌───────────────────┐              └──────────│   AbstractList    │                         └───────────────────┘                                ▲     ▲                                │     │                                │     │                     ┌────────────┐ ┌────────────┐                     │ ArrayList  │ │ LinkedList │                     └────────────┘ └────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>在接口中，可以定义<code>default</code>方法（JDK&gt;=1.8）。实现类可以不必覆写<code>default</code>方法。<code>default</code>方法的目的是，当我们需要给接口新增一个方法时，会涉及到修改全部子类。如果新增的是<code>default</code>方法，那么子类就不必全部修改，只需要在需要覆写的地方去覆写新增方法。</p><p><code>default</code>方法和抽象类的普通方法是有所不同的（但是差不多）。因为<code>interface</code>没有字段，<code>default</code>方法无法访问字段，而抽象类的普通方法可以访问实例字段。</p></li><li><p>抽象类和接口的区别：</p><p><img src="https://upload-images.jianshu.io/upload_images/1870221-cc52092cc8b11d0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p></li></ol></blockquote><h3 id="静态字段和静态方法"><a href="#静态字段和静态方法" class="headerlink" title="静态字段和静态方法"></a>静态字段和静态方法</h3><ol><li>静态方法类似其它编程语言的函数。静态方法常用于工具类和辅助方法。</li><li>因为静态方法属于<code>class</code>而不属于实例，因此，静态方法内部，无法访问<code>this</code>变量，也无法访问实例字段，它只能访问静态字段。</li><li>因为<code>interface</code>是一个纯抽象类，所以它不能定义实例字段。但是，<code>interface</code>是可以有静态字段的，并且静态字段必须为<code>final</code>类型。实际上，因为<code>interface</code>的字段只能是<code>public static final</code>类型，所以我们可以把这些修饰符都去掉，编译器会自动把该字段变为<code>public static final</code>类型。</li></ol><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ol><li>不用<code>public</code>、<code>protected</code>、<code>private</code>修饰的字段和方法就是包作用域。</li><li>还有一种<code>import static</code>的语法，它可以导入可以导入一个类的静态字段和静态方法</li><li>一个<code>.java</code>文件只能包含一个<code>public</code>类，但可以包含多个非<code>public</code>类。如果有<code>public</code>类，文件名必须和<code>public</code>类的名字相同</li></ol><p>Java编译器最终编译出的<code>.class</code>文件只使用<em>完整类名</em>，因此，在代码中，当编译器遇到一个<code>class</code>名称时：</p><ul><li>如果是完整类名，就直接根据完整类名查找这个<code>class</code>；</li><li>如果是简单类名，按下面的顺序依次查找：<ul><li>查找当前<code>package</code>是否存在这个<code>class</code>；</li><li>查找<code>import</code>的包是否包含这个<code>class</code>；</li><li>查找<code>java.lang</code>包是否包含这个<code>class</code>。编译器会自动导入JDK的核心类使用的<code>java.lang</code>包</li></ul></li></ul><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><ol><li>Inner Class可以修改Outer Class的<code>private</code>字段，因为Inner Class的作用域在Outer Class内部，所以能访问Outer Class的<code>private</code>字段和方法。</li><li>观察Java编译器编译后的<code>.class</code>文件可以发现，<code>Outer</code>类被编译为<code>Outer.class</code>，而<code>Inner</code>类被编译为<code>Outer$Inner.class</code>。实例化一个Inner Class不能脱离Outer实例。</li></ol><p>定义==匿名类==的写法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 实现必要的抽象方法...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>观察Java编译器编译后的<code>.class</code>文件可以发现，<code>Outer</code>类被编译为<code>Outer.class</code>，而匿名类被编译为<code>Outer$1.class</code>。如果有多个匿名类，Java编译器会将每个匿名类依次命名为<code>Outer$1</code>、<code>Outer$2</code>、<code>Outer$3</code>……</p><h3 id="classpath和jar"><a href="#classpath和jar" class="headerlink" title="classpath和jar"></a>classpath和jar</h3><blockquote><p>小知识：</p><ol><li><p>我们强烈<em>不推荐</em>在系统环境变量中设置<code>classpath</code>，那样会污染整个系统环境。在启动JVM时设置<code>classpath</code>才是推荐的做法。实际上就是给<code>java</code>命令传入<code>-classpath</code>或<code>-cp</code>参数：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">java -classpath <span class="token builtin class-name">.</span><span class="token punctuation">;</span>C:<span class="token punctuation">\</span>work<span class="token punctuation">\</span>project1<span class="token punctuation">\</span>bin<span class="token punctuation">;</span>C:<span class="token punctuation">\</span>shared abc.xyz.Hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>没有设置系统环境变量，也没有传入<code>-cp</code>参数，那么JVM默认的<code>classpath</code>为<code>.</code>，即当前目录。</p></li><li><p>在IDE中运行Java程序，IDE自动传入的<code>-cp</code>参数是当前工程的<code>bin</code>目录和引入的jar包。</p></li><li><p><strong>不要把任何Java核心库添加到classpath中！JVM根本不依赖classpath加载核心库！</strong></p></li><li><p>然后，把后缀从<code>.zip</code>改为<code>.jar</code>，一个jar包就创建成功。</p></li><li><p>jar包还可以包含一个特殊的<code>/META-INF/MANIFEST.MF</code>文件，<code>MANIFEST.MF</code>是纯文本，可以指定<code>Main-Class</code>和其它信息。JVM会自动读取这个<code>MANIFEST.MF</code>文件，如果存在<code>Main-Class</code>，我们就不必在命令行指定启动的类名，而是用更方便的命令：<code>java -jar hello.jar</code></p></li></ol></blockquote><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ol><li>JVM自带的Java标准库，实际上也是以jar文件形式存放的，这个文件叫<code>rt.jar</code>，一共有60多M。</li><li>详情见：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1281795926523938">模块 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></li></ol><h2 id="Java核心类"><a href="#Java核心类" class="headerlink" title="Java核心类"></a>Java核心类</h2><h3 id="字符串和编码"><a href="#字符串和编码" class="headerlink" title="字符串和编码"></a>字符串和编码</h3><ol><li>实际上字符串在<code>String</code>内部是通过一个<code>char[]</code>数组表示的，因此，按下面的写法也是可以的：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>字符串<em>不可变</em>。这种不可变性是通过内部的<code>private final char[]</code>字段</p></li><li><p>实际上那只是Java编译器在编译期，会自动把所有相同的字符串当作一个对象放入常量池，自然<code>s1</code>和<code>s2</code>的引用就是相同的。</p></li><li><p><code>CharSequence</code>是<code>String</code>的父类。</p></li><li><p>另一个<code>strip()</code>方法也可以移除字符串首尾空白字符。它和<code>trim()</code>不同的是，类似中文的空格字符<code>\u3000</code>也会被移除</p></li></ol><p><code>String</code>还提供了<code>isEmpty()</code>和<code>isBlank()</code>来判断字符串是否为空和空白字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"Hi %s, your score is %d!"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Hi %s, your score is %.2f!"</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">59.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li><p>特别注意，<code>Integer</code>有个<code>getInteger(String)</code>方法，它不是将字符串转换为<code>int</code>，而是把该字符串对应的系统变量转换为<code>Integer</code>：<code>Integer.getInteger(&quot;java.version&quot;); // 版本号，11</code></p></li><li><p><code>String</code>和<code>char[]</code>类型可以互相转换，方法是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// String -> char[]</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// char[] -> String</span><span class="token comment">// 如果修改了char[]数组，String并不会改变</span><span class="token comment">// 这是因为通过new String(char[])创建新的String实例时，它并不会直接引用传入的char[]数组，而是会复制一份，所以，修改外部的char[]数组不会影响String实例内部的char[]数组，因为这是两个不同的数组。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>UTF-8</code>编码，它是一种变长编码，用来把固定长度的<code>Unicode</code>编码变成1～4字节的变长编码。通过<code>UTF-8</code>编码，英文字符<code>&#39;A&#39;</code>的<code>UTF-8</code>编码变为<code>0x41</code>，正好和<code>ASCII</code>码一致，而中文<code>&#39;中&#39;</code>的<code>UTF-8</code>编码为3字节<code>0xe4b8ad</code>。</p></li><li><p>```java</p><p>byte[] b1 = “Hello”.getBytes(); // 按系统默认编码转换，不推荐<br>byte[] b2 = “Hello”.getBytes(“UTF-8”); // 按UTF-8编码转换<br>byte[] b2 = “Hello”.getBytes(“GBK”); // 按GBK编码转换<br>byte[] b3 = “Hello”.getBytes(StandardCharsets.UTF_8); // 按UTF-8编码转换</p><p>byte[] b = …<br>String s1 = new String(b, “GBK”); // 按GBK转换<br>String s2 = new String(b, StandardCharsets.UTF_8); // 按UTF-8转换<br>// Java的String和char在内存中总是以Unicode编码表示。</p><pre class="line-numbers language-none"><code class="language-none">### StringBuilder&gt; 小知识：&gt;&gt; 1. 虽然可以直接拼接字符串，但是，在循环中，每次循环都会创建新的字符串对象，然后扔掉旧的字符串。这样，绝大部分字符串都是临时对象，不但浪费内存，还会影响GC效率。&gt;&gt;    为了能高效拼接字符串，Java标准库提供了&#96;StringBuilder&#96;，它是一个可变对象，可以预分配缓冲区，这样，往&#96;StringBuilder&#96;中新增字符时，不会创建新的临时对象，&#96;StringBuilder&#96;还可以进行链式操作。&gt;&gt; 2. &#96;StringBuffer&#96;是&#96;StringBuilder&#96;的线程安全版本，但是同步会带来执行速度的下降。现在很少使用。### StringJoiner&gt; 小知识：&gt;&gt; 1. 要高效拼接字符串，应该使用&#96;StringBuilder&#96;。&gt;&gt; 2. 类似用分隔符拼接数组的需求很常见，所以Java标准库还提供了一个&#96;StringJoiner&#96;来干这个事。&gt;&gt; 3. &#96;var sj &#x3D; new StringJoiner(&quot;, &quot;, &quot;Hello &quot;, &quot;!&quot;);&#96;，参数分别是 分隔符，开头，结尾&gt;&gt; 4. &#96;String&#96;还提供了一个静态方法&#96;join()&#96;，这个方法在内部使用了&#96;StringJoiner&#96;来拼接字符串，在不需要指定“开头”和“结尾”的时候，用&#96;String.join(&quot;-&quot;,arr)&#96;更方便。### 包装类型&#96;&#96;&#96;java    &#x2F;&#x2F; 通过new操作符创建Integer实例(不推荐使用,会有编译警告):    Integer n1 &#x3D; new Integer(i);    &#x2F;&#x2F; 通过静态方法valueOf(int)创建Integer实例:    Integer n2 &#x3D; Integer.valueOf(i);    &#x2F;&#x2F; 通过静态方法valueOf(String)创建Integer实例:    Integer n3 &#x3D; Integer.valueOf(&quot;100&quot;);int x2 &#x3D; Integer.parseInt(&quot;100&quot;, 16); &#x2F;&#x2F; 256,因为按16进制解析System.out.println(Integer.toHexString(100)); &#x2F;&#x2F; &quot;64&quot;,表示为16进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol><li><p>自动装箱和自动拆箱只发生在编译阶段，目的是为了少写代码。</p><p>装箱和拆箱会影响代码的执行效率，因为编译后的<code>class</code>代码是严格区分基本类型和引用类型的。</p></li><li><p>所有的包装类型都是不变类。 <code>private final int value;</code></p></li><li><p>所有的整数和浮点数的包装类型都继承自<code>Number</code></p></li><li><p>在Java中，并没有无符号整型（Unsigned）的基本数据类型。转换成无符号<code>Byte.toUnsignedInt(-1)</code>=255，（无符号 0-255）</p></li></ol></blockquote></li></ol><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Weekday</span> <span class="token punctuation">&#123;</span>    SUN<span class="token punctuation">,</span> MON<span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>小知识：</p><ol><li><p>在Java中，我们可以通过<code>static final</code>来定义常量。可以用enum替代，</p><p>Java使用<code>enum</code>定义枚举类型，它被编译器编译为<code>final class Xxx extends Enum &#123; … &#125;</code>；</p></li><li><p><code>enum</code>常量本身带有类型信息，即<code>Weekday.SUN</code>类型是<code>Weekday</code>，编译器会自动检查出类型错误。</p></li><li><p><code>enum</code>定义的类型就是<code>class</code>，每个枚举的值都是<code>class</code>实例。</p><ul><li>定义的<code>enum</code>类型总是继承自<code>java.lang.Enum</code>，且无法被继承；</li><li>只能定义出<code>enum</code>的实例，而无法通过<code>new</code>操作符创建<code>enum</code>的实例；</li><li>定义的每个实例都是引用类型的唯一实例；</li><li>可以将<code>enum</code>类型用于<code>switch</code>语句。</li></ul></li><li><p>```java<br>String s = Weekday.SUN.name(); // “SUN” 返回常量名<br>int n = Weekday.MON.ordinal(); // 1 返回定义的常量的顺序</p><pre class="line-numbers language-none"><code class="language-none">5. 因为&#96;enum&#96;本身是&#96;class&#96;，所以我们可以定义&#96;private&#96;的构造方法，并且，给每个枚举常量添加字段。然后通过构造方法在类中实例枚举对象   &#96;&#96;&#96;java   enum Weekday &#123;       MON(1, &quot;星期一&quot;), TUE(2, &quot;星期二&quot;), WED(3, &quot;星期三&quot;), THU(4, &quot;星期四&quot;), FRI(5, &quot;星期五&quot;), SAT(6, &quot;星期六&quot;), SUN(0, &quot;星期日&quot;);          public final int dayValue; &#x2F;&#x2F; 枚举类的字段也可以是非final类型，即可以在运行期修改，但是不推荐这样做！       private final String chinese;          private Weekday(int dayValue, String chinese) &#123;           this.dayValue &#x3D; dayValue;           this.chinese &#x3D; chinese;       &#125;          @Override       public String toString() &#123;           return this.chinese;       &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote><h3 id="纪录类"><a href="#纪录类" class="headerlink" title="纪录类"></a>纪录类</h3><p>使用<code>String</code>、<code>Integer</code>等类型的时候，这些类型都是不变类，一个不变类具有以下特点：</p><ol><li>定义class时使用<code>final</code>，无法派生子类；</li><li>每个字段使用<code>final</code>，保证创建实例后无法修改任何字段。</li></ol><p>使用<code>record</code>关键字，可以一行写出一个不变类。</p><p>从Java 14开始，提供新的<code>record</code>关键字，可以非常方便地定义Data Class：</p><ul><li>使用<code>record</code>定义的是不变类；</li><li>可以编写Compact Constructor（全参构造器？？）对参数进行验证；</li><li>可以定义静态方法。</li></ul><h3 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h3><p>小结</p><ol><li><code>BigInteger</code>用于表示任意大小的整数；</li><li><code>BigInteger</code>是不变类，并且继承自<code>Number</code>；</li><li>将<code>BigInteger</code>转换成基本类型时可使用<code>longValueExact()</code>等方法保证结果准确。</li></ol><h3 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h3><ol><li><p>如果查看<code>BigDecimal</code>的源码，可以发现，实际上一个<code>BigDecimal</code>是通过一个<code>BigInteger</code>和一个<code>scale</code>来表示的，即<code>BigInteger</code>表示一个完整的整数，而<code>scale</code>表示小数位数。</p></li><li><p><code>BigDecimal</code>用于表示精确的小数，常用于财务计算；</p></li><li><p>比较<code>BigDecimal</code>的值是否相等，必须使用<code>compareTo()</code>而不能使用<code>equals()</code>。</p></li></ol><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="Java的异常"><a href="#Java的异常" class="headerlink" title="Java的异常"></a>Java的异常</h3><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">                     ┌───────────┐                     │  Object   │                     └───────────┘                           ▲                           │                     ┌───────────┐                     │ Throwable │                     └───────────┘                           ▲                 ┌─────────┴─────────┐                 │                   │           ┌───────────┐       ┌───────────┐           │   Error   │       │ Exception │           └───────────┘       └───────────┘                 ▲                   ▲         ┌───────┘              ┌────┴──────────┐         │                      │               │┌─────────────────┐    ┌─────────────────┐┌───────────┐│OutOfMemoryError │... │RuntimeException ││IOException│...└─────────────────┘    └─────────────────┘└───────────┘                                ▲                    ┌───────────┴─────────────┐                    │                         │         ┌─────────────────────┐ ┌─────────────────────────┐         │NullPointerException │ │IllegalArgumentException │...         └─────────────────────┘ └─────────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译器对RuntimeException及其子类不做强制捕获要求，不是指应用程序本身不应该捕获并处理RuntimeException。是否需要捕获，具体问题具体分析。</p><ul><li><code>Error</code>是无需捕获的严重错误，<code>Exception</code>是应该捕获的可处理的错误；</li><li><code>RuntimeException</code>无需强制捕获，非<code>RuntimeException</code>（Checked Exception）需强制捕获，或者用<code>throws</code>声明；</li><li>不推荐捕获了异常但不进行任何处理。</li></ul><p>某些情况下，可以没有<code>catch</code>，只使用<code>try ... finally</code>结构。因为方法声明了可能抛出的异常，所以可以不写<code>catch</code>。</p><p>在<code>catch</code>中抛出异常，不会影响<code>finally</code>的执行。JVM会先执行<code>finally</code>，然后抛出异常。</p><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p>这说明<code>finally</code>抛出异常后，原来在<code>catch</code>中准备抛出的异常就“消失”了，因为只能抛出一个异常。没有被抛出的异常称为“被屏蔽”的异常（Suppressed Exception）。</p><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>在一个大型项目中，可以自定义新的异常类型，但是，保持一个合理的异常继承体系是非常重要的。</p><p>一个常见的做法是自定义一个<code>BaseException</code>作为“根异常”，然后，派生出各种业务类型的异常。</p><p><code>BaseException</code>需要从一个适合的<code>Exception</code>派生，通常建议从<code>RuntimeException</code>派生。自定义的<code>BaseException</code>应该提供多个构造方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><blockquote><p>小知识：</p><ol><li>断言是一种调试方式，断言失败会抛出<code>AssertionError</code>，只能在开发和测试阶段启用断言；</li><li><code>assert x &gt;= 0 : &quot;x must &gt;= 0&quot;;</code>断言失败的时候，<code>AssertionError</code>会带上消息<code>x must &gt;= 0</code>，更加便于调试。</li><li>对可恢复的错误不能使用断言，而应该抛出异常；</li><li>断言很少被使用，更好的方法是编写单元测试。JUnit</li></ol></blockquote><h3 id="使用JDK-Logging"><a href="#使用JDK-Logging" class="headerlink" title="使用JDK Logging"></a>使用JDK Logging</h3><p>JDK的Logging定义了七个级别从严重到普通：SEVERE，WARNING，INFO，CONFIG，FINE，FINER，FINEST，默认级别是INFO</p><p>Logging系统在JVM启动时读取配置文件并完成初始化，一旦开始运行<code>main()</code>方法，就无法修改配置；</p><p>配置不太方便，需要在JVM启动时传递参数<code>-Djava.util.logging.config.file=&lt;config-file-name&gt;</code>。</p><p>因此，Java标准库内置的Logging使用并不是非常广泛。</p><blockquote><p>小总结：</p><ol><li>日志是为了替代<code>System.out.println()</code>，可以定义格式，重定向到文件等；</li><li>日志可以存档，便于追踪问题；</li><li>日志记录可以按级别分类，便于打开或关闭某些级别；</li><li>可以根据配置文件调整日志，无需修改代码；</li><li>Java标准库提供了<code>java.util.logging</code>来实现日志功能。</li></ol></blockquote><h3 id="使用Commons-Logging"><a href="#使用Commons-Logging" class="headerlink" title="使用Commons Logging"></a>使用Commons Logging</h3><ol><li><p>Commons Logging是一个第三方日志库，它是由Apache创建的日志模块。</p></li><li><p>Commons Logging的特色是，它可以挂接不同的日志系统，并通过配置文件指定挂接的日志系统。默认情况下，Commons Loggin自动搜索并使用Log4j（Log4j是另一个流行的日志系统），==如果没有找到Log4j，再使用JDK Logging。==</p></li><li><p>使用Commons Logging只需要和两个类打交道，并且只有两步：</p><ul><li><p>第一步，通过<code>LogFactory</code>获取<code>Log</code>类的实例； </p></li><li><p>第二步，使用<code>Log</code>实例的方法打日志。</p></li><li><p>```java<br>Log log = LogFactory.getLog(getClass());<br>log.info(“start…”);<br>log.warn(“end.”);</p><p>// 使用log.error(String, Throwable)打印异常。<br>log.error(“got exception!”, e);</p><pre class="line-numbers language-none"><code class="language-none">Commons Logging定义了6个日志级别：- FATAL- ERROR- WARNING- INFO- DEBUG- TRACE默认级别是&#96;INFO&#96;。### 使用Log4jCommons Logging，可以作为“日志接口”来使用。而真正的“日志实现”可以使用Log4j。以XML配置为例，使用Log4j的时候，我们把一个&#96;log4j2.xml&#96;的文件放到&#96;classpath&#96;下就可以让Log4j读取配置文件并按照我们的配置来输出日志。&#96;log4j2.xml&#96;&#96;&#96;&#96;xml&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;Configuration&gt;&lt;Properties&gt;        &lt;!-- 定义日志格式 --&gt;&lt;Property name&#x3D;&quot;log.pattern&quot;&gt;%d&#123;MM-dd HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125;%n%msg%n%n&lt;&#x2F;Property&gt;        &lt;!-- 定义文件名变量 --&gt;&lt;Property name&#x3D;&quot;file.err.filename&quot;&gt;log&#x2F;err.log&lt;&#x2F;Property&gt;&lt;Property name&#x3D;&quot;file.err.pattern&quot;&gt;log&#x2F;err.%i.log.gz&lt;&#x2F;Property&gt;&lt;&#x2F;Properties&gt;    &lt;!-- 定义Appender，即目的地 --&gt;&lt;Appenders&gt;        &lt;!-- 定义输出到屏幕 --&gt;&lt;Console name&#x3D;&quot;console&quot; target&#x3D;&quot;SYSTEM_OUT&quot;&gt;            &lt;!-- 日志格式引用上面定义的log.pattern --&gt;&lt;PatternLayout pattern&#x3D;&quot;$&#123;log.pattern&#125;&quot; &#x2F;&gt;&lt;&#x2F;Console&gt;        &lt;!-- 定义输出到文件,文件名引用上面定义的file.err.filename --&gt;&lt;RollingFile name&#x3D;&quot;err&quot; bufferedIO&#x3D;&quot;true&quot; fileName&#x3D;&quot;$&#123;file.err.filename&#125;&quot; filePattern&#x3D;&quot;$&#123;file.err.pattern&#125;&quot;&gt;&lt;PatternLayout pattern&#x3D;&quot;$&#123;log.pattern&#125;&quot; &#x2F;&gt;&lt;Policies&gt;                &lt;!-- 根据文件大小自动切割日志 --&gt;&lt;SizeBasedTriggeringPolicy size&#x3D;&quot;1 MB&quot; &#x2F;&gt;&lt;&#x2F;Policies&gt;            &lt;!-- 保留最近10份 --&gt;&lt;DefaultRolloverStrategy max&#x3D;&quot;10&quot; &#x2F;&gt;&lt;&#x2F;RollingFile&gt;&lt;&#x2F;Appenders&gt;&lt;Loggers&gt;&lt;Root level&#x3D;&quot;info&quot;&gt;            &lt;!-- 对info级别的日志，输出到console --&gt;&lt;AppenderRef ref&#x3D;&quot;console&quot; level&#x3D;&quot;info&quot; &#x2F;&gt;            &lt;!-- 对error级别的日志，输出到err，即上面定义的RollingFile --&gt;&lt;AppenderRef ref&#x3D;&quot;err&quot; level&#x3D;&quot;error&quot; &#x2F;&gt;&lt;&#x2F;Root&gt;&lt;&#x2F;Loggers&gt;&lt;&#x2F;Configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="使用SLF4J和Logback"><a href="#使用SLF4J和Logback" class="headerlink" title="使用SLF4J和Logback"></a>使用SLF4J和Logback</h3><p>Commons Logging和Log4j这一对好基友，它们一个负责充当日志API，一个负责实现日志底层，搭配使用非常便于开发。</p><p>SLF4J类似于Commons Logging，也是一个日志接口，而Logback类似于Log4j，是一个日志的实现。</p><p><code>logback.xml</code></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>log/output.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.FixedWindowRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>log/output.log.%i<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>triggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MaxFileSize</span><span class="token punctuation">></span></span>1MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MaxFileSize</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>triggeringPolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SLF4J和Logback可以取代Commons Logging和Log4j；</p><p>始终使用SLF4J的接口写入日志，使用Logback只需要配置，不需要修改代码。</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射就是Reflection，Java的反射是指程序在运行期可以拿到一个对象的所有信息。</p><p>所以，反射是为了解决在运行期，对某个实例一无所知的情况下，如何调用其方法。</p><ul><li>网上有个很有意思的解释,java是个大美女,但大美女有很多事情是规定不让你做的.反射就是把枪,有枪在手,你想让大美女做什么事就做什么事,脱光了都没问题.希望这段解释能帮助到看到的人</li></ul><p> 《Spring 中的反射与反射的原理》<a href="https://depp.wang/2020/05/05/reflection-in-spring-and-reflection-principle/">https://depp.wang/2020/05/05/reflection-in-spring-and-reflection-principle/</a></p><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>一个<code>Class</code>实例包含了该<code>class</code>的所有完整信息：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">┌───────────────────────────┐│      Class Instance       │──────&gt; String├───────────────────────────┤│name &#x3D; &quot;java.lang.String&quot;  │├───────────────────────────┤│package &#x3D; &quot;java.lang&quot;      │├───────────────────────────┤│super &#x3D; &quot;java.lang.Object&quot; │├───────────────────────────┤│interface &#x3D; CharSequence...│├───────────────────────────┤│field &#x3D; value[],hash,...   │├───────────────────────────┤│method &#x3D; indexOf()...      │└───────────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>由于JVM为每个加载的<code>class</code>创建了对应的<code>Class</code>实例，并在实例中保存了该<code>class</code>的所有信息，包括类名、包名、父类、实现的接口、所有方法、字段等，因此，如果获取了某个<code>Class</code>实例，我们就可以通过这个<code>Class</code>实例获取到该实例对应的<code>class</code>的所有信息。</p><p>这种通过<code>Class</code>实例获取<code>class</code>信息的方法称为反射（Reflection）。</p></li><li><p>如何获取一个<code>class</code>的<code>Class</code>实例？有三个方法：</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方法一：直接通过一个class的静态变量class获取：</span><span class="token class-name">Class</span> cls <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">// 方法二：如果我们有一个实例变量，可以通过该实例变量提供的getClass()方法获取：</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token class-name">Class</span> cls <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法三：如果知道一个class的完整类名，可以通过静态方法Class.forName()获取：</span><span class="token class-name">Class</span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 因为<code>Class</code>实例在JVM中是唯一的，所以，上述方法获取的<code>Class</code>实例是同一个实例。</p></li><li><p>通过<code>Class.newInstance()</code>可以创建类实例，它的局限是：只能调用<code>public</code>的无参数构造方法。带参数的构造方法，或者非<code>public</code>的构造方法都无法通过<code>Class.newInstance()</code>被调用。</p></li><li><p>动态加载<code>class</code>的特性对于Java程序非常重要。利用JVM动态加载<code>class</code>的特性，我们才能在运行期根据条件加载不同的实现类。</p></li></ol><blockquote><p>小结</p><ol><li>JVM为每个加载的<code>class</code>及<code>interface</code>创建了对应的<code>Class</code>实例来保存<code>class</code>及<code>interface</code>的所有信息；</li><li>获取一个<code>class</code>对应的<code>Class</code>实例后，就可以获取该<code>class</code>的所有信息；</li><li>通过Class实例获取<code>class</code>信息的方法称为反射（Reflection）；</li><li>JVM总是动态加载<code>class</code>，可以在运行期根据条件来控制加载class。</li></ol></blockquote><h3 id="访问字段"><a href="#访问字段" class="headerlink" title="访问字段"></a>访问字段</h3><p><code>Class</code>类提供了以下几个方法来获取字段：</p><ul><li>Field getField(name)：根据字段名获取某个public的field（包括父类）</li><li>Field getDeclaredField(name)：根据字段名获取当前类的某个field（不包括父类）</li><li>Field[] getFields()：获取所有public的field（包括父类）</li><li>Field[] getDeclaredFields()：获取当前类的所有field（不包括父类）</li></ul><p>一个<code>Field</code>对象包含了一个字段的所有信息：</p><ul><li><code>getName()</code>：返回字段名称，例如，<code>&quot;name&quot;</code>；</li><li><code>getType()</code>：返回字段类型，也是一个<code>Class</code>实例，例如，<code>String.class</code>；</li><li><code>getModifiers()</code>：返回字段的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。</li></ul><blockquote><ol><li>先获取<code>Class</code>实例，再获取<code>Field</code>实例，然后，用<code>Field.get(Object)</code>获取指定实例的指定字段的值。</li><li>调用<code>Field.setAccessible(true)</code>的意思是，别管这个字段是不是<code>public</code>，一律允许访问。</li><li>而反射是一种非常规的用法，使用反射，首先代码非常繁琐，其次，它更多地是给工具或者底层框架来使用，目的是在不知道目标实例任何信息的情况下，获取特定字段的值。</li><li>设置字段值是通过<code>Field.set(Object, Object)</code>实现的，其中第一个<code>Object</code>参数是指定的实例，第二个<code>Object</code>参数是待修改的值。</li></ol><p>此外，<code>setAccessible(true)</code>可能会失败。如果JVM运行期存在<code>SecurityManager</code>，那么它会根据规则进行检查，有可能阻止<code>setAccessible(true)</code>。例如，某个<code>SecurityManager</code>可能不允许对<code>java</code>和<code>javax</code>开头的<code>package</code>的类调用<code>setAccessible(true)</code>，这样可以保证JVM核心库的安全。</p></blockquote><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h3><p>通过<code>Class</code>实例获取所有<code>Method</code>信息：</p><ul><li><code>Method getMethod(name, Class...)</code>：获取某个<code>public</code>的<code>Method</code>（包括父类）</li><li><code>Method getDeclaredMethod(name, Class...)</code>：获取当前类的某个<code>Method</code>（不包括父类）</li><li><code>Method[] getMethods()</code>：获取所有<code>public</code>的<code>Method</code>（包括父类）</li><li><code>Method[] getDeclaredMethods()</code>：获取当前类的所有<code>Method</code>（不包括父类）</li></ul><p>一个<code>Method</code>对象包含一个方法的所有信息：</p><ul><li><code>getName()</code>：返回方法名称，例如：<code>&quot;getScore&quot;</code>；</li><li><code>getReturnType()</code>：返回方法返回值类型，也是一个Class实例，例如：<code>String.class</code>；</li><li><code>getParameterTypes()</code>：返回方法的参数类型，是一个Class数组，例如：<code>&#123;String.class, int.class&#125;</code>；</li><li><code>getModifiers()</code>：返回方法的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。</li></ul><blockquote><ol><li>通过<code>Method</code>实例可以调用某个对象的方法：<code>Object invoke(Object instance, Object... parameters)</code>；</li><li>调用静态方法时，由于无需指定实例对象，所以<code>invoke</code>方法传入的第一个参数永远为<code>null</code>。</li><li>通过设置<code>setAccessible(true)</code>来访问非<code>public</code>方法；</li><li>通过反射调用方法时，仍然遵循多态原则。：即总是调用实际类型的覆写方法（如果存在）。</li></ol></blockquote><h3 id="调用构造方法"><a href="#调用构造方法" class="headerlink" title="调用构造方法"></a>调用构造方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方式一</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式二，获取构造方法Integer(int):</span><span class="token class-name">Constructor</span> cons1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用构造方法:</span><span class="token class-name">Integer</span> n1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> cons1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过Class实例获取Constructor的方法如下：</p><ul><li><code>getConstructor(Class...)</code>：获取某个<code>public</code>的<code>Constructor</code>；</li><li><code>getDeclaredConstructor(Class...)</code>：获取某个<code>Constructor</code>；</li><li><code>getConstructors()</code>：获取所有<code>public</code>的<code>Constructor</code>；</li><li><code>getDeclaredConstructors()</code>：获取所有<code>Constructor</code>。</li></ul><h3 id="获取继承关系"><a href="#获取继承关系" class="headerlink" title="获取继承关系"></a>获取继承关系</h3><blockquote><p>小结</p><ol><li><p>通过<code>Class</code>对象可以获取继承关系：</p><ul><li><code>Class getSuperclass()</code>：获取父类类型；</li><li><code>Class[] getInterfaces()</code>：获取当前类实现的所有接口。</li></ul></li><li><p>通过<code>Class</code>对象的<code>isAssignableFrom()</code>方法可以判断一个向上转型是否可以实现。</p></li></ol></blockquote><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 根据方法名字判断是哪一个方法，也就是所有方法调用都会走到这里</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"morning"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Good morning, "</span> <span class="token operator">+</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Hello</span> hello <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Hello</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span> <span class="token comment">// 动态代理</span>            <span class="token class-name">Hello</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 传入ClassLoader</span>            <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Hello</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 传入要实现的接口</span>            handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入处理调用方法的InvocationHandler</span>        hello<span class="token punctuation">.</span><span class="token function">morning</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">morning</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在运行期动态创建一个<code>interface</code>实例的方法如下：</p><ol><li>定义一个<code>InvocationHandler</code>实例，它负责实现接口的方法调用；</li><li>通过<code>Proxy.newProxyInstance()</code>创建<code>interface</code>实例，它需要3个参数：<ol><li>使用的<code>ClassLoader</code>，通常就是接口类的<code>ClassLoader</code>；</li><li>需要实现的接口数组，至少需要传入一个接口进去；</li><li>用来处理接口方法调用的<code>InvocationHandler</code>实例。</li></ol></li><li>将返回的<code>Object</code>强制转型为接口。</li></ol><p>动态代理实际上是JVM在运行期动态创建class字节码并加载的过程，</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><p>什么是注解（Annotation）？注解是放在Java源码的类、方法、字段、参数前的一种特殊“注释”。</p><p>注释会被编译器直接忽略，注解则可以被编译器打包进入class文件，因此，注解是一种用作标注的“元数据”。</p><p>小结</p><ol><li>注解（Annotation）是Java语言用于工具处理的标注：</li><li>注解可以配置参数，没有指定配置的参数使用默认值；</li><li>如果参数名称是<code>value</code>，且只有一个参数，那么可以省略参数名称。</li></ol><h3 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h3><p>Java语言使用<code>@interface</code>语法来定义注解（<code>Annotation</code>），注解的参数类似无参数方法，可以用<code>default</code>设定一个默认值（强烈推荐）。最常用的参数应当命名为<code>value</code>。</p><p>有一些注解可以修饰其他注解，这些注解就称为元注解（meta annotation）。Java标准库已经定义了一些元注解，我们只需要使用元注解，通常不需要自己去编写元注解。</p><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><p>最常用的元注解是<code>@Target</code>。使用<code>@Target</code>可以定义<code>Annotation</code>能够被应用于源码的哪些位置：</p><ul><li>类或接口：<code>ElementType.TYPE</code>；</li><li>字段：<code>ElementType.FIELD</code>；</li><li>方法：<code>ElementType.METHOD</code>；</li><li>构造方法：<code>ElementType.CONSTRUCTOR</code>；</li><li>方法参数：<code>ElementType.PARAMETER</code>。</li></ul><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><p>另一个重要的元注解<code>@Retention</code>定义了<code>Annotation</code>的生命周期：</p><ul><li>仅编译期：<code>RetentionPolicy.SOURCE</code>；</li><li>仅class文件：<code>RetentionPolicy.CLASS</code>；</li><li>运行期：<code>RetentionPolicy.RUNTIME</code>。</li></ul><p>如果<code>@Retention</code>不存在，则该<code>Annotation</code>默认为<code>CLASS</code>。因为通常我们自定义的<code>Annotation</code>都是<code>RUNTIME</code>，所以，务必要加上<code>@Retention(RetentionPolicy.RUNTIME)</code>这个元注解</p><h4 id="Repeatable"><a href="#Repeatable" class="headerlink" title="@Repeatable"></a>@Repeatable</h4><p>使用<code>@Repeatable</code>这个元注解可以定义<code>Annotation</code>是否可重复。这个注解应用不是特别广泛。</p><h4 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h4><p>使用<code>@Inherited</code>定义子类是否可继承父类定义的<code>Annotation</code>。<code>@Inherited</code>仅针对<code>@Target(ElementType.TYPE)</code>类型的<code>annotation</code>有效，并且仅针对<code>class</code>的继承，对<code>interface</code>的继承无效：</p><h3 id="处理注解"><a href="#处理注解" class="headerlink" title="处理注解"></a>处理注解</h3><p>Java的注解本身对代码逻辑没有任何影响。根据<code>@Retention</code>的配置：</p><ul><li><code>SOURCE</code>类型的注解在编译期就被丢掉了；</li><li><code>CLASS</code>类型的注解仅保存在class文件中，它们不会被加载进JVM；</li><li><code>RUNTIME</code>类型的注解会被加载进JVM，并且在运行期可以被程序读取。</li></ul><p>如何使用注解完全由工具决定。<code>SOURCE</code>类型的注解主要由编译器使用，因此我们一般只使用，不编写。<code>CLASS</code>类型的注解主要由底层工具库使用，涉及到class的加载，一般我们很少用到。只有<code>RUNTIME</code>类型的注解不但要使用，还经常需要编写。</p><p>使用反射API读取Annotation：</p><ul><li><code>Class.getAnnotation(Class)</code></li><li><code>Field.getAnnotation(Class)</code></li><li><code>Method.getAnnotation(Class)</code></li><li><code>Constructor.getAnnotation(Class)</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">,</span> <span class="token class-name">ReflectiveOperationException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 遍历所有Field:</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取Field定义的@Range:</span>        <span class="token class-name">Range</span> range <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Range</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果@Range存在:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>range <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取Field的值:</span>            <span class="token class-name">Object</span> value <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果值是String:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>                <span class="token comment">// 判断值是否满足@Range的min/max:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> range<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> range<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Invalid field: "</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型（）"><a href="#泛型（）" class="headerlink" title="泛型（）"></a>泛型（）</h2><p>万能类型</p><h3 id="什么是泛型"><a href="#什么是泛型" class="headerlink" title="什么是泛型"></a>什么是泛型</h3><p>因此，泛型就是定义一种模板，例如<code>ArrayList&lt;T&gt;</code>，然后在代码中为用到的类创建对应的<code>ArrayList&lt;类型&gt;</code>，由编译器针对类型作检查。</p><p>小结</p><ol><li>泛型就是编写模板代码来适应任意类型；</li><li>泛型的好处是使用时不必对类型进行强制转换，它通过编译器对类型进行检查；</li><li>注意泛型的继承关系：可以把<code>ArrayList&lt;Integer&gt;</code>向上转型为<code>List&lt;Integer&gt;</code>（<code>T</code>不能变！），但不能把<code>ArrayList&lt;Integer&gt;</code>向上转型为<code>ArrayList&lt;Number&gt;</code>（<code>T</code>不能变成父类）。</li></ol><h3 id="编写泛型"><a href="#编写泛型" class="headerlink" title="编写泛型"></a>编写泛型</h3><p>对于静态方法，我们可以单独改写为“泛型”方法，只需要使用另一个类型即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 静态泛型方法应该使用其他类型区分:</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">></span></span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">></span></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">K</span> first<span class="token punctuation">,</span> <span class="token class-name">K</span> last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>静态方法不能引用泛型类型<code>&lt;T&gt;</code>，必须定义其他类型（例如<code>&lt;K&gt;</code>）来实现静态泛型方法；</p><p>泛型可以同时定义多种类型，例如<code>Map&lt;K, V&gt;</code>。</p><h3 id="擦拭法"><a href="#擦拭法" class="headerlink" title="擦拭法"></a>擦拭法</h3><p>所谓擦拭法是指，虚拟机对泛型其实一无所知，所有的工作都是编译器做的。</p><p>因此，Java使用擦拭法实现泛型，导致了：</p><ul><li>编译器把类型<code>&lt;T&gt;</code>视为<code>Object</code>；</li><li>编译器根据<code>&lt;T&gt;</code>实现安全的强制转型。</li></ul><p>局限一：<code>&lt;T&gt;</code>不能是基本类型，例如<code>int</code>，因为实际类型是<code>Object</code>，<code>Object</code>类型无法持有基本类型：</p><p>局限二：无法取得带泛型的<code>Class</code>。例如：<code>Pair&lt;String&gt;.class</code>；</p><p>局限三：无法判断带泛型的类型，例如：<code>x instanceof Pair&lt;String&gt;</code>；</p><p>局限四：不能实例化<code>T</code>类型，例如：<code>new T()</code>。要想实例化<code>T</code>类型，我们必须借助额外的<code>Class&lt;T&gt;</code>参数</p><p>泛型方法要防止重复定义方法，例如：<code>public boolean equals(T obj)</code>；</p><p>子类可以获取父类的泛型类型<code>&lt;T&gt;</code>。例如，<code>class IntPair extends Pair&lt;Integer&gt;</code>子类是Integer类型</p><h3 id="extends通配符（）"><a href="#extends通配符（）" class="headerlink" title="extends通配符（）"></a>extends通配符（）</h3><p>我们前面已经讲到了泛型的继承关系：<code>Pair&lt;Integer&gt;</code>不是<code>Pair&lt;Number&gt;</code>的子类。<code>&lt;Number&gt;</code>只接受Number类型的参数不接受子类型Integer</p><p>这种使用<code>&lt;? extends Number&gt;</code>的泛型定义称之为上界通配符（Upper Bounds Wildcards），即把泛型类型<code>T</code>的上界限定在<code>Number</code>了。</p><p><code>&lt;? extends Number&gt;</code>通配符的一个重要限制：方法参数签名<code>setFirst(? extends Number)</code>无法传递任何<code>Number</code>的子类型给<code>setFirst(? extends Number)</code>。</p><blockquote><p>小总结：</p><p>使用类似<code>&lt;? extends Number&gt;</code>通配符作为方法参数时表示：</p><ul><li>方法内部可以调用获取<code>Number</code>引用的方法，例如：<code>Number n = obj.getFirst();</code>；</li><li>方法内部无法调用传入<code>Number</code>引用的方法（<code>null</code>除外），例如：<code>obj.setFirst(Number n);</code>。</li></ul><p>即一句话总结：使用<code>extends</code>通配符表示可以读，不能写。</p><p>使用类似<code>&lt;T extends Number&gt;</code>定义泛型类时表示：</p><ul><li>泛型类型限定为<code>Number</code>以及<code>Number</code>的子类。</li></ul></blockquote><h3 id="uper通配符（）"><a href="#uper通配符（）" class="headerlink" title="uper通配符（）"></a>uper通配符（）</h3><p>我们再回顾一下<code>extends</code>通配符。作为方法参数，<code>&lt;? extends T&gt;</code>类型和<code>&lt;? super T&gt;</code>类型的区别在于：</p><ul><li><code>&lt;? extends T&gt;</code>允许调用读方法<code>T get()</code>获取<code>T</code>的引用，但不允许调用写方法<code>set(T)</code>传入<code>T</code>的引用（传入<code>null</code>除外）；</li><li><code>&lt;? super T&gt;</code>允许调用写方法<code>set(T)</code>传入<code>T</code>的引用，但不允许调用读方法<code>T get()</code>获取<code>T</code>的引用（获取<code>Object</code>除外）。</li></ul><p>一个是允许读不允许写，另一个是允许写不允许读。</p><h3 id="泛型和反射（）"><a href="#泛型和反射（）" class="headerlink" title="泛型和反射（）"></a>泛型和反射（）</h3><p>部分反射API是泛型，例如：<code>Class&lt;T&gt;</code>，<code>Constructor&lt;T&gt;</code>；</p><p>可以声明带泛型的数组，但不能直接创建带泛型的数组，必须强制转型；</p><p>可以通过<code>Array.newInstance(Class&lt;T&gt;, int)</code>创建<code>T[]</code>数组，需要强制转型；</p><p>同时使用泛型和可变参数时需要特别小心。</p><h2 id="集合（）"><a href="#集合（）" class="headerlink" title="集合（）"></a>集合（）</h2><h3 id="Java集合简介"><a href="#Java集合简介" class="headerlink" title="Java集合简介"></a>Java集合简介</h3><p>什么是集合（Collection）？集合就是“由若干个确定的元素所构成的整体”。</p><p>在Java中，如果一个Java对象可以在内部持有若干其他Java对象，并对外提供访问接口，我们把这种Java对象称为集合。很显然，Java的数组可以看作是一种集合</p><p>不同集合的数据结构及特性不同，所有我们需要除数组外的其他集合。</p><p>Java的集合类定义在<code>java.util</code>包中，支持泛型，主要提供了3种集合类，包括<code>List</code>，<code>Set</code>和<code>Map</code>。Java集合使用统一的<code>Iterator</code>遍历，尽量不要使用遗留接口。</p><h3 id="使用List"><a href="#使用List" class="headerlink" title="使用List"></a>使用List</h3><p><code>ArrayList</code>把添加和删除的操作封装起来，让我们操作<code>List</code>类似于操作数组，却不用关心内部元素如何移动。本质是数组。</p><ul><li>在末尾添加一个元素：<code>boolean add(E e)</code></li><li>在指定索引添加一个元素：<code>boolean add(int index, E e)</code></li><li>删除指定索引的元素：<code>E remove(int index)</code></li><li>删除某个元素：<code>boolean remove(Object e)</code></li><li>获取指定索引的元素：<code>E get(int index)</code></li><li>获取链表大小（包含元素的个数）：`int size()</li></ul><p><code>LinkedList</code>通过“链表”也实现了List接口。在<code>LinkedList</code>中，它的内部每个元素都指向下一个元素，通常情况下，我们总是优先使用<code>ArrayList</code>。</p><p>除了使用<code>ArrayList</code>和<code>LinkedList</code>，我们还可以通过<code>List</code>接口提供的<code>of()</code>方法，根据给定元素快速创建<code>List</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 但是List.of()方法不接受null值，如果传入null，会抛出NullPointerException异常。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实际上，只要实现了<code>Iterable</code>接口的集合类都可以直接用<code>for each</code>循环来遍历，Java编译器本身并不知道如何遍历集合对象，但它会自动把<code>for each</code>循环变成<code>Iterator</code>的调用，原因就在于<code>Iterable</code>接口定义了一个<code>Iterator&lt;E&gt; iterator()</code>方法，强迫集合类必须返回一个<code>Iterator</code>实例。</p><p>把<code>List</code>变为<code>Array</code>有三种方法，</p><ol><li><p>第一种是调用<code>toArray()</code>方法直接返回一个<code>Object[]</code>数组：<code>Object[] array = list.toArray();</code></p></li><li><p>第二种方式是给<code>toArray(T[])</code>传入一个类型相同的<code>Array</code>，<code>List</code>内部自动把元素复制到传入的<code>Array</code>中：<code>Integer[] array = list.toArray(new Integer[3]);</code></p><p>如果传入的数组不够大，那么<code>List</code>内部会创建一个新的刚好够大的数组，填充后返回；如果传入的数组比<code>List</code>元素还要多，那么填充完元素后，剩下的数组元素一律填充<code>null</code>。</p></li><li><p>最后一种更简洁的写法是通过<code>List</code>接口定义的<code>T[] toArray(IntFunction&lt;T[]&gt; generator)</code>方法：<code>Integer[] array = list.toArray(Integer[]::new);</code>函数式编程</p></li></ol><p>反过来，把<code>Array</code>变为<code>List</code>就简单多了，通过<code>List.of(T...)</code>方法最简单：</p><p>对于JDK 11之前的版本，可以使用<code>Arrays.asList(T...)</code>方法把数组转换成<code>List</code>。</p><p>要注意的是，返回的<code>List</code>不一定就是<code>ArrayList</code>或者<code>LinkedList</code>，因为<code>List</code>只是一个接口，如果我们调用<code>List.of()</code>，它返回的是一个只读<code>List</code>：</p><h3 id="编写equals方法"><a href="#编写equals方法" class="headerlink" title="编写equals方法"></a>编写equals方法</h3><p>如何正确编写<code>equals()</code>方法？<code>equals()</code>方法要求我们必须满足以下条件：</p><ul><li>自反性（Reflexive）：对于非<code>null</code>的<code>x</code>来说，<code>x.equals(x)</code>必须返回<code>true</code>；</li><li>对称性（Symmetric）：对于非<code>null</code>的<code>x</code>和<code>y</code>来说，如果<code>x.equals(y)</code>为<code>true</code>，则<code>y.equals(x)</code>也必须为<code>true</code>；</li><li>传递性（Transitive）：对于非<code>null</code>的<code>x</code>、<code>y</code>和<code>z</code>来说，如果<code>x.equals(y)</code>为<code>true</code>，<code>y.equals(z)</code>也为<code>true</code>，那么<code>x.equals(z)</code>也必须为<code>true</code>；</li><li>一致性（Consistent）：对于非<code>null</code>的<code>x</code>和<code>y</code>来说，只要<code>x</code>和<code>y</code>状态不变，则<code>x.equals(y)</code>总是一致地返回<code>true</code>或者<code>false</code>；</li><li>对<code>null</code>的比较：即<code>x.equals(null)</code>永远返回<code>false</code>。</li></ul><p>因此，我们总结一下<code>equals()</code>方法的正确编写方法：</p><ol><li>先确定实例“相等”的逻辑，即哪些字段相等，就认为实例相等；</li><li>用<code>instanceof</code>判断传入的待比较的<code>Object</code>是不是当前类型，如果是，继续比较，否则，返回<code>false</code>；</li><li>对引用类型用<code>Objects.equals()</code>比较，对基本类型直接用<code>==</code>比较。</li></ol><p>使用<code>Objects.equals()</code>比较两个引用类型是否相等的目的是省去了判断<code>null</code>的麻烦。两个引用类型都是<code>null</code>时它们也是相等的。</p><p>如果不调用<code>List</code>的<code>contains()</code>、<code>indexOf()</code>这些方法，那么放入的元素就不需要实现<code>equals()</code>方法。</p><h3 id="使用Map"><a href="#使用Map" class="headerlink" title="使用Map"></a>使用Map</h3><blockquote><p>小知识：</p><ol><li><code>Map&lt;K, V&gt;</code>是一种键-值映射表，当我们调用<code>put(K key, V value)</code>方法时，就把<code>key</code>和<code>value</code>做了映射并放入<code>Map</code>。当我们调用<code>V get(K key)</code>时，就可以通过<code>key</code>获取到对应的<code>value</code>。如果<code>key</code>不存在，则返回<code>null</code>。和<code>List</code>类似，<code>Map</code>也是一个接口，最常用的实现类是<code>HashMap</code>。</li><li>实际上，<code>put()</code>方法的签名是<code>V put(K key, V value)</code>，如果放入的<code>key</code>已经存在，<code>put()</code>方法会返回被删除的旧的<code>value</code>，否则，返回<code>null</code>。</li><li><code>Map</code>和<code>List</code>不同的是，<code>Map</code>存储的是<code>key-value</code>的映射关系，并且，它<em>不保证顺序</em>。在遍历的时候，遍历的顺序既不一定是<code>put()</code>时放入的<code>key</code>的顺序，也不一定是<code>key</code>的排序顺序。</li></ol></blockquote><h3 id="编写equals和hashCode"><a href="#编写equals和hashCode" class="headerlink" title="编写equals和hashCode"></a>编写equals和hashCode</h3><p><code>HashMap</code>之所以能根据<code>key</code>直接拿到<code>value</code>，原因是它内部通过空间换时间的方法，用一个大数组存储所有<code>value</code>，并根据key直接计算出<code>value</code>应该存储在哪个索引</p><p>两个<code>key</code>内容相同，但不一定是同一个对象。</p><p>通过<code>key</code>计算索引的方式就是调用<code>key</code>对象的<code>hashCode()</code>方法，它返回一个<code>int</code>整数。<code>HashMap</code>正是通过这个方法直接定位<code>key</code>对应的<code>value</code>的索引，继而直接返回<code>value</code>。</p><p>因此，正确使用<code>Map</code>必须保证：</p><ol><li>作为<code>key</code>的对象必须正确覆写<code>equals()</code>方法，相等的两个<code>key</code>实例调用<code>equals()</code>必须返回<code>true</code>；</li><li>作为<code>key</code>的对象还必须正确覆写<code>hashCode()</code>方法，且<code>hashCode()</code>方法要严格遵循以下规范：<ul><li>如果两个对象相等，则两个对象的<code>hashCode()</code>必须相等；</li><li>如果两个对象不相等，则两个对象的<code>hashCode()</code>尽量不要相等。哈希冲突，导致效率降低。</li></ul></li></ol><h3 id="使用EnumMap"><a href="#使用EnumMap" class="headerlink" title="使用EnumMap"></a>使用EnumMap</h3><p>如果<code>Map</code>的key是<code>enum</code>类型，推荐使用<code>EnumMap</code>，既保证速度，也不浪费空间。</p><p>使用<code>EnumMap</code>的时候，根据面向抽象编程的原则，应持有<code>Map</code>接口。</p><h3 id="使用TreeMap"><a href="#使用TreeMap" class="headerlink" title="使用TreeMap"></a>使用TreeMap</h3><p>还有一种<code>Map</code>，它在内部会对Key进行排序，这种<code>Map</code>就是<code>SortedMap</code>。注意到<code>SortedMap</code>是接口，它的实现类是<code>TreeMap</code>。</p><p>使用<code>TreeMap</code>时，放入的Key必须实现<code>Comparable</code>接口。<code>String</code>、<code>Integer</code>这些类已经实现了<code>Comparable</code>接口，因此可以直接作为Key使用。</p><p><code>TreeMap</code>在比较两个Key是否相等时，依赖Key的<code>compareTo()</code>方法或者<code>Comparator.compare()</code>方法。在两个Key相等时，必须返回<code>0</code>。或者直接借助<code>Integer.compare(int, int)</code>也可以返回正确的比较结果。</p><h3 id="使用Properties"><a href="#使用Properties" class="headerlink" title="使用Properties"></a>使用Properties</h3><p>配置文件的特点是，它的Key-Value一般都是<code>String</code>-<code>String</code>类型的，因此我们完全可以用<code>Map&lt;String, String&gt;</code>来表示它。</p><p>因为配置文件非常常用，所以Java集合库提供了一个<code>Properties</code>来表示一组“配置”。由于历史遗留原因，<code>Properties</code>内部本质上是一个<code>Hashtable</code>，但我们只需要用到<code>Properties</code>自身关于读写配置的接口。</p><blockquote><p>用<code>Properties</code>读取配置文件，一共有三步：</p><ol><li>创建<code>Properties</code>实例；<code>Properties props = new Properties();</code></li><li>调用<code>load()</code>读取文件；<ul><li>props.load(getClass().getResourceAsStream(“/common/setting.properties”));</li><li><code>props.load(new FileInputStream(&quot;C:\\conf\\setting.properties&quot;));</code></li></ul></li><li>调用<code>getProperty()</code>获取配置。<code>String interval = props.getProperty(&quot;auto_save_interval&quot;, &quot;120&quot;);</code></li></ol><p>调用<code>getProperty()</code>获取配置时，如果key不存在，将返回<code>null</code>。我们还可以提供一个默认值，这样，当key不存在的时候，就返回默认值。</p><p>写入配置文件使用<code>store()</code>方法。</p><p>由于<code>load(InputStream)</code>默认总是以ASCII编码读取字节流，所以会导致读到乱码。我们需要用另一个重载方法<code>load(Reader)</code>读取。</p></blockquote><h3 id="使用Set"><a href="#使用Set" class="headerlink" title="使用Set"></a>使用Set</h3><p><code>Set</code>用于存储不重复的元素集合，它主要提供以下几个方法：</p><ul><li>将元素添加进<code>Set&lt;E&gt;</code>：<code>boolean add(E e)</code></li><li>将元素从<code>Set&lt;E&gt;</code>删除：<code>boolean remove(Object e)</code></li><li>判断是否包含元素：<code>boolean contains(Object e)</code></li></ul><p>因为放入<code>Set</code>的元素和<code>Map</code>的key类似，都要正确实现<code>equals()</code>和<code>hashCode()</code>方法，否则该元素无法正确地放入<code>Set</code>。</p><p>最常用的<code>Set</code>实现类是<code>HashSet</code>，实际上，<code>HashSet</code>仅仅是对<code>HashMap</code>的一个简单封装，</p><p><code>Set</code>接口并不保证有序，而<code>SortedSet</code>接口则保证元素是有序的：</p><ul><li><code>HashSet</code>是无序的，因为它实现了<code>Set</code>接口，并没有实现<code>SortedSet</code>接口；</li><li><code>TreeSet</code>是有序的，因为它实现了<code>SortedSet</code>接口。</li></ul><h3 id="使用Queue"><a href="#使用Queue" class="headerlink" title="使用Queue"></a>使用Queue</h3><p><strong>单向队列</strong></p><p>队列<code>Queue</code>实现了一个先进先出（FIFO）的数据结构：</p><ul><li><code>int size()</code>：获取队列长度；</li><li><code>boolean add(E)</code>/<code>boolean offer(E)</code>：添加元素到队尾；</li><li><code>E remove()</code>/<code>E poll()</code>：获取队首元素并从队列中删除；前者失败抛异常，后者返回false或null；</li><li><code>E element()</code>/<code>E peek()</code>：获取队首元素但并不从队列中删除。</li></ul><h3 id="使用PriorityQueue"><a href="#使用PriorityQueue" class="headerlink" title="使用PriorityQueue"></a>使用PriorityQueue</h3><p><strong>优先队列</strong>：大顶堆小顶堆</p><p>放入<code>PriorityQueue</code>的元素，必须实现<code>Comparable</code>接口，<code>PriorityQueue</code>会根据元素的排序顺序决定出队的优先级。</p><h3 id="使用Deque"><a href="#使用Deque" class="headerlink" title="使用Deque"></a>使用Deque</h3><p><strong>双向队列</strong>：两边都可以进，也可以出</p><p><code>Deque</code>实现了一个双端队列（Double Ended Queue），它可以：</p><ul><li>将元素添加到队尾或队首：<code>addLast()</code>/<code>offerLast()</code>/<code>addFirst()</code>/<code>offerFirst()</code>；</li><li>从队首／队尾获取元素并删除：<code>removeFirst()</code>/<code>pollFirst()</code>/<code>removeLast()</code>/<code>pollLast()</code>；</li><li>从队首／队尾获取元素但不删除：<code>getFirst()</code>/<code>peekFirst()</code>/<code>getLast()</code>/<code>peekLast()</code>；</li><li>总是调用<code>xxxFirst()</code>/<code>xxxLast()</code>以便与<code>Queue</code>的方法区分开；</li><li>避免把<code>null</code>添加到队列。</li></ul><h3 id="使用Stack"><a href="#使用Stack" class="headerlink" title="使用Stack"></a>使用Stack</h3><p>在Java中，我们用<code>Deque</code>可以实现<code>Stack</code>的功能，注意只调用<code>push()</code>/<code>pop()</code>/<code>peek()</code>方法，避免调用<code>Deque</code>的其他方法。</p><ul><li>把元素压栈：<code>push(E)</code>/<code>addFirst(E)</code>；</li><li>把栈顶的元素“弹出”：<code>pop()</code>/<code>removeFirst()</code>；</li><li>取栈顶元素但不弹出：<code>peek()</code>/<code>peekFirst()</code>。</li></ul><p>为什么Java的集合类没有单独的<code>Stack</code>接口呢？因为有个遗留类名字就叫<code>Stack</code>，出于兼容性考虑，所以没办法创建<code>Stack</code>接口，只能用<code>Deque</code>接口来“模拟”一个<code>Stack</code>了。</p><h3 id="使用Iterator"><a href="#使用Iterator" class="headerlink" title="使用Iterator"></a>使用Iterator</h3><p>编译器把<code>for each</code>循环通过<code>Iterator</code>改写为了普通的<code>for</code>循环：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">String</span> s <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>想要使用<code>for each</code>循环，只需满足以下条件：</p><ul><li>集合类实现<code>Iterable</code>接口，该接口要求返回一个<code>Iterator</code>对象；</li><li>用<code>Iterator</code>对象迭代集合内部数据。</li></ul><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ReverseList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> rlist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReverseList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Pear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> rlist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ReverseList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReverseIterator</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">ReverseIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> index<span class="token punctuation">;</span>        <span class="token class-name">ReverseIterator</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> index <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            index<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">ReverseList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用Collections"><a href="#使用Collections" class="headerlink" title="使用Collections"></a>使用Collections</h3><p><code>Collections</code>是JDK提供的工具类，同样位于<code>java.util</code>包中。它提供了一系列静态方法，能更方便地操作各种集合。</p><p><code>Collections</code>提供了一系列方法来创建空集合：</p><ul><li>创建空List：<code>List&lt;T&gt; emptyList()</code></li><li>创建空Map：<code>Map&lt;K, V&gt; emptyMap()</code></li><li>创建空Set：<code>Set&lt;T&gt; emptySet()</code></li></ul><p>要注意到返回的空集合是不可变集合，无法向其中添加或删除元素。</p><p><code>Collections</code>提供了一系列方法来创建一个单元素集合：</p><ul><li>创建一个元素的List：<code>List&lt;T&gt; singletonList(T o)</code></li><li>创建一个元素的Map：<code>Map&lt;K, V&gt; singletonMap(K key, V value)</code></li><li>创建一个元素的Set：<code>Set&lt;T&gt; singleton(T o)</code></li></ul><p><code>Collections</code>还提供了一组方法把可变集合封装成不可变集合：</p><ul><li>封装成不可变List：<code>List&lt;T&gt; unmodifiableList(List&lt;? extends T&gt; list)</code></li><li>封装成不可变Set：<code>Set&lt;T&gt; unmodifiableSet(Set&lt;? extends T&gt; set)</code></li><li>封装成不可变Map：<code>Map&lt;K, V&gt; unmodifiableMap(Map&lt;? extends K, ? extends V&gt; m)</code></li></ul><p>排序： Collections.sort(list);</p><p>洗牌：Collections.shuffle(list);</p><hr><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><ol><li>在Java中，<code>InputStream</code>代表输入字节流，<code>OuputStream</code>代表输出字节流，这是最基本的两种IO流。</li><li>Java提供了<code>Reader</code>和<code>Writer</code>表示字符流，字符流传输的最小数据单位是<code>char</code>。</li><li>因此，<code>Reader</code>和<code>Writer</code>本质上是一个能自动编解码的<code>InputStream</code>和<code>OutputStream</code>。</li><li>如果数据源不是文本，就只能使用<code>InputStream</code>，如果数据源是文本，使用Reader更方便一些。<code>Writer</code>和<code>OutputStream</code>是类似的。</li></ol><h3 id="File对象"><a href="#File对象" class="headerlink" title="File对象"></a>File对象</h3><blockquote><p>小知识：</p><ol><li><p>Java的标准库<code>java.io</code>提供了<code>File</code>对象来操作文件和目录。</p></li><li><p>要构造一个<code>File</code>对象，需要传入文件路径：<code>File f = new File(&quot;C:\\Windows\\notepad.exe&quot;);</code></p></li><li><p>注意Windows平台使用<code>\</code>作为路径分隔符，在Java字符串中需要用<code>\\</code>表示一个<code>\</code>。Linux平台使用<code>/</code>作为路径分隔符：</p></li><li><p>File对象有3种形式表示的路径，一种是<code>getPath()</code>，返回构造方法传入的路径，一种是<code>getAbsolutePath()</code>，返回绝对路径，一种是<code>getCanonicalPath</code>，它和绝对路径类似，但是返回的是规范路径。</p></li><li><p><code>File</code>对象既可以表示文件，也可以表示目录。特别要注意的是，构造一个<code>File</code>对象，</p></li><li><p>使用<code>File</code>对象的方法</p><ul><li><code>boolean canRead()</code>：是否可读；</li><li><code>boolean canWrite()</code>：是否可写；</li><li><code>boolean canExecute()</code>：是否可执行；</li><li><code>long length()</code>：文件字节大小。</li><li><code>createNewFile()</code>创建一个新文件，用<code>delete()</code>删除该文件</li><li><code>createTempFile()</code>来创建一个临时文件，以及<code>deleteOnExit()</code>在JVM退出时自动删除该文件</li><li>目录：</li><li><code>list()</code>和<code>listFiles()</code>列出目录下的文件和子目录名</li><li><code>boolean mkdir()</code>：创建当前File对象表示的目录；</li><li><code>boolean mkdirs()</code>：创建当前File对象表示的目录，并在必要时将不存在的父目录也创建出来；</li><li><code>boolean delete()</code>：删除当前File对象表示的目录，当前目录必须为空才能删除成功。</li></ul></li><li><p>如果需要对目录进行复杂的拼接、遍历等操作，使用<code>Path</code>对象更方便。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Path</span> p1 <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"project"</span><span class="token punctuation">,</span> <span class="token string">"study"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造一个Path对象</span>                <span class="token class-name">Path</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换为绝对路径</span>        <span class="token class-name">Path</span> p3 <span class="token operator">=</span> p2<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换为规范路径</span>        <span class="token class-name">File</span> f <span class="token operator">=</span> p3<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换为File对象</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token operator">+</span>p1<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>p2<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Path</span> p <span class="token operator">:</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 可以直接遍历Path</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  "</span> <span class="token operator">+</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 文件输入流 读取文件内容</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/readme.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 利用while同时读取并判断</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 即使读取出现问题，也能关闭 流</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// java7 引入的新的try(resource)的语法，只需要编写try语句，让编译器自动为我们关闭资源。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/readme.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// 编译器在此自动为我们写入finally并调用close()</span><span class="token punctuation">&#125;</span><span class="token comment">// 实际上，编译器并不会特别地为InputStream加上自动关闭。编译器只看try(resource = ...)中的对象是否实现了java.lang.AutoCloseable接口，如果实现了，就自动加上finally语句并调用close()方法。InputStream和OutputStream都实现了这个接口，因此，都可以用在try(resource)中。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>InputStream</code>并不是一个接口，而是一个抽象类，它是所有输入流的超类。这个抽象类定义的一个最重要的方法就是<code>int read()</code>，返回字节表示的<code>int</code>值（0~255）。如果已读到末尾，返回<code>-1</code>表示不能继续读取了。</li><li>在调用<code>InputStream</code>的<code>read()</code>方法读取数据时，我们说<code>read()</code>方法是阻塞（Blocking）的。</li><li><code>ByteArrayInputStream</code>实际上是把一个<code>byte[]</code>数组在内存中变成一个<code>InputStream</code>，虽然实际应用不多，但测试的时候，可以用它来构造一个<code>InputStream</code>。</li></ol><h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><blockquote><p>小知识：</p><ol><li><p>为什么要有<code>flush()</code>？因为向磁盘、网络写入数据的时候，出于效率的考虑，操作系统并不是输出一个字节就立刻写入到文件或者发送到网络，而是把输出的字节先放到内存的一个缓冲区里（本质上就是一个<code>byte[]</code>数组），等到缓冲区写满了，再一次性写入文件或者网络。对于很多IO设备来说，一次写一个字节和一次写1000个字节，花费的时间几乎是完全一样的，所以<code>OutputStream</code>有个<code>flush()</code>方法，能强制把缓冲区内容输出。</p></li><li><p>通常情况下，我们不需要调用这个<code>flush()</code>方法，因为==缓冲区写满了==<code>OutputStream</code>会自动调用它，并且，==在调用<code>close()</code>方法关闭<code>OutputStream</code>之前==，也会自动调用<code>flush()</code>方法。但是，在某些情况下，我们必须手动调用<code>flush()</code>方法。</p></li><li><p>和<code>InputStream</code>一样，<code>OutputStream</code>的<code>write()</code>方法也是阻塞的。</p></li><li><p><code>ByteArrayOutputStream</code>实际上是把一个<code>byte[]</code>数组在内存中变成一个<code>OutputStream</code>，虽然实际应用不多，但测试的时候，可以用它来构造一个<code>OutputStream</code>。</p></li><li><p>同时操作多个<code>AutoCloseable</code>资源时，在<code>try(resource) &#123; ... &#125;</code>语句中可以同时写出多个资源，用<code>;</code>隔开。例如，同时读写两个文件：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 读取input.txt，写入output.txt:</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"input.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">OutputStream</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    input<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// transferTo的作用是?</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote><h3 id="Filter模式"><a href="#Filter模式" class="headerlink" title="Filter模式"></a>Filter模式</h3><p>上述这种通过一个“基础”组件再叠加各种“附加”功能组件的模式，称之为Filter模式（或者装饰器模式：Decorator）。它可以让我们通过少量的类来实现各种功能的组合</p><blockquote><p>小总结：</p><p>Java的IO标准库使用Filter模式为<code>InputStream</code>和<code>OutputStream</code>增加功能：</p><ul><li>可以把一个<code>InputStream</code>和任意个<code>FilterInputStream</code>组合；</li><li>可以把一个<code>OutputStream</code>和任意个<code>FilterOutputStream</code>组合。</li></ul><p>Filter模式可以在运行期动态增加功能（又称Decorator模式）。</p></blockquote><h3 id="操作Zip"><a href="#操作Zip" class="headerlink" title="操作Zip"></a>操作Zip</h3><p>因为本质上jar包就是zip包，只是额外附加了一些固定的描述文件<code>MANIFEST.MF</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 读取zip</span><span class="token comment">// 创建一个ZipInputStream，通常是传入一个FileInputStream作为数据源，</span><span class="token comment">// 然后，循环调用getNextEntry()，直到返回null，表示zip流结束。</span><span class="token comment">// 一个ZipEntry表示一个压缩文件或目录，如果是压缩文件，我们就用read()方法不断读取，直到返回-1：</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ZipInputStream</span> zip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ZipEntry</span> entry <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>entry <span class="token operator">=</span> zip<span class="token punctuation">.</span><span class="token function">getNextEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>entry<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> n<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> zip<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// ...</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 写入zip</span><span class="token comment">// 先创建一个ZipOutputStream，通常是包装一个FileOutputStream，</span><span class="token comment">// 然后，每写入一个文件前，先调用putNextEntry()，然后用write()写入byte[]数据，</span><span class="token comment">// 写入完毕后调用closeEntry()结束这个文件的打包。</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ZipOutputStream</span> zip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> <span class="token comment">// ...</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        zip<span class="token punctuation">.</span><span class="token function">putNextEntry</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ZipEntry</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zip<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">getFileDataAsBytes</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zip<span class="token punctuation">.</span><span class="token function">closeEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读取classpath资源"><a href="#读取classpath资源" class="headerlink" title="读取classpath资源"></a>读取classpath资源</h3><p>在classpath中的资源文件，路径总是以<code>／</code>开头，我们先获取当前的<code>Class</code>对象，然后调用<code>getResourceAsStream()</code>就可以直接从classpath读取任意的资源文件。如果资源文件不存在，它将返回<code>null</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/default.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO:</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><ol><li>序列化是指把一个Java对象变成二进制内容，本质上就是一个<code>byte[]</code>数组。</li><li>因为序列化后可以把<code>byte[]</code>保存到文件中，或者把<code>byte[]</code>通过网络传输到远程，这样，就相当于把Java对象存储到文件或者通过网络传输出去了。</li><li>一个Java对象要能序列化，必须实现一个特殊的<code>java.io.Serializable</code>接口，<code>Serializable</code>接口没有定义任何方法，它是一个空接口。我们把这样的空接口称为“标记接口”（Marker Interface），实现了标记接口的类仅仅是给自身贴了个“标记”，并没有增加任何方法。</li><li>把一个Java对象变为<code>byte[]</code>数组，需要使用<code>ObjectOutputStream</code>。它负责把一个Java对象写入一个字节流：</li><li>为了避免这种class定义变动导致的不兼容，Java的序列化允许class定义一个特殊的<code>serialVersionUID</code>静态变量，用于标识Java类的序列化“版本”，通常可以由IDE自动生成。如果增加或修改了字段，可以改变<code>serialVersionUID</code>的值，这样就能自动阻止不匹配的class版本：</li></ol><h3 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h3><blockquote><p>小知识：</p><ol><li><p>和<code>InputStream</code>的区别是，<code>InputStream</code>是一个字节流，即以<code>byte</code>为单位读取，而<code>Reader</code>是一个字符流，即以<code>char</code>为单位读取：</p></li><li><p>要避免乱码问题，我们需要在创建<code>FileReader</code>时指定编码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/readme.txt"</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>CharArrayReader</code>可以在内存中模拟一个<code>Reader</code>，它的作用实际上是把一个<code>char[]</code>数组变成一个<code>Reader</code>，这和<code>ByteArrayInputStream</code>非常类似</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharArrayReader</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>StringReader</code>可以直接把<code>String</code>作为数据源，它和<code>CharArrayReader</code>几乎一样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>既然<code>Reader</code>本质上是一个基于<code>InputStream</code>的<code>byte</code>到<code>char</code>的转换器，那么，如果我们已经有一个<code>InputStream</code>，想把它转换为<code>Reader</code>，是完全可行的。<code>InputStreamReader</code>就是这样一个转换器，它可以把任何<code>InputStream</code>转换为<code>Reader</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 持有InputStream:</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/readme.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 变换为Reader:</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/readme.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO:</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote><h3 id="PrintStream-和-PrintWriter"><a href="#PrintStream-和-PrintWriter" class="headerlink" title="PrintStream 和 PrintWriter"></a>PrintStream 和 PrintWriter</h3><p><code>PrintStream</code>是一种<code>FilterOutputStream</code>，它在==<code>OutputStream</code>的接口==上，额外提供了一些写入各种数据类型的方法：</p><ul><li><p>写入<code>int</code>：<code>print(int)</code></p></li><li><p>写入<code>boolean</code>：<code>print(boolean)</code></p></li><li><p>写入<code>String</code>：<code>print(String)</code></p></li><li><p>写入<code>Object</code>：<code>print(Object)</code>，实际上相当于<code>print(object.toString())</code></p></li><li><p><code>println()</code>方法，它会自动加上换行符。</p></li></ul><p>我们经常使用的<code>System.out.println()</code>实际上就是使用<code>PrintStream</code>打印各种数据。其中，<code>System.out</code>是系统默认提供的<code>PrintStream</code>，表示标准输</p><p>而<code>PrintWriter</code>则是扩展了==<code>Writer</code>接口==，它的<code>print()</code>/<code>println()</code>方法最终输出的是<code>char</code>数据。</p><h3 id="使用Files"><a href="#使用Files" class="headerlink" title="使用Files"></a>使用Files</h3><ol><li>虽然<code>Files</code>和<code>Paths</code>是<code>java.nio</code>包里面的类，但他俩封装了很多读写文件的简单方法，</li><li><code>Files</code>工具类还有<code>copy()</code>、<code>delete()</code>、<code>exists()</code>、<code>move()</code>等快捷方法操作文件和目录。</li><li><code>Files</code>提供的读写方法，受内存限制，只能读写小文件，例如配置文件等，不可一次读入几个G的大文件。读写大型文件仍然要使用文件流，每次只读写一部分文件内容。</li></ol><h2 id="日期与时间（）"><a href="#日期与时间（）" class="headerlink" title="日期与时间（）"></a>日期与时间（）</h2><h3 id="Date和Calendar"><a href="#Date和Calendar" class="headerlink" title="Date和Calendar"></a>Date和Calendar</h3><p><code>Epoch Time</code>是计算从1970年1月1日零点（格林威治时区／GMT+00:00）到现在所经历的秒数，计算机存储Epoch Time</p><p>要获取当前时间戳，可以使用<code>System.currentTimeMillis()</code>，这是Java程序获取时间戳最常用的方法。</p><ul><li>一套定义在<code>java.util</code>这个包里面，主要包括<code>Date</code>、<code>Calendar</code>和<code>TimeZone</code>这几个类；</li><li>一套新的API是在Java 8引入的，定义在<code>java.time</code>这个包里面，主要包括<code>LocalDateTime</code>、<code>ZonedDateTime</code>、<code>ZoneId</code>等。</li></ul><p>使用<code>SimpleDateFormat</code>对一个<code>Date</code>进行转换。它用预定义的字符串表示格式化：</p><p><code>Calendar</code>可以用于获取并设置年、月、日、时、分、秒，它和<code>Date</code>比，主要多了一个可以做简单的日期和时间运算的功能。</p><p><code>Calendar</code>只有一种方式获取，即<code>Calendar.getInstance()</code>，而且一获取到就是当前时间。如果我们想给它设置成特定的一个日期和时间，就必须先清除所有字段：</p><p>利用<code>Calendar.getTime()</code>可以将一个<code>Calendar</code>对象转换成<code>Date</code>对象，然后就可以用<code>SimpleDateFormat</code>进行格式化了。</p><p>利用<code>Calendar</code>进行时区转换的步骤是：</p><ol><li>清除所有字段；</li><li>设定指定时区；</li><li>设定日期和时间；</li><li>创建<code>SimpleDateFormat</code>并设定目标时区；</li><li>格式化获取的<code>Date</code>对象（注意<code>Date</code>对象无时区信息，时区信息存储在<code>SimpleDateFormat</code>中）。</li></ol><h3 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h3><p>从Java 8开始，<code>java.time</code>包提供了新的日期和时间API，它们是不变类，默认按ISO 8601标准格式化和解析。主要涉及的类型有：</p><ul><li>本地日期和时间：<code>LocalDateTime</code>，<code>LocalDate</code>，<code>LocalTime</code>；</li><li>带时区的日期和时间：<code>ZonedDateTime</code>；</li><li>时刻：<code>Instant</code>；</li><li>时区：<code>ZoneId</code>，<code>ZoneOffset</code>；</li><li>时间间隔：<code>Duration</code>。</li></ul><p>以及一套新的用于取代<code>SimpleDateFormat</code>的格式化类型<code>DateTimeFormatter</code>。</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="编写JUnit测试"><a href="#编写JUnit测试" class="headerlink" title="编写JUnit测试"></a>编写JUnit测试</h3><blockquote><ol><li>所谓测试驱动开发，是指先编写接口，紧接着编写测试。编写完测试后，我们才开始真正编写实现代码。在编写实现代码的过程中，一边写，一边测，什么时候测试全部通过了，那就表示编写的实现完成了：</li><li>JUnit就会给出成功的测试和失败的测试，还可以生成测试报告，不仅包含测试的成功率，还可以统计测试的代码覆盖率，即被测试的代码本身有多少经过了测试。对于高质量的代码来说，测试覆盖率应该在80%以上。</li><li>一个JUnit测试包含若干<code>@Test</code>方法，并使用<code>Assertions</code>进行断言，注意浮点数<code>assertEquals()</code>要指定<code>delta</code>。</li></ol></blockquote><h3 id="使用Fixture"><a href="#使用Fixture" class="headerlink" title="使用Fixture"></a>使用Fixture</h3><p>在测试的时候，我们经常遇到一个对象需要初始化，测试完可能还需要清理的情况。</p><p>JUnit提供了编写测试前准备、测试后清理的固定代码，我们称之为Fixture。</p><p>通过<code>@BeforeEach</code>来初始化，通过<code>@AfterEach</code>来清理资源。标记为<code>@BeforeEach</code>和<code>@AfterEach</code>的方法，它们会在运行每个<code>@Test</code>方法前后自动运行</p><p><code>@BeforeAll</code>和<code>@AfterAll</code>在所有<code>@Test</code>方法运行前后仅运行一次，因此，它们只能初始化静态变量，</p><p>因此，我们总结出编写Fixture的套路如下：</p><ol><li>对于实例变量，在<code>@BeforeEach</code>中初始化，在<code>@AfterEach</code>中清理，它们在各个<code>@Test</code>方法中互不影响，因为是不同的实例；</li><li>对于静态变量，在<code>@BeforeAll</code>中初始化，在<code>@AfterAll</code>中清理，它们在各个<code>@Test</code>方法中均是唯一实例，会影响各个<code>@Test</code>方法。</li></ol><p>大多数情况下，使用<code>@BeforeEach</code>和<code>@AfterEach</code>就足够了。只有某些测试资源初始化耗费时间太长，以至于我们不得不尽量“复用”时才会用到<code>@BeforeAll</code>和<code>@AfterAll</code>。</p><h3 id="异常测试"><a href="#异常测试" class="headerlink" title="异常测试"></a>异常测试</h3><p>测试异常可以使用<code>assertThrows()</code>，期待捕获到指定类型的异常；</p><h3 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h3><p>这是因为注释掉<code>@Test</code>，JUnit就不知道这是个测试方法，而加上<code>@Disabled</code>，JUnit仍然识别出这是个测试方法，只是暂时不运行。</p><p>类似<code>@Disabled</code>这种注解就称为条件测试，JUnit根据不同的条件注解，决定是否运行当前的<code>@Test</code>方法。</p><p>不在Windows平台执行的测试，可以加上<code>@DisabledOnOs(OS.WINDOWS)</code>：</p><p>只能在Java 9或更高版本执行的测试，可以加上<code>@DisabledOnJre(JRE.JAVA_8)</code>：</p><p>只能在64位操作系统上执行的测试，可以用<code>@EnabledIfSystemProperty(named = &quot;os.arch&quot;, matches = &quot;.*64.*&quot;)</code>判断</p><p>需要传入环境变量<code>DEBUG=true</code>才能执行的测试，可以用<code>@EnabledIfEnvironmentVariable(named = &quot;DEBUG&quot;, matches = &quot;true&quot;)</code>：</p><h3 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h3><p>JUnit提供了一个<code>@ParameterizedTest</code>注解，用来进行参数化测试。</p><p>@ValueSource(ints = { 0, 1, 5, 100 })j</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ParameterizedTest</span><span class="token annotation punctuation">@MethodSource</span><span class="token keyword">void</span> <span class="token function">testCapitalize</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 同名的静态方法来提供测试参数</span><span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Arguments</span><span class="token punctuation">></span></span> <span class="token function">testCapitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span> <span class="token comment">// arguments:</span>            <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">arguments</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"Abc"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//</span>            <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">arguments</span><span class="token punctuation">(</span><span class="token string">"APPLE"</span><span class="token punctuation">,</span> <span class="token string">"Apple"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//</span>            <span class="token class-name">Arguments</span><span class="token punctuation">.</span><span class="token function">arguments</span><span class="token punctuation">(</span><span class="token string">"gooD"</span><span class="token punctuation">,</span> <span class="token string">"javaGood"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ParameterizedTest</span><span class="token annotation punctuation">@CsvSource</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token string">"abc, Abc"</span><span class="token punctuation">,</span> <span class="token string">"APPLE, Apple"</span><span class="token punctuation">,</span> <span class="token string">"gooD, Good"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">testCapitalize</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// @CsvSource就很不方便。这个时候，我们可以把测试数据提到一个独立的CSV文件中，然后标注上@CsvFileSource</span><span class="token comment">// @CsvFileSource(resources = &#123; "/test-capitalize.csv" &#125;)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h3><p>单个字符的匹配规则如下：</p><table><thead><tr><th align="left">正则表达式</th><th align="left">规则</th><th align="left">可以匹配</th></tr></thead><tbody><tr><td align="left"><code>A</code></td><td align="left">指定字符</td><td align="left"><code>A</code></td></tr><tr><td align="left"><code>\u548c</code></td><td align="left">指定Unicode字符</td><td align="left"><code>和</code></td></tr><tr><td align="left"><code>.</code></td><td align="left">任意字符</td><td align="left"><code>a</code>，<code>b</code>，<code>&amp;</code>，<code>0</code></td></tr><tr><td align="left"><code>\d</code></td><td align="left">数字0~9</td><td align="left"><code>0</code>~`9`</td></tr><tr><td align="left"><code>\w</code></td><td align="left">大小写字母，数字和下划线</td><td align="left"><code>a</code><del><code>z</code>，<code>A</code></del><code>Z</code>，<code>0</code>~`9<code>，</code>_`</td></tr><tr><td align="left"><code>\s</code></td><td align="left">空格、Tab键</td><td align="left">空格，Tab</td></tr><tr><td align="left"><code>\D</code></td><td align="left">非数字</td><td align="left"><code>a</code>，<code>A</code>，<code>&amp;</code>，<code>_</code>，……</td></tr><tr><td align="left"><code>\W</code></td><td align="left">非\w</td><td align="left"><code>&amp;</code>，<code>@</code>，<code>中</code>，……</td></tr><tr><td align="left"><code>\S</code></td><td align="left">非\s</td><td align="left"><code>a</code>，<code>A</code>，<code>&amp;</code>，<code>_</code>，……</td></tr></tbody></table><p>多个字符的匹配规则如下：</p><table><thead><tr><th align="left">正则表达式</th><th align="left">规则</th><th align="left">可以匹配</th></tr></thead><tbody><tr><td align="left"><code>A*</code></td><td align="left">任意个数字符</td><td align="left">空，<code>A</code>，<code>AA</code>，<code>AAA</code>，……</td></tr><tr><td align="left"><code>A+</code></td><td align="left">至少1个字符</td><td align="left"><code>A</code>，<code>AA</code>，<code>AAA</code>，……</td></tr><tr><td align="left"><code>A?</code></td><td align="left">0个或1个字符</td><td align="left">空，<code>A</code></td></tr><tr><td align="left"><code>A&#123;3&#125;</code></td><td align="left">指定个数字符</td><td align="left"><code>AAA</code></td></tr><tr><td align="left"><code>A&#123;2,3&#125;</code></td><td align="left">指定范围个数字符</td><td align="left"><code>AA</code>，<code>AAA</code></td></tr><tr><td align="left"><code>A&#123;2,&#125;</code></td><td align="left">至少n个字符</td><td align="left"><code>AA</code>，<code>AAA</code>，<code>AAAA</code>，……</td></tr><tr><td align="left"><code>A&#123;0,3&#125;</code></td><td align="left">最多n个字符</td><td align="left">空，<code>A</code>，<code>AA</code>，<code>AAA</code></td></tr></tbody></table><p>复杂匹配规则主要有：</p><table><thead><tr><th align="left">正则表达式</th><th align="left">规则</th><th align="left">可以匹配</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">开头</td><td align="left">字符串开头</td></tr><tr><td align="left">$</td><td align="left">结尾</td><td align="left">字符串结束</td></tr><tr><td align="left">[ABC]</td><td align="left">[…]内任意字符</td><td align="left">A，B，C</td></tr><tr><td align="left">[A-F0-9xy]</td><td align="left">指定范围的字符</td><td align="left"><code>A</code>，……，<code>F</code>，<code>0</code>，……，<code>9</code>，<code>x</code>，<code>y</code></td></tr><tr><td align="left">[^A-F]</td><td align="left">指定范围外的任意字符</td><td align="left">非<code>A</code>~`F`</td></tr><tr><td align="left">AB|CD|EF</td><td align="left">AB或CD或EF</td><td align="left"><code>AB</code>，<code>CD</code>，<code>EF</code></td></tr></tbody></table><h3 id="分组匹配"><a href="#分组匹配" class="headerlink" title="分组匹配"></a>分组匹配</h3><p>正则表达式用<code>(...)</code>分组可以通过<code>Matcher</code>对象快速提取子串：</p><ul><li><code>group(0)</code>表示匹配的整个字符串；</li><li><code>group(1)</code>表示第1个子串，<code>group(2)</code>表示第2个子串，以此类推。</li></ul><h3 id="非贪婪匹配"><a href="#非贪婪匹配" class="headerlink" title="非贪婪匹配"></a>非贪婪匹配</h3><p>正则表达式匹配默认使用贪婪匹配，可以使用<code>?</code>表示对某一规则进行非贪婪匹配。</p><h3 id="搜索和替换"><a href="#搜索和替换" class="headerlink" title="搜索和替换"></a>搜索和替换</h3><p>使用正则表达式可以：</p><ul><li>分割字符串：<code>String.split()</code></li><li>搜索子串：<code>Matcher.find()</code></li><li>替换字符串：<code>String.replaceAll()</code>。使用<code>replaceAll()</code>的时候，我们传入的第二个参数可以使用<code>$1</code>、<code>$2</code>来反向引用匹配到的子串。</li></ul><h2 id="加密与安全"><a href="#加密与安全" class="headerlink" title="加密与安全"></a>加密与安全</h2><h3 id="编码算法"><a href="#编码算法" class="headerlink" title="编码算法"></a>编码算法</h3><p>URL编码：</p><ul><li>如果字符是A~ Z，a~ z，0~9以及-、_、.、*，则保持不变；</li><li>如果是其他字符，先转换为UTF-8编码，然后对每个字节以<code>%XX</code>表示。</li><li>String encoded = URLEncoder.encode(“中文!”, StandardCharsets.UTF_8);</li></ul><p>Base64编码：</p><ul><li>```java<br>byte[] input = new byte[] { (byte) 0xe4, (byte) 0xb8, (byte) 0xad };<br>String b64encoded = Base64.getEncoder().encodeToString(input);// base64 URL的编码<br>byte[] input = new byte[] { 0x01, 0x02, 0x7f, 0x00 };<br>String b64encoded = Base64.getUrlEncoder().encodeToString(input);<pre class="line-numbers language-none"><code class="language-none">如果输入的&#96;byte[]&#96;数组长度不是3的整数倍肿么办？这种情况下，需要对输入的末尾补一个或两个&#96;0x00&#96;，编码后，在结尾加一个&#96;&#x3D;&#96;表示补充了1个&#96;0x00&#96;，加两个&#96;&#x3D;&#96;表示补充了2个&#96;0x00&#96;，解码的时候，去掉末尾补充的一个或两个&#96;0x00&#96;即可。，因为编码后的长度加上&#96;&#x3D;&#96;总是4的倍数，所以即使不加&#96;&#x3D;&#96;也可以计算出原始输入的&#96;byte[]&#96;。Base64编码的时候可以用&#96;withoutPadding()&#96;去掉&#96;&#x3D;&#96;，解码出来的结果是一样的Base64编码的目的是把任意二进制数据编码为文本（顺序截取用字符表示），但编码后数据量会增加1&#x2F;3。### 哈希算法哈希算法（Hash）又称摘要算法（Digest），它的作用是：对任意一组输入数据进行计算，得到一个固定长度的输出摘要。- 相同的输入一定得到相同的输出；- 不同的输入大概率得到不同的输出。哈希算法的目的就是为了验证原始数据是否被篡改Java字符串的&#96;hashCode()&#96;就是一个哈希算法，它的输入是任意字符串，输出是固定的4字节&#96;int&#96;整数：哈希碰撞是指，两个不同的输入得到了相同的输出：&#96;&#96;&#96;java    &#x2F;&#x2F; 创建一个MessageDigest实例:    MessageDigest md &#x3D; MessageDigest.getInstance(&quot;MD5&quot;); &#x2F;&#x2F; 使用 MD5加密，也可以使用其他的    &#x2F;&#x2F; 反复调用update输入数据:    md.update(&quot;Hello&quot;.getBytes(&quot;UTF-8&quot;));    md.update(&quot;World&quot;.getBytes(&quot;UTF-8&quot;));    byte[] result &#x3D; md.digest(); &#x2F;&#x2F; 16 bytes: 68e109f0f40ca72a15e05cc22786f8e6    System.out.println(new BigInteger(1, result).toString(16));&#x2F;&#x2F;  注意：MD5因为输出长度较短，短时间内破解是可能的，目前已经不推荐使用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>因为相同的输入永远会得到相同的输出，因此，如果输入被修改了，得到的输出就会不同。</li></ul><p>哈希算法的另一个重要用途是存储用户口令。如果直接将用户的原始口令存放到数据库中，会产生极大的安全风险。</p><p>使用哈希口令时，还要注意防止==彩虹表==攻击。</p><p>即使用户使用了常用口令，我们也可以采取措施来抵御彩虹表攻击，方法是对每个口令额外添加随机数，这个方法称之为==加盐==（salt）。</p><h3 id="BouncyCastle"><a href="#BouncyCastle" class="headerlink" title="BouncyCastle"></a>BouncyCastle</h3><p><a href="https://www.bouncycastle.org/">BouncyCastle</a>就是一个提供了很多哈希算法和加密算法的第三方库。它提供了Java标准库没有的一些算法，jar包是<code>bcprov-jdk15on-xxx.jar</code>，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 注册BouncyCastle:</span><span class="token class-name">Security</span><span class="token punctuation">.</span><span class="token function">addProvider</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BouncyCastleProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按名称正常调用:</span><span class="token class-name">MessageDigest</span> md <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RipeMD160"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>md<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Hmac算法"><a href="#Hmac算法" class="headerlink" title="Hmac算法"></a>Hmac算法</h3><p>salt可以看作是一个额外的“认证码”，同样的输入，不同的认证码，会产生不同的输出。因此，要验证输出的哈希，必须同时提供“认证码”。</p><p>Hmac算法就是一种基于密钥的消息认证码算法，它的全称是Hash-based Message Authentication Code，是一种更安全的消息摘要算法。Hmac算法总是和某种哈希算法配合起来用的。</p><p>和MD5相比，使用HmacMD5的步骤是：</p><ol><li>通过名称<code>HmacMD5</code>获取<code>KeyGenerator</code>实例；</li><li>通过<code>KeyGenerator</code>创建一个<code>SecretKey</code>实例；</li><li>通过名称<code>HmacMD5</code>获取<code>Mac</code>实例；</li><li>用<code>SecretKey</code>初始化<code>Mac</code>实例；</li><li>对<code>Mac</code>实例反复调用<code>update(byte[])</code>输入数据；</li><li>调用<code>Mac</code>实例的<code>doFinal()</code>获取最终的哈希值。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token class-name">KeyGenerator</span> keyGen <span class="token operator">=</span> <span class="token class-name">KeyGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"HmacMD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SecretKey</span> key <span class="token operator">=</span> keyGen<span class="token punctuation">.</span><span class="token function">generateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打印随机生成的key:</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> skey <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> skey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Mac</span> mac <span class="token operator">=</span> <span class="token class-name">Mac</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"HmacMD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mac<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    mac<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> mac<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解码</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hkey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">63</span><span class="token punctuation">,</span>                <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">83</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">74</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">107</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">114</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span>                <span class="token number">97</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">125</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">116</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">81</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span>                <span class="token number">89</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">106</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">109</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">SecretKey</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>hkey<span class="token punctuation">,</span> <span class="token string">"HmacMD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mac</span> mac <span class="token operator">=</span> <span class="token class-name">Mac</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"HmacMD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mac<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        mac<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> mac<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// [126, 59, 37, 63, 73, 90, 111, -96, -77, 15, 82, -74, 122, -55, -67, 54]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><ol><li>对称加密算法就是传统的用一个密码进行加密和解密。常用算法有DES、AES和IDEA等；</li><li>密钥长度由算法设计决定，AES的密钥长度是128/192/256位；</li><li>使用对称加密算法需要指定算法名称、工作模式和填充模式。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="口令加密算法"><a href="#口令加密算法" class="headerlink" title="口令加密算法"></a>口令加密算法</h3><p>实际上用户输入的口令并不能直接作为AES的密钥进行加密（除非长度恰好是128/192/256位），并且用户输入的口令一般都有规律，安全性远远不如安全随机数产生的随机口令。因此，用户输入的口令，通常还需要使用PBE算法，采用随机数杂凑计算出真正的密钥，再进行加密。</p><p><strong>小结</strong></p><ol><li>PBE算法通过用户口令和安全的随机salt计算出Key，然后再进行加密；</li><li>Key通过口令和安全的随机salt计算得出，大大提高了安全性；</li><li>PBE算法内部使用的仍然是标准对称加密算法（例如AES）。</li></ol><h3 id="密钥交换算法"><a href="#密钥交换算法" class="headerlink" title="密钥交换算法"></a>密钥交换算法</h3><p>DH算法的本质就是双方各自生成自己的私钥和公钥，私钥仅对自己可见，然后交换公钥，并根据自己的私钥和对方的公钥，生成最终的密钥<code>secretKey</code>，DH算法通过数学定律保证了双方各自计算出的<code>secretKey</code>是相同的。</p><p>DH算法是一种密钥交换协议，通信双方通过不安全的信道协商密钥，然后进行对称加密传输。</p><p>DH算法没有解决中间人攻击，即甲乙双方并不能确保与自己通信的是否真的是对方。</p><h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><ol><li>可见非对称加密实际上应用在第一步，即加密“AES口令”。这也是我们在浏览器中常用的HTTPS协议的做法，即浏览器和服务器先通过RSA交换AES口令，接下来双方通信实际上采用的是速度较快的AES对称加密，而不是缓慢的RSA非对称加密。</li><li>非对称加密就是加密和解密使用的不是相同的密钥，只有同一个公钥-私钥对才能正常加解密；</li><li>只使用非对称加密算法不能防止中间人攻击。</li></ol><h3 id="签名算法"><a href="#签名算法" class="headerlink" title="签名算法"></a>签名算法</h3><p>因此，私钥加密得到的密文实际上就是数字签名，要验证这个签名是否正确，只能用私钥持有者的公钥进行解密验证。使用数字签名的目的是为了确认某个信息确实是由某个发送方发送的，任何人都不可能伪造消息，并且，发送方也不能抵赖。</p><p>私钥就相当于用户身份。而公钥用来给外部验证用户身份。</p><p>数字签名就是用发送方的私钥对原始数据进行签名，只有用发送方公钥才能通过签名验证。</p><p>数字签名用于：</p><ul><li>防止伪造；</li><li>防止抵赖；</li><li>检测篡改。</li></ul><p>常用的数字签名算法包括：MD5withRSA／SHA1withRSA／SHA256withRSA／SHA1withDSA／SHA256withDSA／SHA512withDSA／ECDSA等。</p><h3 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h3><ol><li>摘要算法用来确保数据没有被篡改，非对称加密算法可以对数据进行加解密，签名算法可以确保数据完整性和抗否认性，把这些算法集合到一起，并搞一套完善的标准，这就是==数字证书==。因此，数字证书就是集合了多种密码学算法，用于实现数据加解密、身份认证、签名等多种功能的一种安全标准。</li><li>数字证书采用链式签名管理，顶级的Root CA证书已内置在操作系统中。</li><li>数字证书存储的是公钥，可以安全公开，而私钥必须严格保密。</li></ol><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="创建新线程"><a href="#创建新线程" class="headerlink" title="创建新线程"></a>创建新线程</h3><p>Java语言内置了多线程支持。当Java程序启动的时候，实际上是启动了一个JVM进程，然后，JVM启动主线程来执行<code>main()</code>方法。在<code>main()</code>方法中，我们又可以启动其他线程。</p><p>注意到<code>start()</code>方法会在内部自动调用实例的<code>run()</code>方法。要特别注意：直接调用<code>Thread</code>实例的<code>run()</code>方法是无效的，直接调用<code>run()</code>方法，相当于调用了一个普通的Java方法，当前线程并没有任何改变，也不会启动新线程。</p><p>对线程设定优先级，<code>Thread.setPriority(int n) // 1~10, 默认值5</code></p><blockquote><p>小总结：</p><ol><li>Java用<code>Thread</code>对象表示一个线程，通过调用<code>start()</code>启动一个新线程；</li><li>一个线程对象只能调用一次<code>start()</code>方法；</li><li>线程的执行代码写在<code>run()</code>方法中；</li><li>线程调度由操作系统决定，程序本身无法决定调度顺序；</li><li><code>Thread.sleep()</code>可以把当前线程暂停一段时间。</li></ol></blockquote><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>Java线程的状态有以下几种：</p><ul><li>New：新创建的线程，尚未执行；</li><li>Runnable：运行中的线程，正在执行<code>run()</code>方法的Java代码；</li><li>Blocked：运行中的线程，因为某些操作被阻塞而挂起；</li><li>Waiting：运行中的线程，因为某些操作在等待中；</li><li>Timed Waiting：运行中的线程，因为执行<code>sleep()</code>方法正在计时等待；</li><li>Terminated：线程已终止，因为<code>run()</code>方法执行完毕。</li></ul><p>线程对象<code>t</code>调用<code>join()</code>方法可以让主线程等待其执行结束。如果<code>t</code>线程已经结束，对实例<code>t</code>调用<code>join()</code>会立刻返回。此外，<code>join(long)</code>的重载方法也可以指定一个等待时间，超过等待时间后就不再继续等待。</p><h3 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h3><p>中断一个线程非常简单，只需要在其他线程中对目标线程调用<code>interrupt()</code>方法，目标线程需要反复检测自身状态是否是interrupted状态，如果是，就立刻结束运行。</p><p>线程对象调用其自身的interrupt方法就会中断（发出中断请求）。</p><p>我们通常会用一个<code>running</code>标志位来标识线程是否应该继续运行，在外部线程中，通过把<code>HelloThread.running</code>置为<code>false</code>，就可以让线程结束：</p><p>线程间共享变量需要使用<code>volatile</code>关键字标记，确保每个线程都能读取到更新后的变量值。</p><p><em>为什么要对线程间共享的变量用关键字<code>volatile</code>声明？这涉及到Java的内存模型。在Java虚拟机中，变量的值保存在主内存中，但是，当线程访问变量时，它会先获取一个副本，并保存在自己的工作内存中。如果线程修改了变量的值，虚拟机会在某个时刻把修改后的值回写到主内存，但是，这个时间是不确定的！</em></p><p><code>volatile</code>关键字的目的是告诉虚拟机：</p><ul><li>每次访问变量时，总是获取主内存的最新值；</li><li>每次修改变量后，立刻回写到主内存。</li></ul><p><code>volatile</code>关键字解决的是可见性问题：当一个线程修改了某个共享变量的值，其他线程能够立刻看到修改后的值。</p><blockquote><p>小总结：</p><ol><li>对目标线程调用<code>interrupt()</code>方法可以请求中断一个线程，目标线程通过检测<code>isInterrupted()</code>标志获取自身是否已中断。如果目标线程处于等待状态，该线程会捕获到<code>InterruptedException</code>；</li><li>目标线程检测到<code>isInterrupted()</code>为<code>true</code>或者捕获了<code>InterruptedException</code>都应该立刻结束自身线程；</li><li>通过标志位判断需要正确使用<code>volatile</code>关键字；</li><li><code>volatile</code>关键字解决了共享变量在线程间的可见性问题。</li></ol></blockquote><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>但是有一种线程的目的就是无限循环，例如，一个定时触发任务的线程。</p><p>如何创建守护线程呢？方法和普通线程一样，只是在调用<code>start()</code>方法前，调用<code>setDaemon(true)</code>把该线程标记为守护线程。</p><p>守护线程是为其他线程服务的线程；</p><p>所有非守护线程都执行完毕后，虚拟机退出；</p><p>守护线程不能持有需要关闭的资源（如打开文件等）。</p><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><p>这说明多线程模型下，要保证逻辑正确，对共享变量进行读写时，必须保证一组指令以原子方式执行：即某一个线程执行时，其他线程必须等待。</p><ol><li>通过加锁和解锁的操作，就能保证3条指令总是在一个线程执行期间，不会有其他线程会进入此指令区间。</li><li>即使在执行期线程被操作系统中断执行，其他线程也会因为无法获得锁导致无法进入此指令区间。</li><li>只有执行线程将锁释放后，其他线程才有机会获得锁并执行。</li><li>这种加锁和解锁之间的代码块我们称之为临界区（Critical Section），任何时候临界区最多只有一个线程能执行。</li></ol><blockquote><p>把临界区看作一个房间，房间里有一把锁，当一个线程进去之后，它会把门锁住不让其他线程进来，这样其他线程被拒之门外，只有等，房间里的人办完事情，把锁打开。</p><p>synchronized(lock)，lock可能是一个变量或者对象或者类，把它当作锁，加锁的时候会把这个对象的状态标记为加锁（执行完解锁），当其他线程访问时会检查锁的状态 判断是否可以进去。</p><p>锁是线程可以==共享==的（所有线程都拥有，可以判断状态，决定自己是否可以访问）</p></blockquote><p>Java程序使用<code>synchronized</code>关键字对一个对象进行加锁，<code>synchronized</code>保证了代码块在任意时刻最多只有一个线程能执行。</p><p>我们来概括一下如何使用<code>synchronized</code>：</p><ol><li>找出修改共享变量的线程代码块；</li><li>选择一个共享实例作为锁；</li><li>使用<code>synchronized(lockObject) &#123; ... &#125;</code>。</li></ol><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>用<code>synchronized</code>修饰的方法就是同步方法，它表示整个方法都必须用<code>this</code>实例加锁。</p><p>对<code>static</code>方法添加<code>synchronized</code>，锁住的是该类的<code>Class</code>实例。</p><p>一个类没有特殊说明，默认不是thread-safe；</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ol><li>JVM允许同一个线程重复获取同一个锁，这种能被同一个线程反复获取的锁，就叫做可重入锁。</li><li>死锁产生的条件是多线程各自持有不同的锁，并互相试图获取对方已持有的锁，导致无限等待；</li><li>避免死锁的方法是多线程获取锁的顺序要一致。</li></ol><h3 id="使用wait和notify"><a href="#使用wait和notify" class="headerlink" title="使用wait和notify"></a>使用wait和notify</h3><p>多线程协调运行的原则就是：当条件不满足时，线程进入等待状态；当条件满足时，线程被唤醒，继续执行任务。</p><p><code>wait</code>和<code>notify</code>用于多线程协调运行：</p><ul><li>在<code>synchronized</code>内部可以调用<code>wait()</code>使线程进入等待状态；</li><li>必须在已获得的锁对象上调用<code>wait()</code>方法；</li><li>在<code>synchronized</code>内部可以调用<code>notify()</code>或<code>notifyAll()</code>唤醒其他等待线程；</li><li>必须在已获得的锁对象上调用<code>notify()</code>或<code>notifyAll()</code>方法；</li><li>已唤醒的线程还需要重新获得锁后才能继续执行。</li></ul><blockquote><p>拿到锁的人，调用wait方法，把锁还回去了并且在房间里睡着了，等着下一个拿着锁的线程对象把它叫醒。</p></blockquote><p>使用<code>notifyAll()</code>将唤醒所有当前正在<code>this</code>锁等待的线程，而<code>notify()</code>只会唤醒其中一个（具体哪个依赖操作系统，有一定的随机性）。</p><p>通常来说，<code>notifyAll()</code>更安全。有些时候，如果我们的代码逻辑考虑不周，用<code>notify()</code>会导致只唤醒了一个线程，而其他线程可能永远等待下去醒不过来了。</p><h3 id="使用ReentrantLock（重入锁）"><a href="#使用ReentrantLock（重入锁）" class="headerlink" title="使用ReentrantLock（重入锁）"></a>使用ReentrantLock（重入锁）</h3><p>因为<code>synchronized</code>是Java语言层面提供的语法，所以我们不需要考虑异常，而<code>ReentrantLock</code>是Java代码实现的锁，我们就必须先获取锁，然后在<code>finally</code>中正确释放锁。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加锁</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            count <span class="token operator">+=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解锁</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// or 尝试获取锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 尝试获取锁的时候，最多等待1秒。如果1秒后仍未获取到锁，tryLock()返回false，程序就可以做一些额外处理，而不是无限等待下去。</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ReentrantLock</code>可以替代<code>synchronized</code>进行同步；</p><p><code>ReentrantLock</code>获取锁更安全；</p><p>必须先获取到锁，再进入<code>try &#123;...&#125;</code>代码块，最后使用<code>finally</code>保证释放锁；</p><p>可以使用<code>tryLock()</code>尝试获取锁。</p><h3 id="使用Condition"><a href="#使用Condition" class="headerlink" title="使用Condition"></a>使用Condition</h3><p>使用<code>ReentrantLock</code>比直接使用<code>synchronized</code>更安全，可以替代<code>synchronized</code>进行线程同步。</p><p>配合使用<code>Condition</code>对象来实现<code>wait</code>和<code>notify</code>的功能。</p><ol><li><code>Condition</code>可以替代<code>wait</code>和<code>notify</code>；</li><li><code>Condition</code>对象必须从<code>Lock</code>对象获取。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TaskQueue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回锁</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Condition</span> condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回condition对象</span>    <span class="token keyword">private</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 notifyAll</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 线程等待，等同于 wait</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用ReadWriteLock"><a href="#使用ReadWriteLock" class="headerlink" title="使用ReadWriteLock"></a>使用ReadWriteLock</h3><p>使用<code>ReadWriteLock</code>可以解决这个问题，它保证：</p><ul><li>只允许一个线程写入（其他线程既不能写入也不能读取）；</li><li>没有写入时，多个线程允许同时读（提高性能）。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReadWriteLock</span> rwlock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建读写锁 实例</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> rlock <span class="token operator">=</span> rwlock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读锁</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> wlock <span class="token operator">=</span> rwlock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写锁</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        wlock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加写锁</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            counts<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            wlock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放写锁</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        rlock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加读锁</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>counts<span class="token punctuation">,</span> counts<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            rlock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放读锁</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>ReadWriteLock</code>可以提高读取效率：</p><ul><li><code>ReadWriteLock</code>只允许一个线程写入；</li><li><code>ReadWriteLock</code>允许多个线程在没有写入时同时读取；</li><li><code>ReadWriteLock</code>适合读多写少的场景。</li></ul><blockquote><p>有读锁的时候，不能写，可以同时存在多个读锁。</p><p>有写锁的时候，有且仅有一个写锁，且没有其他读锁。</p><p>读锁可以共存，写锁不能和其他任何共存（写锁不能在读的时候写）</p></blockquote><h3 id="使用StampedLock"><a href="#使用StampedLock" class="headerlink" title="使用StampedLock"></a>使用StampedLock</h3><ol><li>Java 8引入了新的读写锁：<code>StampedLock</code>。<code>StampedLock</code>和<code>ReadWriteLock</code>相比，改进之处在于：读的过程中也允许获取写锁后写入！这样一来，我们读的数据就可能不一致，所以，需要一点额外的代码来判断读的过程中是否有写入，这种读锁是一种乐观锁。</li><li>悲观锁则是读的过程中拒绝有写入，也就是写入必须等待。显然乐观锁的并发效率更高，但一旦有小概率的写入导致读取的数据不一致，需要能检测出来，再读一遍就行。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StampedLock</span> stampedLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StampedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> x<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> y<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">double</span> deltaX<span class="token punctuation">,</span> <span class="token keyword">double</span> deltaY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> stamp <span class="token operator">=</span> stampedLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取写锁</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            x <span class="token operator">+=</span> deltaX<span class="token punctuation">;</span>            y <span class="token operator">+=</span> deltaY<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            stampedLock<span class="token punctuation">.</span><span class="token function">unlockWrite</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放写锁</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">distanceFromOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> stamp <span class="token operator">=</span> stampedLock<span class="token punctuation">.</span><span class="token function">tryOptimisticRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获得一个乐观读锁</span>        <span class="token comment">// 注意下面两行代码不是原子操作</span>        <span class="token comment">// 假设x,y = (100,200)</span>        <span class="token keyword">double</span> currentX <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token comment">// 此处已读取到x=100，但x,y可能被写线程修改为(300,400)</span>        <span class="token keyword">double</span> currentY <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token comment">// 此处已读取到y，如果没有写入，读取是正确的(100,200)</span>        <span class="token comment">// 如果有写入，读取是错误的(100,400)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stampedLock<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 检查乐观读锁后是否有其他写锁发生</span>            stamp <span class="token operator">=</span> stampedLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取一个悲观读锁</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                currentX <span class="token operator">=</span> x<span class="token punctuation">;</span>                currentY <span class="token operator">=</span> y<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                stampedLock<span class="token punctuation">.</span><span class="token function">unlockRead</span><span class="token punctuation">(</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放悲观读锁</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>currentX <span class="token operator">*</span> currentX <span class="token operator">+</span> currentY <span class="token operator">*</span> currentY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和<code>ReadWriteLock</code>相比，写入的加锁是完全一样的，不同的是读取。注意到首先我们通过<code>tryOptimisticRead()</code>获取一个乐观读锁，并返回版本号。接着进行读取，==读取完成后，我们通过<code>validate()</code>去验证版本号，如果在读取过程中没有写入，版本号不变，验证成功==，我们就可以放心地继续后续操作。如果在读取过程中有写入，版本号会发生变化，验证将失败。在失败的时候，我们再通过获取悲观读锁再次读取。由于写入的概率不高，程序在绝大部分情况下可以通过乐观读锁获取数据，极少数情况下使用悲观读锁获取数据。</p><p><code>StampedLock</code>是不可重入锁。</p><h3 id="使用Concurrent集合"><a href="#使用Concurrent集合" class="headerlink" title="使用Concurrent集合"></a>使用Concurrent集合</h3><p>因为所有的同步和加锁的逻辑都在集合内部实现，对外部调用者来说，只需要正常按接口引用，其他代码和原来的非线程安全代码完全一样。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// java.util.Collections工具类还提供了一个旧的线程安全集合转换器，可以这么用：</span><span class="token class-name">Map</span> unsafeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span> threadSafeMap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span>unsafeMap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换不安全集合 -> 安全集合</span><span class="token comment">// 尽量使用Java标准库提供的并发集合，避免自己编写同步代码。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用Atomic（）"><a href="#使用Atomic（）" class="headerlink" title="使用Atomic（）"></a>使用Atomic（）</h3><p>使用<code>java.util.concurrent.atomic</code>提供的原子操作可以简化多线程编程：</p><ul><li>原子操作实现了无锁的线程安全；</li><li>适用于计数器，累加器等。</li></ul><h3 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h3><p>创建线程需要操作系统资源（线程资源，栈空间等），频繁创建和销毁大量线程需要消耗大量时间。</p><p>简单地说，线程池内部维护了若干个线程，没有任务的时候，这些线程都处于等待状态。如果有新任务，就分配一个空闲线程执行。如果所有线程都处于忙碌状态，新任务要么放入队列等待，要么增加一个新线程进行处理。</p><p>使用<code>shutdown()</code>方法关闭线程池的时候，它会等待正在执行的任务先完成，然后再关闭。<code>shutdownNow()</code>会立刻停止正在执行的任务，<code>awaitTermination()</code>则会等待指定的时间让线程池关闭。</p><p>放入<code>ScheduledThreadPool</code>的任务可以定期反复执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1秒后执行一次性任务:</span>ses<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token string">"one-time"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2秒后开始执行定时任务，每3秒执行:</span>ses<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token string">"fixed-rate"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2秒后开始执行定时任务，以3秒为间隔执行:</span>ses<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token string">"fixed-delay"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小总结：</p><p>JDK提供了<code>ExecutorService</code>实现了线程池功能：</p><ul><li>线程池内部维护一组线程，可以高效执行大量小任务；</li><li><code>Executors</code>提供了静态方法创建不同类型的<code>ExecutorService</code>；</li><li>必须调用<code>shutdown()</code>关闭<code>ExecutorService</code>；</li><li><code>ScheduledThreadPool</code>可以定期调度多个任务。</li></ul><h3 id="使用Future"><a href="#使用Future" class="headerlink" title="使用Future"></a>使用Future</h3><p>Java标准库还提供了一个<code>Callable</code>接口，和<code>Runnable</code>接口比，它多了一个返回值：</p><p>仔细看<code>ExecutorService.submit()</code>方法，可以看到，它返回了一个<code>Future</code>类型，一个<code>Future</code>类型的实例代表一个未来能获取结果的对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义任务:</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 提交任务并获得Future:</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从Future获取异步执行返回的结果:</span><span class="token class-name">String</span> result <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可能阻塞</span><span class="token comment">// 如果异步任务还没有完成，那么get()会阻塞，直到任务完成后才返回结果。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个<code>Future&lt;V&gt;</code>接口表示一个未来可能会返回的结果，它定义的方法有：</p><ul><li><code>get()</code>：获取结果（可能会等待）</li><li><code>get(long timeout, TimeUnit unit)</code>：获取结果，但只等待指定的时间；</li><li><code>cancel(boolean mayInterruptIfRunning)</code>：取消当前任务；</li><li><code>isDone()</code>：判断任务是否已完成。</li></ul><h3 id="使用CompletableFuture"><a href="#使用CompletableFuture" class="headerlink" title="使用CompletableFuture"></a>使用CompletableFuture</h3><p>从Java 8开始引入了<code>CompletableFuture</code>，它针对<code>Future</code>做了改进，可以传入回调对象，当异步任务完成或者发生异常时，自动调用回调对象的回调方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 第一个任务:</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> cfQuery <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">queryCode</span><span class="token punctuation">(</span><span class="token string">"中国石油"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回计算结果</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// cfQuery成功后继续执行下一个任务:</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> cfFetch <span class="token operator">=</span> cfQuery<span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">fetchPrice</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// cfFetch成功后打印结果:</span>        cfFetch<span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"price: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 延长主线程 生命周期</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">queryCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"601857"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token class-name">Double</span> <span class="token function">fetchPrice</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见<code>CompletableFuture</code>的优点是：</p><ul><li>异步任务结束时，会自动回调某个对象的方法；</li><li>异步任务出错时，会自动回调某个对象的方法；</li><li>主线程设置好回调后，不再关心异步任务的执行。</li></ul><blockquote><p>小结</p><p><code>CompletableFuture</code>可以指定异步处理流程：</p><ul><li><code>thenAccept()</code>处理正常结果；</li><li><code>exceptional()</code>处理异常结果；</li><li><code>thenApplyAsync()</code>用于串行化另一个<code>CompletableFuture</code>；</li><li><code>anyOf()</code>和<code>allOf()</code>用于并行化多个<code>CompletableFuture</code>。</li></ul></blockquote><h3 id="使用ForkJoin"><a href="#使用ForkJoin" class="headerlink" title="使用ForkJoin"></a>使用ForkJoin</h3><p>Java 7开始引入了一种新的Fork/Join线程池，它可以执行一种特殊的任务：把一个大任务拆成多个小任务并行执行。</p><p>Fork/Join任务的原理：判断一个任务是否足够小，如果是，直接计算，否则，就分拆成几个小任务分别计算。这个过程可以反复“裂变”成一系列小任务。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SumTask</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token class-name">Long</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// “分裂”子任务:</span>        <span class="token class-name">SumTask</span> subtask1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SumTask</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SumTask</span> subtask2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SumTask</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// invokeAll会并行运行两个子任务:</span>        <span class="token function">invokeAll</span><span class="token punctuation">(</span>subtask1<span class="token punctuation">,</span> subtask2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得子任务的结果:</span>        <span class="token class-name">Long</span> subresult1 <span class="token operator">=</span> subtask1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 并行得到结果，而非串行</span>        <span class="token class-name">Long</span> subresult2 <span class="token operator">=</span> subtask2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 汇总结果:</span>        <span class="token keyword">return</span> subresult1 <span class="token operator">+</span> subresult2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Fork/Join是一种基于“分治”的算法：通过分解任务，并行执行，最后合并结果得到最终结果。</p><p><code>ForkJoinPool</code>线程池可以把一个大任务分拆成小任务并行执行，任务类必须继承自<code>RecursiveTask</code>或<code>RecursiveAction</code>。</p><p>使用Fork/Join模式可以进行并行计算以提高效率。</p><h3 id="使用ThreadLocal"><a href="#使用ThreadLocal" class="headerlink" title="使用ThreadLocal"></a>使用ThreadLocal</h3><p>这种在一个线程中，横跨若干方法调用，需要传递的对象，我们通常称之为上下文（Context），它是一种状态，可以是用户身份、任务信息等。</p><p><code>ThreadLocal</code>实例通常总是以静态字段初始化如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> threadLocalUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实际上，可以把<code>ThreadLocal</code>看成一个全局<code>Map&lt;Thread, Object&gt;</code>：每个线程获取<code>ThreadLocal</code>变量时，总是使用<code>Thread</code>自身作为key：</p><p>因此，<code>ThreadLocal</code>相当于给每个线程都开辟了一个独立的存储空间，各个线程的<code>ThreadLocal</code>关联的实例互不干扰。</p><p>最后，特别注意<code>ThreadLocal</code>一定要在<code>finally</code>中清除： <code>threadLocalUser.remove();</code></p><p>为了保证能释放<code>ThreadLocal</code>关联的实例，我们可以通过<code>AutoCloseable</code>接口配合<code>try (resource) &#123;...&#125;</code>结构，让编译器自动为我们关闭。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserContext</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserContext</span><span class="token punctuation">(</span><span class="token class-name">String</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">currentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ctx<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ctx<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用方法</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserContext</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 可任意调用UserContext.currentUser():</span>    <span class="token class-name">String</span> currentUser <span class="token operator">=</span> <span class="token class-name">UserContext</span><span class="token punctuation">.</span><span class="token function">currentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 在此自动调用UserContext.close()方法释放ThreadLocal关联对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Maven基础"><a href="#Maven基础" class="headerlink" title="Maven基础"></a>Maven基础</h2><h3 id="Maven介绍"><a href="#Maven介绍" class="headerlink" title="Maven介绍"></a>Maven介绍</h3><p>Maven就是是专门为Java项目打造的管理和构建工具，它的主要功能有：</p><ul><li>提供了一套标准化的项目结构；</li><li>提供了一套标准化的构建流程（编译，测试，打包，发布……）；</li><li>提供了一套依赖管理机制。</li></ul><p>Maven是一个Java项目的管理和构建工具：</p><ul><li>Maven使用<code>pom.xml</code>定义项目内容，并使用预设的目录结构；</li><li>在Maven中声明一个依赖项可以自动下载并导入classpath；</li><li>Maven使用<code>groupId</code>，<code>artifactId</code>和<code>version</code>唯一定位一个依赖。</li></ul><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><ol><li><p>Maven的第一个作用就是解决依赖管理。我们声明了自己的项目需要<code>abc</code>，Maven会自动导入<code>abc</code>的jar包，再判断出<code>abc</code>需要<code>xyz</code>，又会自动导入<code>xyz</code>的jar包，这样，最终我们的项目会依赖<code>abc</code>和<code>xyz</code>两个jar包。</p></li><li><p>Maven定义了几种依赖关系，分别是<code>compile</code>、<code>test</code>、<code>runtime</code>和<code>provided</code>：</p></li></ol><table><thead><tr><th align="left">scope</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">compile</td><td align="left">编译时需要用到该jar包（默认）直接放入classpath</td><td align="left">commons-logging</td></tr><tr><td align="left">test</td><td align="left">编译Test时需要用到该jar包，正常运行时并不需要</td><td align="left">junit</td></tr><tr><td align="left">runtime</td><td align="left">编译时不需要，但运行时需要用到</td><td align="left">mysql</td></tr><tr><td align="left">provided</td><td align="left">编译时需要用到，但运行时由JDK或某个服务器提供</td><td align="left">servlet-api</td></tr></tbody></table><ol start="3"><li><p>Maven如何知道从何处下载所需的依赖？也就是相关的jar包？答案是Maven维护了一个中央仓库（<a href="https://repo1.maven.org/">repo1.maven.org</a>），所有第三方库将自身的jar以及相关信息上传至中央仓库，Maven就可以从中央仓库把所需依赖下载到本地。</p><p>Maven并不会每次都从中央仓库下载jar包。一个jar包一旦被下载过，就会被Maven自动缓存在本地目录（用户主目录的<code>.m2</code>目录），所以，除了第一次编译时因为下载需要时间会比较慢，后续过程因为有本地缓存，并不会重复下载相同的jar包。</p></li><li><p>对于某个依赖，Maven只需要3个变量即可唯一确定某个jar包：</p><ul><li>groupId：属于组织的名称，类似Java的包名；</li><li>artifactId：该jar包自身的名称，类似Java的类名；</li><li>version：该jar包的版本。</li></ul><p>注：只有以<code>-SNAPSHOT</code>结尾的版本号会被Maven视为开发版本，开发版本每次都会重复下载，这种SNAPSHOT版本只能用于内部私有的Maven repo，公开发布的版本不允许出现SNAPSHOT。</p></li><li><p>除了可以从Maven的中央仓库下载外，还可以从Maven的镜像仓库下载。</p><p>中国区用户可以使用阿里云提供的Maven镜像仓库。使用Maven镜像仓库需要一个配置，在用户主目录下进入<code>.m2</code>目录，创建一个<code>settings.xml</code>配置文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 国内推荐阿里云的Maven镜像 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="构建流程"><a href="#构建流程" class="headerlink" title="构建流程"></a>构建流程</h3><p>Maven的生命周期由一系列阶段（phase）构成，以内置的生命周期<code>default</code>为例，它包含以下phase：</p><ul><li>validate</li><li>initialize</li><li>generate-sources</li><li>process-sources</li><li>generate-resources</li><li>process-resources</li><li>compile</li><li>process-classes</li><li>generate-test-sources</li><li>process-test-sources</li><li>generate-test-resources</li><li>process-test-resources</li><li>test-compile</li><li>process-test-classes</li><li>test</li><li>prepare-package</li><li>package</li><li>pre-integration-test</li><li>integration-test</li><li>post-integration-test</li><li>verify</li><li>install</li><li>deploy</li></ul><p>如果我们运行<code>mvn package</code>，Maven就会执行<code>default</code>生命周期，它会从开始一直运行到<code>package</code>这个phase为止。</p><p>所以，我们使用<code>mvn</code>这个命令时，后面的参数是phase，Maven自动根据生命周期运行到指定的phase。</p><p>在实际开发过程中，经常使用的命令有：</p><p><code>mvn clean</code>：清理所有生成的class和jar；</p><p><code>mvn clean compile</code>：先清理，再执行到<code>compile</code>；</p><p><code>mvn clean test</code>：先清理，再执行到<code>test</code>，因为执行<code>test</code>前必须执行<code>compile</code>，所以这里不必指定<code>compile</code>；</p><p><code>mvn clean package</code>：先清理，再执行到<code>package</code>。</p><p>大多数phase在执行过程中，因为我们通常没有在<code>pom.xml</code>中配置相关的设置，所以这些phase什么事情都不做。</p><p>关于goal，其实我们类比一下就明白了：</p><ul><li>lifecycle相当于Java的package，它包含一个或多个phase；</li><li>phase相当于Java的class，它包含一个或多个goal；</li><li>goal相当于class的method，它其实才是真正干活的。</li></ul><p>大多数情况，我们只要指定phase，就默认执行这些phase默认绑定的goal，只有少数情况，我们可以直接指定运行一个goal，例如，启动Tomcat服务器：<code>mvn tomcat:run</code></p><h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><ol><li><p>使用Maven构建项目就是执行lifecycle，执行到指定的phase为止。每个phase会执行自己默认的一个或多个goal。goal是最小任务单元。</p></li><li><p>Maven将执行<code>compile</code>这个phase，这个phase会调用<code>compiler</code>插件执行关联的<code>compiler:compile</code>这个goal。</p><p>实际上，执行每个phase，都是通过某个插件（plugin）来执行的，Maven本身其实并不知道如何执行<code>compile</code>，它只是负责找到对应的<code>compiler</code>插件，然后执行默认的<code>compiler:compile</code>这个goal来完成编译。</p><p>所以，使用Maven，实际上就是配置好需要使用的插件，然后通过phase调用它们。</p></li><li><p>如果标准插件无法满足需求，我们还可以使用自定义插件。使用自定义插件的时候，需要声明。</p></li></ol><h3 id="模块管理"><a href="#模块管理" class="headerlink" title="模块管理"></a>模块管理</h3><p>注意到parent的<code>&lt;packaging&gt;</code>是<code>pom</code>而不是<code>jar</code>，因为<code>parent</code>本身不含任何Java代码。编写<code>parent</code>的<code>pom.xml</code>只是为了在各个模块中减少重复的配置。</p><h3 id="使用mvnw"><a href="#使用mvnw" class="headerlink" title="使用mvnw"></a>使用mvnw</h3><p>简单地说，Maven Wrapper就是给一个项目提供一个独立的，指定版本的Maven给它使用。</p><p>安装Maven Wrapper最简单的方式是在项目的根目录（即<code>pom.xml</code>所在的目录）下运行安装命令：<code>mvn -N io.takari:maven:0.7.6:wrapper</code></p><h3 id="发布Artifact（）"><a href="#发布Artifact（）" class="headerlink" title="发布Artifact（）"></a>发布Artifact（）</h3><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="网络编程基础"><a href="#网络编程基础" class="headerlink" title="网络编程基础"></a>网络编程基础</h3><ol><li><p>IP地址又分为公网IP地址和内网IP地址。公网IP地址可以直接被访问，内网IP地址只能在内网访问。内网IP地址类似于：</p><ul><li>192.168.x.x</li><li>10.x.x.x</li></ul><p>有一个特殊的IP地址，称之为本机地址，它总是<code>127.0.0.1</code>。</p></li><li><p>如果一台计算机有两块网卡，那么除了本机地址，它可以有两个IP地址，可以分别接入两个网络。通常连接两个网络的设备是路由器或者交换机，它至少有两个IP地址，分别接入不同的网络，让网络之间连接起来。</p></li><li><p>用<code>nslookup</code>可以查看域名对应的IP地址。</p></li><li><p>IP协议是一个分组交换，它不保证可靠传输。而TCP协议是传输控制协议，它是面向连接的协议，支持可靠传输和双向通信。TCP协议是建立在IP协议之上的，简单地说，IP协议只负责发数据包，不保证顺序和正确性，而TCP协议负责控制数据包传输，它在传输数据之前需要先建立连接，建立连接后才能传输数据，传输完后还需要断开连接。TCP协议之所以能保证数据的可靠传输，是通过接收确认、超时重传这些机制实现的。并且，TCP协议允许双向通信，即通信双方可以同时发送和接收数据。</p></li></ol><h3 id="TCP编程（）"><a href="#TCP编程（）" class="headerlink" title="TCP编程（）"></a>TCP编程（）</h3><ol><li>Socket是一个抽象概念，一个应用程序通过一个Socket来建立一个远程连接，而Socket内部通过TCP/IP协议把数据传输到网络：</li><li>一个Socket就是由IP地址和端口号（范围是0～65535）组成，可以把Socket简单理解为IP地址加端口号。端口号总是由操作系统分配，它是一个0～65535之间的数字，其中，小于1024的端口属于<em>特权端口</em>，需要管理员权限，大于1024的端口可以由任意用户的应用程序打开。<ul><li>对服务器端来说，它的Socket是指定的IP地址和指定的端口号；</li><li>对客户端来说，它的Socket是它所在计算机的IP地址和一个由操作系统分配的随机端口号。</li></ul></li></ol><blockquote><p>使用Java进行TCP编程时，需要使用Socket模型：</p><ul><li>服务器端用<code>ServerSocket</code>监听指定端口；（暴露IP:port给客户服务用）</li><li>客户端使用<code>Socket(InetAddress, port)</code>连接服务器；</li><li>服务器端用<code>accept()</code>接收连接并返回<code>Socket</code>；</li><li>双方通过<code>Socket</code>打开<code>InputStream</code>/<code>OutputStream</code>读写数据；</li><li>服务器端通常使用多线程同时处理多个客户端连接，利用线程池可大幅提升效率；</li><li><code>flush()</code>用于强制输出缓冲区到网络。</li></ul></blockquote><h3 id="UDP编程"><a href="#UDP编程" class="headerlink" title="UDP编程"></a>UDP编程</h3><p>使用UDP协议通信时，服务器和客户端双方无需建立连接：</p><ul><li>服务器端用<code>DatagramSocket(port)</code>监听端口；</li><li>客户端使用<code>DatagramSocket.connect()</code>指定远程地址和端口；</li><li>双方通过<code>receive()</code>和<code>send()</code>读写数据；</li><li><code>DatagramSocket</code>没有IO流接口，数据被直接写入<code>byte[]</code>缓冲区。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 服务器</span><span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 监听指定端口</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 无限循环</span>    <span class="token comment">// 数据缓冲区:</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    ds<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 收取一个UDP数据包</span>    <span class="token comment">// 收取到的数据存储在buffer中，由packet.getOffset(), packet.getLength()指定起始位置和长度</span>    <span class="token comment">// 将其按UTF-8编码转换为String:</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发送数据:</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token string">"ACK"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>    packet<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    ds<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 客户端</span><span class="token class-name">DatagramSocket</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ds<span class="token punctuation">.</span><span class="token function">setSoTimeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ds<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 连接指定服务器和端口</span><span class="token comment">// 发送:</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>ds<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 接收:</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>ds<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> resp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ds<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发送Email（）"><a href="#发送Email（）" class="headerlink" title="发送Email（）"></a>发送Email（）</h3><ol><li><p>电子邮件是从用户电脑的邮件软件，例如Outlook，发送到邮件服务器上，可能经过若干个邮件服务器的中转，最终到达对方邮件服务器上，收件方就可以用软件接收邮件</p></li><li><p>我们把类似Outlook这样的邮件软件称为MUA：Mail User Agent，意思是给用户服务的邮件代理；邮件服务器则称为MTA：Mail Transfer Agent，意思是邮件中转的代理；最终到达的邮件服务器称为MDA：Mail Delivery Agent，意思是邮件到达的代理。电子邮件一旦到达MDA，就不再动了。实际上，电子邮件通常就存储在MDA服务器的硬盘上，然后等收件人通过软件或者登陆浏览器查看邮件。</p></li><li><p>常用邮件服务商的SMTP信息：</p><ul><li>QQ邮箱：SMTP服务器是smtp.qq.com，端口是465/587；</li><li>163邮箱：SMTP服务器是smtp.163.com，端口是465；</li><li>Gmail邮箱：SMTP服务器是smtp.gmail.com，端口是465/587。</li></ul></li><li><p>首先，我们需要创建一个Maven工程，并把JavaMail相关的两个依赖加入进来：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.mail-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun.mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 服务器地址:</span><span class="token class-name">String</span> smtp <span class="token operator">=</span> <span class="token string">"smtp.office365.com"</span><span class="token punctuation">;</span><span class="token comment">// 登录用户名:</span><span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"jxsmtp101@outlook.com"</span><span class="token punctuation">;</span><span class="token comment">// 登录口令:</span><span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"********"</span><span class="token punctuation">;</span><span class="token comment">// 连接到SMTP服务器587端口:</span><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.host"</span><span class="token punctuation">,</span> smtp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SMTP主机名</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.port"</span><span class="token punctuation">,</span> <span class="token string">"587"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主机端口号</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.auth"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否需要用户认证</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mail.smtp.starttls.enable"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启用TLS加密</span><span class="token comment">// 获取Session实例:</span><span class="token class-name">Session</span> session <span class="token operator">=</span> <span class="token class-name">Session</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Authenticator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token class-name">PasswordAuthentication</span> <span class="token function">getPasswordAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PasswordAuthentication</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置debug模式便于调试:</span>session<span class="token punctuation">.</span><span class="token function">setDebug</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MimeMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置发送方地址:</span>message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span><span class="token string">"me@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置接收方地址:</span>message<span class="token punctuation">.</span><span class="token function">setRecipient</span><span class="token punctuation">(</span><span class="token class-name">Message<span class="token punctuation">.</span>RecipientType</span><span class="token punctuation">.</span>TO<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InternetAddress</span><span class="token punctuation">(</span><span class="token string">"xiaoming@somewhere.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置邮件主题:</span>message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置邮件正文:</span>message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Hi Xiaoming..."</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// html邮件 message.setText(body, "UTF-8", "html");</span><span class="token comment">// 发送:</span><span class="token class-name">Transport</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>发送附件：。。。</p></li><li><p>发送内嵌图片的HTML邮件。。。</p></li></ol><h3 id="接收Email（略）"><a href="#接收Email（略）" class="headerlink" title="接收Email（略）"></a>接收Email（略）</h3><h3 id="HTTP编程"><a href="#HTTP编程" class="headerlink" title="HTTP编程"></a>HTTP编程</h3><p>详情：<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1319099982413858">HTTP编程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p><ol><li><p>HTTP是HyperText Transfer Protocol的缩写，翻译为超文本传输协议，它是基于TCP协议之上的一种请求-响应协议。 </p></li><li><p>当浏览器希望访问某个网站时，浏览器和网站服务器之间首先建立TCP连接，且服务器总是使用<code>80</code>端口和加密端口<code>443</code>，然后，浏览器向服务器发送一个HTTP请求，服务器收到后，返回一个HTTP响应，并且在响应中包含了HTML的网页内容，这样，浏览器解析HTML后就可以给用户显示网页了。（==也就是先TCP三次握手建立连接通道，然后客户端向服务器发送HTTP请求，得到服务器响应，最后TCP四次挥手断开连接/关闭连接通道==）</p></li><li><blockquote><ol><li><p>HTTP请求的格式是固定的，它由HTTP Header和HTTP Body两部分构成。第一行总是<code>请求方法 路径 HTTP版本</code>，例如，<code>GET / HTTP/1.1</code>表示使用<code>GET</code>请求，路径是<code>/</code>，版本是<code>HTTP/1.1</code>。</p></li><li><p>后续的每一行都是固定的<code>Header: Value</code>格式，我们称为HTTP Header，服务器依靠某些特定的Header来识别客户端请求，例如：</p><ul><li><p>Host：表示请求的域名，因为一台服务器上可能有多个网站，因此有必要依靠Host来识别请求是发给哪个网站的；</p></li><li><p>User-Agent：表示客户端自身标识信息，不同的浏览器有不同的标识，服务器依靠User-Agent判断客户端类型是IE还是Chrome，是Firefox还是一个Python爬虫；</p></li><li><p>Accept：表示客户端能处理的HTTP响应格式，<code>*/*</code>表示任意格式，<code>text/*</code>表示任意文本，<code>image/png</code>表示PNG格式的图片；</p></li><li><p>Accept-Language：表示客户端接收的语言，多种语言按优先级排序，服务器依靠该字段给用户返回特定语言的网页版本。</p></li></ul></li><li><p>如果是<code>GET</code>请求，那么该HTTP请求只有HTTP Header，没有HTTP Body。如果是<code>POST</code>请求，那么该HTTP请求带有Body，以一个空行分隔。</p></li><li><p><code>POST</code>请求通常要设置<code>Content-Type</code>表示Body的类型，<code>Content-Length</code>表示Body的长度，这样服务器就可以根据请求的Header和Body做出正确的响应。</p></li></ol></blockquote></li><li><p>使用Java进行HTTP客户端编程仅限于获得响应内容，Java标准库提供了基于HTTP的包，但是要注意，早期的JDK版本是通过<code>HttpURLConnection</code>访问HTTP，典型代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"http://www.example.com/path/to/target?a=1&amp;b=2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HttpURLConnection</span> conn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">setUseCaches</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 请求超时5秒</span><span class="token comment">// 设置HTTP头:</span>conn<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> <span class="token string">"*/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/5.0 (compatible; MSIE 11; Windows NT 5.1)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 连接并发送HTTP请求:</span>conn<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断HTTP响应是否200:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"bad response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取所有响应Header:</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> map <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getHeaderFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取响应内容:</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从Java 11开始，引入了新的<code>HttpClient</code>，它使用链式调用的API，能大大简化HTTP的处理。</p><p>我们来看一下如何使用新版的<code>HttpClient</code>。首先需要创建一个全局<code>HttpClient</code>实例，因为<code>HttpClient</code>内部使用线程池优化多个HTTP连接，可以复用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Get请求</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>URI<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpClient<span class="token punctuation">.</span>Version</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 全局HttpClient:</span>    <span class="token keyword">static</span> <span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"https://www.sina.com.cn/"</span><span class="token punctuation">;</span>        <span class="token class-name">HttpRequest</span> request <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 设置Header:</span>            <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> <span class="token string">"Java HttpClient"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> <span class="token string">"*/*"</span><span class="token punctuation">)</span>            <span class="token comment">// 设置超时:</span>            <span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 设置版本:</span>            <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token class-name">Version</span><span class="token punctuation">.</span>HTTP_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 使用POST并设置Body:</span>   <span class="token comment">// .POST(BodyPublishers.ofString(body, StandardCharsets.UTF_8)).build();</span>        <span class="token class-name">HttpResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token class-name">HttpResponse<span class="token punctuation">.</span>BodyHandlers</span><span class="token punctuation">.</span><span class="token function">ofString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// HTTP允许重复的Header，因此一个Header可对应多个Value:</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> headers <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> header <span class="token operator">:</span> headers<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="RMI远程调用（）"><a href="#RMI远程调用（）" class="headerlink" title="RMI远程调用（）"></a>RMI远程调用（）</h3><p>Java的RMI远程调用是指，一个JVM中的代码可以通过网络实现远程调用另一个JVM的某个方法。RMI是Remote Method Invocation的缩写。</p><p>要实现RMI，服务器和客户端必须共享同一个接口。Java的RMI规定此接口必须派生自<code>java.rmi.Remote</code>，并在每个方法声明抛出<code>RemoteException</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 服务器端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"create World clock remote service..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化一个WorldClock:</span>        <span class="token class-name">WorldClock</span> worldClock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorldClockService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将此服务转换为远程服务接口:</span>        <span class="token class-name">WorldClock</span> skeleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WorldClock</span><span class="token punctuation">)</span> <span class="token class-name">UnicastRemoteObject</span><span class="token punctuation">.</span><span class="token function">exportObject</span><span class="token punctuation">(</span>worldClock<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将RMI服务注册到1099端口:</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注册此服务，服务名为"WorldClock":</span>        registry<span class="token punctuation">.</span><span class="token function">rebind</span><span class="token punctuation">(</span><span class="token string">"WorldClock"</span><span class="token punctuation">,</span> skeleton<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 上述代码主要目的是通过RMI提供的相关类，将我们自己的WorldClock实例注册到RMI服务上。RMI的默认端口是1099，最后一步注册服务时通过rebind()指定服务名称为"WorldClock"。</span><span class="token comment">// 客户端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">NotBoundException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 连接到服务器localhost，端口1099:</span>        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查找名称为"WorldClock"的服务并强制转型为WorldClock接口:</span>        <span class="token class-name">WorldClock</span> worldClock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WorldClock</span><span class="token punctuation">)</span> registry<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"WorldClock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 正常调用接口方法:</span>        <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> worldClock<span class="token punctuation">.</span><span class="token function">getLocalDateTime</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 打印调用结果:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="XML与JSON"><a href="#XML与JSON" class="headerlink" title="XML与JSON"></a>XML与JSON</h2><p>如何使用Java 读写 XML和JSON</p><h3 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h3><ol><li>XML是可扩展标记语言（eXtensible Markup Language）的缩写，它是是一种数据表示格式，可以描述非常复杂的数据结构，常用于传输和存储数据。</li><li>XML有几个特点：一是纯文本，默认使用UTF-8编码，二是可嵌套，适合表示结构化数据。如果把XML内容存为文件，那么它就是一个XML文件，例如<code>book.xml</code>。此外，XML内容经常通过网络作为消息传输。（XML常用于配置文件、网络消息传输等。）</li><li>如何验证XML文件的正确性呢？最简单的方式是通过浏览器验证。可以直接把XML文件拖拽到浏览器窗口，如果格式错误，浏览器会报错。</li><li>XML是一个技术体系，除了我们经常用到的XML文档本身外，XML还支持：<ul><li>DTD和XSD：验证XML结构和数据是否有效；</li><li>Namespace：XML节点和属性的名字空间；</li><li>XSLT：把XML转化为另一种文本；</li><li>XPath：一种XML节点查询语言；</li></ul></li></ol><h3 id="使用DOM"><a href="#使用DOM" class="headerlink" title="使用DOM"></a>使用DOM</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/book.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DocumentBuilderFactory</span> dbf <span class="token operator">=</span> <span class="token class-name">DocumentBuilderFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DocumentBuilder</span> db <span class="token operator">=</span> dbf<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Document</span> doc <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>Java提供的DOM API可以将XML解析为DOM结构，以Document对象表示；</li><li>DOM可在内存中完整表示XML数据结构；</li><li>DOM解析速度慢，内存占用大。</li></ol><h3 id="使用SAX"><a href="#使用SAX" class="headerlink" title="使用SAX"></a>使用SAX</h3><p>SAX是Simple API for XML的缩写，它是一种基于流的解析方式，边读取XML边解析，并以事件回调的方式让调用者获取数据。因为是一边读一边解析，所以无论XML有多大，占用的内存都很小。</p><p>SAX解析会触发一系列事件：</p><ul><li>startDocument：开始读取XML文档；</li><li>startElement：读取到了一个元素，例如<code>&lt;book&gt;</code>；</li><li>characters：读取到了字符；</li><li>endElement：读取到了一个结束的元素，例如<code>&lt;/book&gt;</code>；</li><li>endDocument：读取XML文档结束。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/book.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SAXParserFactory</span> spf <span class="token operator">=</span> <span class="token class-name">SAXParserFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SAXParser</span> saxParser <span class="token operator">=</span> spf<span class="token punctuation">.</span><span class="token function">newSAXParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>saxParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//////////////////</span><span class="token keyword">class</span> <span class="token class-name">MyHandler</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultHandler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SAXException</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"start document"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">endDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SAXException</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"end document"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startElement</span><span class="token punctuation">(</span><span class="token class-name">String</span> uri<span class="token punctuation">,</span> <span class="token class-name">String</span> localName<span class="token punctuation">,</span> <span class="token class-name">String</span> qName<span class="token punctuation">,</span> <span class="token class-name">Attributes</span> attributes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SAXException</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"start element:"</span><span class="token punctuation">,</span> localName<span class="token punctuation">,</span> qName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">endElement</span><span class="token punctuation">(</span><span class="token class-name">String</span> uri<span class="token punctuation">,</span> <span class="token class-name">String</span> localName<span class="token punctuation">,</span> <span class="token class-name">String</span> qName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SAXException</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"end element:"</span><span class="token punctuation">,</span> localName<span class="token punctuation">,</span> qName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">characters</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SAXException</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"characters:"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> start<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">SAXParseException</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SAXException</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> objs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> obj <span class="token operator">:</span> objs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用Jackson"><a href="#使用Jackson" class="headerlink" title="使用Jackson"></a>使用Jackson</h3><p>一个名叫Jackson的开源的第三方库可以轻松做到XML到JavaBean的转换。我们要使用Jackson，先添加两个Maven的依赖：</p><ul><li>com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.10.1</li><li>org.codehaus.woodstox:woodstox-core-asl:4.4.1</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/book.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">JacksonXmlModule</span> <span class="token keyword">module</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JacksonXmlModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">XmlMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlMapper</span><span class="token punctuation">(</span><span class="token keyword">module</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Book</span> book <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>isbn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>tags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>pubDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用JSON（）"><a href="#使用JSON（）" class="headerlink" title="使用JSON（）"></a>使用JSON（）</h3><p>JSON是JavaScript Object Notation的缩写，</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 浏览器直接支持使用JavaScript对JSON进行读写：</span><span class="token comment">// JSON string to JavaScript object:</span>jsObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// JavaScript object to JSON string:</span>jsonStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jackson</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/book.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 反序列化时忽略不存在的JavaBean属性:</span>mapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">DeserializationFeature</span><span class="token punctuation">.</span>FAIL_ON_UNKNOWN_PROPERTIES<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Book</span> book <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 反序列化</span><span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JDBC编程"><a href="#JDBC编程" class="headerlink" title="JDBC编程"></a>JDBC编程</h2><h3 id="JDBC简介"><a href="#JDBC简介" class="headerlink" title="JDBC简介"></a>JDBC简介</h3><p>JDBC是Java DataBase Connectivity的缩写，它是Java程序访问数据库的标准接口。</p><p>使用Java程序访问数据库时，Java代码并不是直接通过TCP连接去访问数据库，而是通过JDBC接口来访问，而JDBC接口则通过JDBC驱动来实现真正对数据库的访问。</p><p>使用JDBC的好处是：</p><ul><li>各数据库厂商使用相同的接口，Java代码不需要针对不同数据库分别开发；</li><li>Java程序编译期仅依赖java.sql包，不依赖具体数据库的jar包；</li><li>可随时替换底层数据库，访问数据库的Java代码基本不变。</li></ul><h3 id="JDBC查询"><a href="#JDBC查询" class="headerlink" title="JDBC查询"></a>JDBC查询</h3><ol><li><p>因为JDBC接口并不知道我们要使用哪个数据库，所以，用哪个数据库，我们就去使用哪个数据库的“实现类”，我们把某个数据库实现了JDBC接口的jar包称为JDBC驱动。</p></li><li><p>注意到这里添加依赖的<code>scope</code>是<code>runtime</code>，因为编译Java程序并不需要MySQL的这个jar包，只有在运行期才需要使用。如果把<code>runtime</code>改成<code>compile</code>，虽然也能正常编译，但是在IDE里写程序的时候，会多出来一大堆类似<code>com.mysql.jdbc.Connection</code>这样的类，非常容易与Java标准库的JDBC接口混淆，所以坚决不要设置为<code>compile</code>。</p></li><li><p>Connection代表一个JDBC连接，它相当于Java程序到数据库的连接（通常是TCP连接）。打开一个Connection时，需要准备URL、用户名和口令，才能成功连接到数据库。</p></li><li><p>URL是由数据库厂商指定的格式，例如，MySQL的URL是：</p><p><code>jdbc:mysql://localhost:3306/learnjdbc?useSSL=false&amp;characterEncoding=utf8</code></p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// JDBC连接的URL, 不同数据库有不同的格式:</span><span class="token class-name">String</span> JDBC_URL <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">;</span><span class="token class-name">String</span> JDBC_USER <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token class-name">String</span> JDBC_PASSWORD <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">;</span><span class="token comment">// 获取连接:</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>JDBC_URL<span class="token punctuation">,</span> JDBC_USER<span class="token punctuation">,</span> JDBC_PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// TODO: 访问数据库...</span><span class="token comment">// 关闭连接:</span>conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自动释放jdbc资源</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>JDBC_URL<span class="token punctuation">,</span> JDBC_USER<span class="token punctuation">,</span> JDBC_PASSWORD<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// jdbc查询</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>JDBC_URL<span class="token punctuation">,</span> JDBC_USER<span class="token punctuation">,</span> JDBC_PASSWORD<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"SELECT id, grade, name, gender FROM students WHERE gender=1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 一开始获得ResultSet时当前行不是第一行</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 判断是否有下一行记录，如果有，将自动把当前行移动到下一行</span>                <span class="token keyword">long</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意：索引从1开始</span>                <span class="token keyword">long</span> grade <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> gender <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>PreparedStatement</code>可以<em>完全避免SQL注入</em>的问题，因为<code>PreparedStatement</code>始终使用<code>?</code>作为占位符，并且把数据连同SQL本身传给数据库，这样可以保证每次传给数据库的SQL语句是相同的，只是占位符的数据不同，还能高效利用数据库本身对查询的缓存。 使用Java对数据库进行操作时，必须使用PreparedStatement，严禁任何通过参数拼字符串的代码！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>JDBC_URL<span class="token punctuation">,</span> JDBC_USER<span class="token punctuation">,</span> JDBC_PASSWORD<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"SELECT id, grade, name, gender FROM students WHERE gender=? AND grade=?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意：索引从1开始</span>        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">long</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> grade <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string">"grade"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> gender <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDBC更新"><a href="#JDBC更新" class="headerlink" title="JDBC更新"></a>JDBC更新</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 插入/更新/删除 数据 ，都是用的 executeUpdate()</span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>JDBC_URL<span class="token punctuation">,</span> JDBC_USER<span class="token punctuation">,</span> JDBC_PASSWORD<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>            <span class="token string">"INSERT INTO students (id, grade, name, gender) VALUES (?,?,?,?)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意：索引从1开始</span>        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// grade</span>        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name</span>        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gender</span>        <span class="token comment">// 返回值是int，表示插入的记录数量。</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取自增主键的正确写法是在创建<code>PreparedStatement</code>的时候，指定一个<code>RETURN_GENERATED_KEYS</code>标志位，表示JDBC驱动必须返回插入的自增主键。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>        <span class="token string">"INSERT INTO students (grade, name, gender) VALUES (?,?,?)"</span><span class="token punctuation">,</span>        <span class="token class-name">Statement</span><span class="token punctuation">.</span>RETURN_GENERATED_KEYS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">getGeneratedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDBC事务"><a href="#JDBC事务" class="headerlink" title="JDBC事务"></a>JDBC事务</h3><p>数据库事务可以并发执行，而数据库系统从效率考虑，对事务定义了不同的隔离级别。SQL标准定义了4种隔离级别，</p><table><thead><tr><th align="left">Isolation Level</th><th align="left">脏读（Dirty Read）</th><th align="left">不可重复读（Non Repeatable Read）</th><th align="left">幻读（Phantom Read）</th></tr></thead><tbody><tr><td align="left">Read Uncommitted</td><td align="left">Yes</td><td align="left">Yes</td><td align="left">Yes</td></tr><tr><td align="left">Read Committed</td><td align="left">-</td><td align="left">Yes</td><td align="left">Yes</td></tr><tr><td align="left">Repeatable Read</td><td align="left">-</td><td align="left">-</td><td align="left">Yes</td></tr><tr><td align="left">Serializable</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 关闭自动提交:</span>    conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设定隔离级别为READ COMMITTED:</span>    <span class="token comment">// conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);</span>    <span class="token comment">// 执行多条SQL语句:</span>    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 提交事务:</span>    conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 回滚事务:</span>    conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上，默认情况下，我们获取到<code>Connection</code>连接后，总是处于“自动提交”模式，也就是每执行一条SQL都是作为事务自动执行的，这也是为什么前面几节我们的更新操作总能成功的原因：因为默认有这种“隐式事务”。只要关闭了<code>Connection</code>的<code>autoCommit</code>，那么就可以在一个事务中执行多条语句，事务以<code>commit()</code>方法结束。</p><h3 id="JDBC-Batch"><a href="#JDBC-Batch" class="headerlink" title="JDBC Batch"></a>JDBC Batch</h3><p>SQL数据库对SQL语句相同，只有参数不同的若干语句可以作为batch执行，即批量执行，这种操作有特别优化，速度远远快于循环执行每个SQL。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// </span><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO students (name, gender, grade, score) VALUES (?, ?, ?, ?)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 对同一个PreparedStatement反复设置参数并调用addBatch():</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> s <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setBoolean</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加到batch</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 执行batch， 返回值：获取每组参数执行后影响的结果数量。</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> ns<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">" inserted."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// batch中每个SQL执行的结果数量</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDBC连接池"><a href="#JDBC连接池" class="headerlink" title="JDBC连接池"></a>JDBC连接池</h3><p>我们在讲多线程的时候说过，创建线程是一个昂贵的操作，如果有大量的小任务需要执行，并且频繁地创建和销毁线程，实际上会消耗大量的系统资源，往往创建和消耗线程所耗费的时间比执行任务的时间还长，所以，为了提高效率，可以用线程池。</p><p>类似的，在执行JDBC的增删改查的操作时，如果每一次操作都来一次打开连接，操作，关闭连接，那么创建和销毁JDBC连接的开销就太大了。为了避免频繁地创建和销毁JDBC连接，我们可以通过连接池（Connection Pool）复用已经创建好的连接。</p><p>有了连接池以后，我们如何使用它呢？和前面的代码类似，只是获取<code>Connection</code>时，把<code>DriverManage.getConnection()</code>改为<code>datasource.getConnection()</code>：</p><p>小总结：</p><p>数据库连接池是一种复用<code>Connection</code>的组件，它可以避免反复创建新连接，提高JDBC代码的运行效率；</p><p>可以配置连接池的详细参数并监控连接池。</p><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="Lambda基础"><a href="#Lambda基础" class="headerlink" title="Lambda基础"></a>Lambda基础</h3><ol><li><p>无论是实例方法，还是静态方法，本质上都相当于过程式语言的函数。</p><p>只不过Java的实例方法隐含地传入了一个<code>this</code>变量，即实例方法总是有一个隐含参数<code>this</code>。</p></li><li><p>函数式编程（Functional Programming）是把函数作为基本运算单元，函数可以作为变量，可以接收函数，还可以返回函数。历史上研究函数式编程的理论是Lambda演算，所以我们经常把支持函数式编程的编码风格称为Lambda表达式。</p></li></ol><p>在Java程序中，我们经常遇到一大堆单方法接口，即一个接口只定义了一个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Comparator接口只有一个compare方法,以匿名类方式实现如下</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 从Java 8开始，我们可以用Lambda表达式替换单方法接口。改写上述代码如下：</span><span class="token comment">// 类似 箭头函数</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Lemon"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>小总结：</p><ol><li>单方法接口被称为<code>FunctionalInterface</code>。</li><li>接收<code>FunctionalInterface</code>作为参数的时候，可以把实例化的匿名类改写为Lambda表达式，能大大简化代码。</li><li>Lambda表达式的参数和返回值均可由编译器自动推断。</li></ol></blockquote><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p><strong>静态方法引用</strong></p><ul><li>使用Lambda表达式，我们就可以不必编写<code>FunctionalInterface</code>接口的实现类，从而简化代码：</li><li>实际上，除了Lambda表达式，我们还可以直接传入方法引用。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Lemon"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token class-name">Main</span><span class="token operator">::</span><span class="token function">cmp</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过 Main::cmp 来指明实现方法的函数头和函数体</span>        <span class="token comment">// 二者的方法签名一致</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对象的实例方法引用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Lemon"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token class-name">Main</span><span class="token operator">::</span><span class="token function">cmp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 实例方法有一个隐含的this参数，String类的compareTo()方法在实际调用的时候，第一个隐含参数总是传入this，</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 实例方法，默认第一个传递this参数</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>构造方法引用</strong></p><ul><li><p>除了可以引用静态方法和实例方法，我们还可以引用构造方法。</p></li><li><p>构造方法虽然没有<code>return</code>语句，但它会隐式地返回<code>this</code>实例，类型就是<code>Person</code>，因此，此处可以引用构造方法。构造方法的引用写法是<code>类名::new</code>，因此，此处传入<code>Person::new</code>。</p></li></ul><blockquote><p>小总结：</p><ol><li><p><code>FunctionalInterface</code>允许传入：</p><ul><li><p>接口的实现类（传统写法，代码较繁琐）；</p></li><li><p>Lambda表达式（只需列出参数名，由编译器推断类型）；</p></li><li><p>符合方法签名的静态方法；</p></li><li><p>符合方法签名的实例方法（实例类型被看做第一个参数类型）；</p></li><li><p>符合方法签名的构造方法（实例类型被看做返回类型）。</p></li></ul></li><li><p><code>FunctionalInterface</code>不强制继承关系，不需要方法名称相同，只要求方法参数（类型和数量）与方法返回类型相同，即认为方法签名相同。</p></li></ol></blockquote><h3 id="使用Stream"><a href="#使用Stream" class="headerlink" title="使用Stream"></a>使用Stream</h3>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能概述</title>
      <link href="/posts/15354/"/>
      <url>/posts/15354/</url>
      
        <content type="html"><![CDATA[<h2 id="人工智能概述"><a href="#人工智能概述" class="headerlink" title="人工智能概述"></a><strong>人工智能概述</strong></h2><p>人工智能（Artificial Intelligence，简写为 AI）是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。</p><h3 id="人工智能的起源"><a href="#人工智能的起源" class="headerlink" title="人工智能的起源"></a>人工智能的起源</h3><p>人工智能夏季研讨会( Summer Research Project on Artificial Intelligence )——达特茅斯会议是<strong>麦卡锡</strong>发起的，但人工智能的这个词的提出另有其人，英国数学家**伍德华( Philip Woodward )**给《新科学家》杂志写信说他是 AI 一词的原创者。</p><h3 id="人工智能的定义"><a href="#人工智能的定义" class="headerlink" title="人工智能的定义"></a>人工智能的定义</h3><p>斯滕伯格( R. Sternberg )就智能给出了定义：<strong>“智能是个人从经验中学习、理性思考、记忆重要信息，以及应付日常生活需求的认知能力。”</strong></p><p>也许拉斐尔( Raphael )的说法最贴切：<strong>“人工智能是一门科学，这门科学让机器做人类需要智能才能完成的事。”</strong></p><h3 id="实现人工智能的方法"><a href="#实现人工智能的方法" class="headerlink" title="实现人工智能的方法"></a>实现人工智能的方法</h3><blockquote><p>想要实现人工智能的方法有很多，如<strong>搜索、二人博弈、产生式规则和专家系统、机器学习、深度学习、遗传算法</strong>等。</p></blockquote><ol><li><p><strong>搜索</strong></p><ul><li>最简单粗暴的方法就是盲目搜索。盲目搜索的意思就是不管行不行，先试了再说。比如宽度优先搜索算法( BFS )就是一种典型的盲目搜索算法。</li><li>那有没有好一点的搜索算法能够“智能”一点，不那么漫无目的的搜索呢？有！那就是启发式搜索。<strong>启发式搜索算法有很多种，如爬山法、最佳优先搜索、A*算法等都属于启发式搜索算法。</strong></li></ul></li><li><p><strong>二人博弈</strong></p><ul><li>二人博弈可以看成是两个人在玩对战游戏，比如下象棋。</li><li>是在说博弈论吗？？？</li></ul></li><li><p><strong>产生式规则和专家系统</strong></p><ul><li><p>在人工智能中，产生式规则是知识表示的方法。产生式规则具有如下的一般形式：<code>if(条件) then 动作</code></p></li><li><p><code>if(下雨了) then 打伞</code></p><p><code>if(感冒了) then 吃感冒药</code></p><p><code>if(饿了) then 吃饭</code></p><p>如果我们使用这些经验知识作为系统的行为准则的话，那这样的系统就称之为专家系统。</p></li><li><p>A、专家系统的核心是一堆if-then的集合</p></li><li><p>B、产生式规则的形式为if-then</p></li></ul></li><li><p><strong>机器学习</strong></p><ul><li><strong>这里所谓的“学习”是指程序或者系统从大量的历史数据中总结出规律，当得到新数据之后，我们的程序或系统可以根据之前历史数据所总结出的规律来对新数据进行预测。</strong></li><li>这个过程可以看成是在总结规律。而当你再看到一张你从来没看到过的钢铁侠的图片，你还是能够认出这是钢铁侠。</li><li>这里可以看成是根据历史数据所总结出来的经验或规律来对新数据进行预测。</li><li><strong>所以说机器学习的一个主要目的，就是把人类思考归纳经验的过程，转化为程序通过对数据的处理计算得出模型的过程。</strong></li></ul></li><li><p><strong>深度学习</strong></p><ul><li>人的视觉系统的信息处理是分级的：从视网膜( Retina )出发，经过低级的 V1 区提取边缘特征，到 V2 区的基本形状或目标的局部，再到高层的整个目标（如判定为一张人脸），以及到更高层的 PFC (前额叶皮层)进行分类判断等。</li><li><strong>高层的特征是低层特征的组合，从低层到高层的特征表达越来越抽象和概念化，也即越来越能表现语义或者意图。</strong></li><li>深度学习的概念就是==源于人工神经网络==的研究。深度学习通过组合低层特征形成更加抽象的高层表示属性类别或特征，以发现数据的特征表示。</li><li>深度学习是机器学习的一个新的领域，其动机在于建立可以模拟人脑进行分析学习的神经网络，它模仿人脑的机制来解释数据，例如，图像、声音和文本。<strong>深度学习之所以被称为“深度”，是因为之前的机器学习方法都是浅层学习，而深度学习是让层数较多的多层神经网络可以训练，能够运行起来而演化出来的一系列的新的结构和新的方法。</strong></li></ul></li><li><p><strong>遗传算法</strong></p><ul><li>深度学习是模拟人脑的神经系统来发现数据的特征表示，从而得到我们想要的解。</li><li>而遗传算法则是模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，是一种通过模拟自然进化过程搜索最优解的方法。</li></ul></li></ol><h3 id="人工智能的进展"><a href="#人工智能的进展" class="headerlink" title="人工智能的进展"></a>人工智能的进展</h3><p>现在人工智能为我们人类带来了越来越多的便利和改变，如智能推荐、能源控制、自动驾驶、智能助理等。</p><p><strong>智能推荐</strong></p><p>它会根据你平时的行为(如之前看过什么店铺，之前买过哪些商品等)进行分析，从而向你推荐你可能喜欢商品。</p><p><strong>能源控制</strong></p><p>谷歌旗下的 DeepMind 已利用机器学习来更好的降低数据中心的能耗，并与数据中心的历史能源使用量相比，它现在平均能够节省 30% 的能源。</p><p><strong>自动驾驶</strong></p><p>自动驾驶汽车是智能汽车的一种，主要依靠车内的以计算机系统为主的智能驾驶仪来实现自动驾驶的目的，而且自动驾驶分为 L0 到 L5 这 5 个等级。</p><p><strong>智能助理</strong></p><p>图灵测试是目前用来衡量人工智能是否更像人类的测试，那人工智能可以完美的模仿人类说话吗？谷歌告诉我们这一点的可行性。在 I/O 开发大会上谷歌的智能助理给人打电话进行工作预约，整个过程非常完美，人类一点也不知道跟自己对话的是机器人。</p><h2 id="搜索问题与技术"><a href="#搜索问题与技术" class="headerlink" title="搜索问题与技术"></a><strong>搜索问题与技术</strong></h2><p>人类的思维过程可以看作是一个搜索过程。</p><h3 id="搜索策略"><a href="#搜索策略" class="headerlink" title="搜索策略"></a>搜索策略</h3><p><strong>搜索空间与解路径</strong></p><p>在 AlphaGo Zero 下棋的时候有一个过程非常重要，那就是搜索。如下图所示(其中像蜘蛛网样展开的结点的集合（每一次展开可选择的集合），我们通常称之为<strong>搜索空间</strong>。加粗显示的路径通常称之为<strong>解路径</strong>。</p><p><img src="https://data.educoder.net/api/attachments/349458" alt="预览大图"></p><p><strong>搜索策略</strong></p><p>在搜索时通常有两种方式，分别为：<strong>盲目搜索</strong>与<strong>启发式搜索</strong>。</p><p><strong>盲目搜索的意思是不关心待解决问题的特性，而是不管三七二一，按照固定的规则或者随机的进行搜索。</strong>常用的盲目搜索算法有深度优先遍历算法与广度优先遍历算法。</p><p><strong>启发式搜索的意思是根据待解决问题的特性，动态地来制定搜索的规则。</strong>常用的启发式算法有爬山法、A* 算法等。</p><h3 id="盲目搜索"><a href="#盲目搜索" class="headerlink" title="盲目搜索"></a>盲目搜索</h3><h4 id="深度优先搜索算法DFS"><a href="#深度优先搜索算法DFS" class="headerlink" title="深度优先搜索算法DFS"></a>深度优先搜索算法DFS</h4><p><img src="https://data.educoder.net/api/attachments/349698" alt="预览大图"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''迷宫的定义：A能走到B和CB能走到D和EC能走到FF能走到G和HD,E,G,H是死胡同'''</span>graph <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'E'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'G'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'H'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token punctuation">,</span> visited<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    深度优先搜索，从A走到H    :param graph: 待搜索的迷宫    :param start: 开始搜索的起点    :param visited:  已经搜索过的地点集合    '''</span>    <span class="token keyword">if</span> visited <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        visited <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>start<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment"># 当前地点为H时结束搜索</span>    <span class="token keyword">if</span> start <span class="token operator">==</span> <span class="token string">'H'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    <span class="token comment"># 看看当前位置有哪些路可以走，如果能走并且之前没有走过就走</span>    <span class="token keyword">for</span> v <span class="token keyword">in</span> graph<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> v <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>            dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> v<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token comment"># 从迷宫的A走到H，并按搜索的先后顺序打印地点</span>dfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="广度优先搜索算法BFS"><a href="#广度优先搜索算法BFS" class="headerlink" title="广度优先搜索算法BFS"></a>广度优先搜索算法BFS</h4><p><img src="https://data.educoder.net/api/attachments/349792" alt="预览大图"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''迷宫的定义：A能走到B和CB能走到D和EC能走到FF能走到G和HD,E,G,H是死胡同'''</span>graph <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'E'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'G'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'H'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    广度优先搜索，从A走到H    :param graph: 待搜索的迷宫    :param start: 开始搜索的起点    '''</span>    <span class="token comment"># queue为队列，当队列为空或者当前地点为H时搜索结束</span>    visited<span class="token punctuation">,</span> queue <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span>    <span class="token keyword">while</span> queue<span class="token punctuation">:</span>        <span class="token comment"># 从队列中出队，即当前所处的地点</span>        vertex <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> vertex <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>            visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>vertex<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>vertex<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token comment"># 当前地点是`H`的话就结束搜索</span>            <span class="token keyword">if</span> vertex <span class="token operator">==</span> <span class="token string">'H'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token comment"># 将当前所处地点所能走到的地点放入队列</span>            <span class="token keyword">for</span> v <span class="token keyword">in</span> graph<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> v <span class="token keyword">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                    queue<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token comment"># 从迷宫的A走到H，并按搜索的先后顺序打印地点</span>bfs<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启发式搜索-扫地机器人最短路径搜索"><a href="#启发式搜索-扫地机器人最短路径搜索" class="headerlink" title="启发式搜索 - 扫地机器人最短路径搜索"></a>启发式搜索 - 扫地机器人最短路径搜索</h3><p> <em><em>A</em> 算法</em>*</p><blockquote><ol><li>从此点开始寻找，附近所有能到达的且不在关闭列表的节点，并把这些节点加入开放列表。</li><li>如果该节点不在开放列表中（之前没有遍历过），则计算该节点的F（到该节点的代价G+该节点到终点的代价H）</li><li>如果该节点在开放列表中，也计算F，如果新的F比较小则更新F。否则不变。</li><li>从开放列表中选取一个F最小的节点走到该点。循环第一步，直至找到终点。</li></ol></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 感觉算法写的有点问题</span><span class="token keyword">def</span> <span class="token function">GenerateMap</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">map</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        nodeRow <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token builtin">map</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>nodeRow<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            node <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 构造方法创建节点</span>            node<span class="token punctuation">.</span>y <span class="token operator">=</span> j            node<span class="token punctuation">.</span>x <span class="token operator">=</span> i            node<span class="token punctuation">.</span>unable <span class="token operator">=</span> <span class="token boolean">False</span>            node<span class="token punctuation">.</span>distanceFromDes <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token comment"># 距离终点的距离</span>            node<span class="token punctuation">.</span>distanceFromOri <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token comment"># 距离起点的距离</span>            node<span class="token punctuation">.</span>allDistance <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>            node<span class="token punctuation">.</span>added <span class="token operator">=</span> <span class="token boolean">False</span>            node<span class="token punctuation">.</span>closed <span class="token operator">=</span> <span class="token boolean">False</span>            node<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token boolean">None</span>            nodeRow<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">map</span><span class="token comment"># --------------------------------------</span><span class="token comment"># 构造开启列表，开启列表为openedList</span>openedList <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将起点的G和F设置成0，H已经设置过了 map表示地图节点，originIndex表示出发地</span>node <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">[</span>oriIndex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>oriIndex<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>node<span class="token punctuation">.</span>distanceFromOri <span class="token operator">=</span> <span class="token number">0</span>node<span class="token punctuation">.</span>allDistance <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 将起点存到开启列表中</span>openedList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>node<span class="token punctuation">.</span>added <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment"># 循环检查开启列表</span><span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>openedList<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token comment"># 将开启列表中第一个方块删除</span>    node <span class="token operator">=</span> openedList<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># 方块的closed状态设置成True，相当于加入到关闭列表</span>    node<span class="token punctuation">.</span>closed <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token comment"># 如果走到了终点就获取路径</span>    <span class="token keyword">if</span> node<span class="token punctuation">.</span>y <span class="token operator">==</span> desIndex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">and</span> node<span class="token punctuation">.</span>x <span class="token operator">==</span> desIndex<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        finalListNeedReverse <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> node <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            finalListNeedReverse<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>parent        finalListNeedReverse<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> finalListNeedReverse    <span class="token comment"># neighboursList存放的是当前方块周围的方块</span>    neighboursList <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> node<span class="token punctuation">.</span>y    x <span class="token operator">=</span> node<span class="token punctuation">.</span>x    parentDistanceFromOri <span class="token operator">=</span> node<span class="token punctuation">.</span>distanceFromOri    <span class="token comment"># 检查当前方块周围的方块</span>    <span class="token keyword">for</span> needNodey <span class="token keyword">in</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> needNodey <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> needNodey <span class="token operator">>=</span> mapSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">for</span> needNodex <span class="token keyword">in</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> needNodex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> needNodex <span class="token operator">>=</span> mapSize<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            needNode <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">[</span>needNodey<span class="token punctuation">]</span><span class="token punctuation">[</span>needNodex<span class="token punctuation">]</span>            <span class="token comment"># 不考虑不可达、在关闭列表中以及已经在开启列表中的方块</span>            <span class="token keyword">if</span> needNode<span class="token punctuation">.</span>unable <span class="token operator">==</span> <span class="token boolean">True</span> <span class="token keyword">or</span> needNode<span class="token punctuation">.</span>closed <span class="token operator">==</span> <span class="token boolean">True</span> <span class="token keyword">or</span> needNode<span class="token punctuation">.</span>added <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            yOffset <span class="token operator">=</span> needNodey <span class="token operator">-</span> y            xOffset <span class="token operator">=</span> needNodex <span class="token operator">-</span> x            allOffset <span class="token operator">=</span> yOffset <span class="token operator">+</span> xOffset            <span class="token comment"># 计算可达并没有被添加到开启列表中的方块的G值</span>            <span class="token keyword">if</span> allOffset <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> allOffset <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                distanceFromOri <span class="token operator">=</span> parentDistanceFromOri <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                distanceFromOri <span class="token operator">=</span> parentDistanceFromOri <span class="token operator">+</span> <span class="token number">1.4</span>            <span class="token comment"># 更新最小的G值</span>            <span class="token keyword">if</span> needNode <span class="token keyword">in</span> neighboursList<span class="token punctuation">:</span>                  <span class="token keyword">if</span> distanceFromOri <span class="token operator">&lt;</span> needNode<span class="token punctuation">.</span>distanceFromOri<span class="token punctuation">:</span>                    needNode<span class="token punctuation">.</span>distanceFromOri <span class="token operator">=</span> distanceFromOri            <span class="token keyword">else</span><span class="token punctuation">:</span>                needNode<span class="token punctuation">.</span>distanceFromOri <span class="token operator">=</span> distanceFromOri                neighboursList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>needNode<span class="token punctuation">)</span>    <span class="token comment"># 设置neighboursList中的方块的父方块，F值等</span>    <span class="token keyword">for</span> needNode <span class="token keyword">in</span> neighboursList<span class="token punctuation">:</span>        needNode<span class="token punctuation">.</span>parent <span class="token operator">=</span> node        needNode<span class="token punctuation">.</span>allDistance <span class="token operator">=</span> needNode<span class="token punctuation">.</span>distanceFromOri <span class="token operator">+</span> needNode<span class="token punctuation">.</span>distanceFromDes        needNode<span class="token punctuation">.</span>added <span class="token operator">=</span> <span class="token boolean">True</span>        openedList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>needNode<span class="token punctuation">)</span>    <span class="token comment"># 将方块根据F值从小到大排序，这样每次只要获取列表中的一个方块就能得到F值最小的方块</span>    openedList<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>allDistance<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四皇后问题"><a href="#四皇后问题" class="headerlink" title="四皇后问题"></a>四皇后问题</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make</span><span class="token punctuation">(</span>mark<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    标记皇后的位置，例如mark[0] = 2, 表示第1行皇后放在第3列的位置    :param mark: 皇后的位置信息    :return: 拼接好的结果    '''</span>    <span class="token comment">#初始化数组</span>    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'X'</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>mark<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>mark<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment">#将每一行中皇后的位置用‘Q’代替</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> mark<span class="token punctuation">:</span>        r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>mark<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Q'</span>    <span class="token comment">#枚举，将原来散的元素连接成字符串</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>        r<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token keyword">def</span> <span class="token function">FourQueens</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    深度优先搜索的方式求解四皇后问题    :param mark:表示皇后的位置信息，例如[0,1,3,2]表示棋盘的第1行第1列，第2行第2列，第3行第4列，第4行第3列放置了皇后。例如[1, None, None, None]表示第1行第2列放置了皇后，其他行没有放置皇后。初始值为[None,None,None,None]    :param cur:表示当前准备在第几行放置皇后，例如`cur=1`时，表示准备在第`2`行放置皇后。初始值为0    :param ret:表示存放皇后摆放结果的列表，类型为列表。初始值为[]    :return:无    '''</span>    <span class="token keyword">if</span> cur <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>mark<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#********* Begin *********#</span>        <span class="token comment"># 如果当前行是最后一行，记录一个解，并返回结束此次搜索</span>        ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>make<span class="token punctuation">(</span>mark<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>        <span class="token comment">#********* End *********#</span>    <span class="token comment">#试探处理，将当前行的皇后应该在的位置遍历每一列，如果满足条件，递归调用处理下一行</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>mark<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mark<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> down <span class="token operator">=</span> i<span class="token punctuation">,</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 当想在当前位置放皇后会与其他皇后冲突时不放置皇后</span>            <span class="token keyword">if</span> mark<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> i <span class="token keyword">or</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>i<span class="token operator">-</span>mark<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> cur <span class="token operator">-</span> j<span class="token punctuation">:</span>                down <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> down<span class="token punctuation">:</span>            <span class="token comment"># 准备在下一行找能放置换后的位置</span>            FourQueens<span class="token punctuation">(</span>mark<span class="token punctuation">,</span> cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/posts/15691/"/>
      <url>/posts/15691/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Linux介绍"><a href="#一、Linux介绍" class="headerlink" title="一、Linux介绍"></a>一、Linux介绍</h2><h3 id="Linux初体验"><a href="#Linux初体验" class="headerlink" title="Linux初体验"></a>Linux初体验</h3><h4 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h4><p><img src="https://data.educoder.net/api/attachments/182886" alt="预览大图"></p><h4 id="Linux用户介绍"><a href="#Linux用户介绍" class="headerlink" title="Linux用户介绍"></a>Linux用户介绍</h4><p><code>Linux</code>用户通常分为两类:</p><ul><li>管理员用户(<code>root</code>)；</li><li>普通用户(类似<code>Windows</code>上的普通用户)。</li></ul><p><code>Linux</code>登录系统后，默认当前所在目录为用户主目录，类似<code>Windows</code>登录系统后，默认的所在目录为桌面。</p><ul><li>管理员(<code>root</code>)登录系统后默认目录为<code>/root</code>；</li><li>普通用户登录系统后默认目录为<code>/home/username</code>， <code>username</code>为用户名。 例如：笔者用普通用户<code>fzm</code>登录系统后，那么当前所在目录为。<code>/home/fzm</code>。</li></ul><h4 id="Linux-常用命令介绍"><a href="#Linux-常用命令介绍" class="headerlink" title="Linux 常用命令介绍"></a>Linux 常用命令介绍</h4><ol><li><p><code>pwd(Print Working Directory )</code>：显示当前所在目录。</p></li><li><p><code>cd(Change Directory)</code>: 切换当前目录。</p></li></ol><blockquote><p>常用特殊目录表示：</p><ul><li>cd 进入用户主目录；</li><li>cd ~ 进入用户主目录；</li><li>cd - 返回进入此目录之前所在的目录；</li><li>cd .. 返回上级目录(若当前目录为”/“，则执行完后还在”/“；”..”为上级目录的意思)；</li><li>cd ../.. 返回上两级目录；</li><li>cd !$ 把上个命令的参数作为<code>cd</code>参数使用。</li></ul></blockquote><ol start="3"><li><code>ls(list)</code>: 列出指定目录列表信息，如果没有参数默认列出当前目录下的所有文件和文件夹(隐藏文件和文件夹除外)。</li></ol><blockquote><p>常见<code>ls</code>命令选项:</p><ul><li>-l：以长格式显示目录下的内容列表。输出的信息从左到右依次包括<u>文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等</u>；</li><li>-a：显示所有文件和文件夹(<u>包括隐藏文件/文件夹</u>)。</li></ul></blockquote><h3 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h3><ol><li><p>创建文件:<code>touch filename</code></p></li><li><p>创建多个文件：<code>touch file1 file2 ...</code></p></li><li><p>删除文件：<code>rm [命令选项] filename</code></p><ul><li><p>-f：强制删除文件或目录；</p></li><li><p>-r或-R：递归处理，将指定目录下的所有文件与子目录一并处理；</p></li><li><p>-i：删除已有文件或目录之前先询问用户。</p></li></ul></li><li><p>创建文件夹：<code>mkdir [命令选项] dirname</code>或者<code>rm -r</code></p><ul><li>常用命令选项： <code>-p或--parents</code> 若所要建立目录的上层目录目前尚未建立，则会一并建立上层目录；</li></ul></li><li><p>删除文件夹：<code>rmdir [命令选项] dirname</code></p><ul><li>常用命令选项：-p或–parents：删除指定目录后，若该目录的上层目录已变成空目录，则将其一并删除；</li></ul></li><li><p>文件复制：<code>cp [命令选项] 源文件 目的文件</code></p><ul><li>-f：强行复制文件或目录，不论目标文件或目录是否已存在；</li><li>-i：覆盖既有文件之前先询问用户；</li><li>-p：保留源文件或目录的属性；</li><li>-R/r：递归处理，将指定目录下的所有文件与子目录一并处理。</li></ul></li><li><p>文件移动/重命名：<code>mv [命令选项] 源文件 目标文件</code></p><ul><li>同上面的四个选项</li></ul></li></ol><h3 id="Linux-查询命令帮助语句"><a href="#Linux-查询命令帮助语句" class="headerlink" title="Linux 查询命令帮助语句"></a>Linux 查询命令帮助语句</h3><p>linux中使用<code>man</code>命令来查询命令的帮助文件，<code>man [章节] command</code></p><p><code>man</code>包含<code>9</code>个章节，章节用数字表示，分别是：</p><ol><li>用户命令</li><li>系统调用</li><li>C库调用</li><li>设备文件及特殊文件</li><li>配置文件格式</li><li>游戏</li><li>杂项</li><li>管理类的命令</li><li>Linux 内核API</li></ol><p>常用命令（查看man手册会用到）如下：</p><ul><li>d, Ctrl+D: 向文件尾部翻半屏；</li><li>u, Ctrl+U: 向文件首部翻半屏；</li><li>q: 退出；</li><li>#：跳转至第#行；</li><li>home: 回到文件首部；</li><li>end：翻至文件尾部。</li></ul><p><code>info</code>页面比<code>man page</code>编写得要更好、更容易理解，也更友好，</p><p><code>info [命令参数] command</code></p><ul><li>-d：添加包含info格式帮助文档的目录；</li><li>-f：指定要读取的info格式的帮助文档；</li><li>-n：指定首先访问的info帮助文件的节点；</li><li>-o：输出被选择的节点内容到指定文件。</li></ul><ol><li>?键：它就会显示info的常用快捷键；</li><li>N键：显示（相对于本节点的）下一节点的文档内容；</li><li>P键：显示（相对于本节点的）前一节点的文档内容；</li><li>U键：进入当前命令所在的主题；</li><li>M键：敲M键后输入命令的名称就可以查看该命令的帮助文档了；</li><li>G键：敲G键后输入主题名称，进入该主题；</li><li>L键：回到上一个访问的页面；</li><li>SPACE键：向前滚动一页；</li><li>BACKUP或DEL键：向后滚动一页；</li><li>Q：退出info。</li></ol><p><code>whatis</code>用来显示命令的简短描述。<code>whatis command</code></p><h2 id="二、Linux用户管理"><a href="#二、Linux用户管理" class="headerlink" title="二、Linux用户管理"></a>二、Linux用户管理</h2><h3 id="创建-删除新用户"><a href="#创建-删除新用户" class="headerlink" title="创建/删除新用户"></a>创建/删除新用户</h3><p>创建一个新用户：<code>useradd [命令参数] 参数</code></p><ul><li>-d&lt;登入目录&gt;：指定用户登入时的启始目录；</li><li>-D：查看或变更预设值；</li><li>-g&lt;群组&gt;：指定用户所属的群组；</li><li>-m：自动建立用户的登入目录；</li><li>-M：不要自动建立用户的登入目录；</li><li>-s：指定用户登入后所使用的<code>shell</code>。</li></ul><p><code>useradd</code>必须以<code>root</code>权限才能执行，如果是普通用户想创建一个新用户时，需要在命令前加<code>sudo</code>命令来提升权限为<code>root</code>权限。</p><p>删除一个已经存在的用户：<code>userdel [命令参数] 参数</code></p><ul><li>-f：强制删除用户，即使用户当前已登录；</li><li>-r：==删除用户的同时，删除与用户相关的所有文件。==</li></ul><h3 id="Linux-用户密码管理"><a href="#Linux-用户密码管理" class="headerlink" title="Linux 用户密码管理"></a>Linux 用户密码管理</h3><ol><li><p>Linux中用户的登录密码是存放在<code>/etc/shadow</code>文件中，<code>/etc/shadow</code>文件中存放的是加密过后的密码，</p><p>第一个冒号前面的是用户名，第二个是密码：<code>*</code>或者<code>!</code>或者空，则表示该用户没有密码，</p></li><li><p>修改用户密码：<code>passwd [命令参数] 用户名</code></p><ul><li>-d 删除密码；</li><li>-l 停止账号使用；</li><li>-S 显示密码信息。</li><li>不加命令参数，是直接修改密码的</li></ul></li><li><p><code>chpasswd</code>命令通常是用于批量修改用户密码，从标准输入批量读取成对的用户名和密码，其中输入的用户名和密码的格式为<code>用户名:密码</code>。</p></li><li><p>chpasswd &lt;&lt; EOF</p><p>newUser:123456</p><p>newUser2:12343</p><p>EOF</p></li></ol><h3 id="Linux用户权限切换"><a href="#Linux用户权限切换" class="headerlink" title="Linux用户权限切换"></a>Linux用户权限切换</h3><p><code>Linux</code>中使用<code>whoami</code>命令来查看当前登录系统的用户名，root。</p><blockquote><p><code>Linux</code>用户登陆的三种方式：</p><ol><li><p>图形化界面登录，输入账号密码</p></li><li><p>使用<code>login</code>命令登录，必须以<code>root</code>权限才能执行，如果是普通用户执行时，需要在命令前加<code>sudo</code>命令来提升权限为<code>root</code>权限。</p><p>可以使用<code>logout</code>命令或者<code>exit</code>命令来退出当前用户登录，返回到登录前的用户状态。</p><p>当<code>/etc</code>目录里含名称为<code>nologin</code>的文件时，系统只允许<code>root</code>帐号登入系统，其他用户一律不准登入。</p></li><li><p>使用<code>su</code>命令切换用户身份，</p><p><code>su</code>命令用于切换当前用户身份到其他用户身份，变更时须输入所要变更的用户帐号的密码，root除外。</p><p><strong>常见命令参数</strong></p><ul><li><code>-c&lt;指令&gt;</code>或<code>--command=&lt;指令&gt;</code>：执行完指定的指令后，即恢复原来的身份；（==就只是用别的用户执行一个命令==）</li><li><code>-l</code>或<code>--login</code>：改变身份时，也同时变更工作目录，以及<code>HOME</code>,<code>SHELL</code>,<code>USER</code>,<code>logname</code>。此外，也会变更PATH变量；</li><li><code>-m</code>,<code>-p</code>或<code>--preserve-environment</code>：变更身份时，不要变更环境变量；</li><li><code>-s&lt;shell&gt;</code>或<code>--shell=&lt;shell&gt;</code>：指定要执行的<code>shell</code>。</li></ul></li></ol></blockquote><h3 id="创建-删除用户组"><a href="#创建-删除用户组" class="headerlink" title="创建/删除用户组"></a>创建/删除用户组</h3><ol><li>使用<code>groupadd</code>命令来创建一个新用户组。<code>groupadd</code>必须以<code>root</code>权限才能执行，<code>Linux</code>中用户组信息是保存在<code>/etc/group</code>文件。<ul><li>-g：指定新建工作组的id；</li><li>-G：额外添加一个组</li><li>-r：创建系统工作组，系统工作组的组ID小于500；</li></ul></li></ol><p><em>我们在第一次执行<code>sudo</code>的时候是要输入密码，那么在接下来的一段时间内在执行<code>sudo</code>的时候就不需要输入密码，这个会话时间默认是<code>5</code>分钟，用户也可以通过编辑<code>/etc/sudoers</code>来修改这个会话时间的大小。</em></p><ol start="2"><li>使用<code>groupdel</code>命令来删除一个已经存在的用户组。<code>groupdel</code>必须以<code>root</code>权限才能执行，</li></ol><h3 id="Linux用户所属组变更"><a href="#Linux用户所属组变更" class="headerlink" title="Linux用户所属组变更"></a>Linux用户所属组变更</h3><p><strong>Linux查看用户所属组</strong></p><ol><li>id [命令参数] 用户名，用户名默认是当前登录用户，也就是说用户名可以省略。<ul><li><code>-g或--group</code>：显示用户所属群组的<code>ID</code>；</li><li><code>-G或--groups</code>：显示用户所属附加群组的<code>ID</code>；</li><li><code>-n或--name</code>：显示用户，所属群组或附加群组的名称。</li></ul></li><li>groups 用户名，用户名默认是当前登录用户。</li></ol><p><strong>修改用户所属组</strong></p><p><code>usermod</code>必须以<code>root</code>权限才能执行，</p><p>usermod -g 组名  用户名，修改用户所属组</p><p>usermod -a -G 组名  用户名，给用户添加一个新的组</p><p>默认情况下新创建用户的时候会默认创建一个与用户名同名的私有组，并将新创建的用户所属组设置为私有组。</p><h3 id="Linux用户-用户组编辑"><a href="#Linux用户-用户组编辑" class="headerlink" title="Linux用户/用户组编辑"></a>Linux用户/用户组编辑</h3><p><code>Linux</code>中还可以使用<code>finger</code>命令来查询用户的信息。<code>finger [命令参数] 用户名</code></p><ul><li>-l：多行显示；</li><li>-s：单行显示。这个选项只显示登入名称、真实姓名、终端机名称、闲置时间、登入时间、办公室号码及电话号码。如果所查询的使用者是远端服务器的使用者，这个选项无效。</li></ul><p><strong>Linux修改用户信息</strong></p><p><code>Linux</code> 中<code>usermod</code>命令是最强大的用户账户修改实用工具。</p><ul><li>-c&lt;备注&gt;：修改用户帐号的备注文字；</li><li>-d&lt;登入目录&gt;：修改用户登入时的目录；</li><li>-e&lt;有效期限&gt;：修改帐号的有效期限；</li><li>-f&lt;缓冲天数&gt;：修改在密码过期后多少天即关闭该帐号；</li><li>-g&lt;群组&gt;：修改用户所属的群组；</li><li>-G&lt;群组&gt;；修改用户所属的附加群组；</li><li>-l&lt;帐号名称&gt;：修改用户帐号名称；</li><li>-L：锁定用户密码，使密码无效；</li><li>-s：修改用户登入后所使用的<code>shell</code>；</li><li>-u：修改用户<code>ID</code>；</li><li>-U:解除密码锁定。</li></ul><p><strong>Linux修改用户组信息</strong></p><p><code>Linux</code> 中使用<code>groupmod</code>命令来修改用户组信息。</p><ul><li>-g&lt;群组识别码&gt;：设置欲使用的群组识别码；组id号</li><li>-n&lt;新群组名称&gt;：设置欲使用的群组名称。组名字</li></ul><h2 id="三、Linux存储系统"><a href="#三、Linux存储系统" class="headerlink" title="三、Linux存储系统"></a>三、Linux存储系统</h2><h3 id="存储架构"><a href="#存储架构" class="headerlink" title="存储架构"></a>存储架构</h3><ul><li>三大基本的存储架构</li></ul><p><strong>直接附加的存储DAS</strong></p><p>   Linux 支持种类繁多的 DAS 界面，包括像并行高级技术附件的旧标准 — 电子集成驱动器 IDE/ATA — 并行 SCSI 和光纤通道以及新的存储界面，例如串行连接的 SCSI、串行 ATA 和外部 SATA 。您还将发现高级存储技术，例如 USB3（可扩展的主机控制器界面）和 Firewire 。</p><p><strong>存储区域网络SAN</strong></p><p>   SAN 提供块级存储合并，以便在一些服务器中共享它。存储对服务器显示为是本地的，其中端点存储设备可以为客户端设备实现附加服务（例如备份和复制）。   SAN 的协议和界面是广泛和多样的。可以在 Linux 中发现典型的 SAN 协议，例如光纤通道以及其通过 IP 的扩展 (iFCP)。还存在更新的协议，例如 SAS、以太网光纤通道以及 iSCSI 。   作为存储协议出现的以太网已经在 Linux 中完全实现，其说明了这些方法的力量和灵活性。   Linux 完全支持 10 千兆位以太网，并允许构造高性能 SAN 。</p><p><strong>网络附加存储NAS</strong></p><p>   NAS 是通过网络的存储合并，以便不同类型客户端在文件级别进行访问。Linux 中完全支持的两种最流行协议是网络文件系统 NFS 和服务器消息块/通用互联网文件系统 SMB/CIFS 。   虽然原始的 SMB 实现是专有的，但是它被逆向设计以便在 Linux 中受到支持。后来的 SMB 修订版被公开记录以便允许在 Linux 中进行更简单的开发。   Linux 继续发展针对 NFS 的各种增强和扩展。NFS 现在是一个状态协议并包括对数据和元数据分离的优化以及数据访问并行。</p><h3 id="fdisk的使用（）"><a href="#fdisk的使用（）" class="headerlink" title="fdisk的使用（）"></a>fdisk的使用（）</h3><h3 id="mkfs的使用（）"><a href="#mkfs的使用（）" class="headerlink" title="mkfs的使用（）"></a>mkfs的使用（）</h3><h2 id="Linux文件-目录管理"><a href="#Linux文件-目录管理" class="headerlink" title="Linux文件/目录管理"></a>Linux文件/目录管理</h2><h3 id="文件创建-删除"><a href="#文件创建-删除" class="headerlink" title="文件创建/删除"></a>文件创建/删除</h3><p><strong>文件创建</strong></p><p><code>touch 文件名</code></p><ul><li>如果一次想创建多个文件，则每个文件名用空格隔开。</li><li><code>touch</code>命令创建一个指定的新文件，并将当前登录用户作为文件所有者。</li><li>由于<code>touch</code>命令创建的文件为空，所以文件的大小为0。</li><li><code>touch</code>命令还可以用于更改文件的访问时间和修改时间，而不改变文件的内容。</li></ul><p><strong>文件删除</strong></p><p><code>rm 参数 文件名</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springboot</title>
      <link href="/posts/10711/"/>
      <url>/posts/10711/</url>
      
        <content type="html"><![CDATA[<p>Spring Boot 是由 Pivotal 团队提供用来简化 Spring 的搭建和开发过程的全新框架。</p><p>Spring Boot 去除了大量的 xml 配置文件，简化了复杂的依赖管理，配合各种 starter 使用，基本上可以做到自动化配置。Spring 可以做的事情，现在用 Spring boot 都可以做。</p><h3 id="01-微服务（Microservice）是什么？"><a href="#01-微服务（Microservice）是什么？" class="headerlink" title="01. 微服务（Microservice）是什么？"></a>01. 微服务（Microservice）是什么？</h3><p>早些年的服务实现和实施思路是将很多功能从开发到交付都打包成一个很大的服务单元（一般称为 Monolith），而微服务实现和实施思路则更强调功能趋向单一，服务单元小型化和微型化。</p><p>如果用“茶壶煮饺子”来打比方的话，原来我们是在一个茶壶里煮很多个饺子，现在（微服务化之后）则基本上是在一个茶壶煮一个饺子，而这些饺子就是服务的功能，茶壶则是将这些服务功能打包交付的服务单元，如图 1 所示。</p><p><img src="http://c.biancheng.net/uploads/allimg/190730/5-1ZI0143635b8.png" alt="论茶壶里煮“饺子”的不同形式"></p><p>所以，从思路和理念上来讲，微服务就是要倡导大家尽量将功能进行拆分，将服务粒度做小，使之可以独立承担对外服务的职责，沿着这个思路开发和交付的软件服务实体就叫作“微服务”，而围绕着这个思路和理念构建的一系列基础设施和指导思想，笔者将它称为“微服务体系”。</p><p><strong>火车模型</strong></p><p>这就涉及服务化早期实践中比较有名的“火车模型”，即交付的服务就像一辆火车，而这个服务相关的所有功能对应的项目成果，就是要装上火车车厢的一件件货物，交付的列车只有等到所有项目都开发测试完成后才可以装车出发，完成整个服务的交付。</p><p>很显然，只要有一个车厢没有准备好货物（即功能项目未开发测试完成），火车就不能发车，服务就不能交付，这大大降低了服务的交付效率。如果每个功能项目可以各自独立交付，那么就不需要都等同一辆火车，各自出发就可以了。</p><p>顺着这个思路，自然而然地，大家逐渐各自独立，每一个功能或者少数相近的功能作为单一项目开发完成后将作为一个独立的服务单元进行交付，从而在服务交付阶段，大家也能够并行不悖，各自演化而不受影响。</p><h3 id="02-微服务的好处（优点）有哪些？"><a href="#02-微服务的好处（优点）有哪些？" class="headerlink" title="02. 微服务的好处（优点）有哪些？"></a>02. 微服务的好处（优点）有哪些？</h3><blockquote><p>独立，独立，还是独立</p><p>模块相互独立，可并行开发，每个模块只需要维护自己的功能即可。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android</title>
      <link href="/posts/39980/"/>
      <url>/posts/39980/</url>
      
        <content type="html"><![CDATA[<h2 id="Android基础入门"><a href="#Android基础入门" class="headerlink" title="Android基础入门"></a>Android基础入门</h2><p>体系结构：应用程序层（Applications）、应用程序框架层（Application Framework）、核心类库（Libraries）、Linux内核（Linux Kernel）</p><p>SDK（software development kit）：软件开发工具包</p><p>图片资源分类：1.应用图标资源：存放在drawable文件夹中。2.界面中使用的图片资源：存放在drawable。</p><p><code>setContentView(R.layout.activity_main)</code></p><p><code>getResources().getColor(R.color.colorPrimary)</code></p><p>value：colors.xml，使用实例：== android:textColor=”@color/yellow” ==</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>color</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#FF000000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>color</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>color</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#FFFFFFFF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>color</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>color</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#FCDC0000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>color</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>color</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yellow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#E1C01E<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>color</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题，themes.xml。TextViwew控件，style=”@style/myStyle”</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStyle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android:textColor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/teal_700<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android:textSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>30sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dimens.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dimen</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>layout_size<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>150dp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dimen</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>strings.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的APP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my_str<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello World! 第一个程序<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="线性布局LinearLayout"><a href="#线性布局LinearLayout" class="headerlink" title="线性布局LinearLayout"></a>线性布局LinearLayout</h3><p>线性布局就是，一横排或一竖排，可以嵌套使用</p><p>布局管理器：就是决定是什么布局的，如<Linearlaout></Linearlaout>，里面可以写子组件（子元素）</p><table><thead><tr><th>XML属性</th><th>相关方法</th><th align="left">说明</th></tr></thead><tbody><tr><td>android:gravity</td><td>setGravity(int)</td><td align="left">设置布局管理器==内组件==的对齐方式</td></tr><tr><td>android:orientation</td><td>setOrientation(int)</td><td align="left">设置布局管理器内组件的排列方式，可以设置为==horizontal==、==vertical==两个值之一</td></tr><tr><td>android:layout_gravity</td><td></td><td align="left">指定该子元素在LinearLayout中的对齐方式</td></tr><tr><td>android:layout_weight</td><td></td><td align="left">指定子元素在LinearLayout中所占的权重</td></tr></tbody></table><blockquote><p>横排三块，权重比是1:2:3，结果显示为one占2/3，two占1/3，three不显示</p><p>这个时候就会有疑问了,怎么会这样,这比例是2:1吧,1:2:3却变成了2:1:0,怎么会这样呢? </p><p>答:比较容易理解的一种思路:</p><p><strong>step 1：</strong>个个都是fill_parent,但是屏幕只有一个啦,那么1 - 3 = - 2 fill_parent </p><p><strong>step 2：</strong>依次比例是1/6,2/6,3/6 </p><p><strong>step 3：</strong>先到先得,先分给one,计算: 1 - 2 * (1/6) = 2/3 fill_parent 接着到two,计算: 1 - 2 * (2/6) = 1/3 fill_parent 最后到three,计算 1 - 2 * (3/6) = 0 fill_parent </p><p><strong>step 4：</strong>所以最后的结果是:one占了两份,two占了一份,three什么都木有 </p></blockquote><h3 id="相对布局RelativeLayout"><a href="#相对布局RelativeLayout" class="headerlink" title="相对布局RelativeLayout"></a>相对布局RelativeLayout</h3><p>每一个组件的布局都是相对于==其他兄弟组件==或==父容器==定位的</p><table><thead><tr><th>XML属性</th><th>相关方法</th><th>说明</th></tr></thead><tbody><tr><td>android:gravity</td><td>setGravity(int)</td><td>设置布局管理器内 组件的对齐方式</td></tr><tr><td>android:ignoreGravity</td><td>setIgnoreGravity(int)</td><td>设置哪个组件不受gravity属性的影响</td></tr></tbody></table><p><em>相对于父容器定位：</em></p><p>android:layout_centerHorizontal，设置该子组件是否位于布局容器的水平居中<br>android:layout_centerVertical<br>android:layout_centerParent<br>android:layout_alignParentBottom<br>android:layout_alignParentLeft<br>android:layout_alignParentRight<br>android:layout_alignParentTop</p><p><em>相对于兄弟组件定位：</em></p><p>android:layout_toRightOf，控制该子组件位于给出ID组件的右侧<br>android:layout_toLeftOf<br>android:layout_above<br>android:layout_below<br>android:layout_alignTop<br>android:layout_alignBottom<br>android:layout_alignRight<br>android:layout_alignLeft</p><h3 id="帧布局FrameLayout"><a href="#帧布局FrameLayout" class="headerlink" title="帧布局FrameLayout"></a>帧布局FrameLayout</h3><table><thead><tr><th>XML属性</th><th>相关方法</th><th>说明</th></tr></thead><tbody><tr><td>android:foreground</td><td>setForeground(Drawable)</td><td>设置该帧布局容器的前景图像</td></tr><tr><td>android:foregroundGravity</td><td>setForeGroundGraity(int)</td><td>定义绘制前景图像的gravity属性</td></tr></tbody></table><h3 id="表格布局TableLayout"><a href="#表格布局TableLayout" class="headerlink" title="表格布局TableLayout"></a>表格布局TableLayout</h3><table><thead><tr><th>XML属性</th><th>相关方法</th><th>说明</th></tr></thead><tbody><tr><td>android:collapseColumns</td><td>setColumns(int, boolean)</td><td>设置需要被==隐藏==的列的序号，多个序号间用逗号分隔</td></tr><tr><td>android:shrinkColumns</td><td>setShrinkAllColumns(boolean)</td><td>设置需要被==收缩==的列的序号</td></tr><tr><td>android:stretchColumns</td><td>setStretchAllColumns(boolean)</td><td>设置允许被==拉伸==的列的序号</td></tr></tbody></table><h3 id="网格布局GridLayout"><a href="#网格布局GridLayout" class="headerlink" title="网格布局GridLayout"></a>网格布局GridLayout</h3><p><img src="https://www.runoob.com/wp-content/uploads/2015/07/D07C612B-0DB8-4775-8045-9318F73C0B13.jpeg"></p><h3 id="绝对布局AbsoluteLayout"><a href="#绝对布局AbsoluteLayout" class="headerlink" title="绝对布局AbsoluteLayout"></a>绝对布局AbsoluteLayout</h3><p>Android不提供任何布局控制，而是由开发人员自己通过X坐标、Y坐标来控制组件的位置。每个组件都可指定如下两个XML属性：layout_x，layout_y</p><p>绝对布局已经过时，不应使用或少使用。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AbsoluteLayout</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_y</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AbsoluteLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><h2 id="界面控件"><a href="#界面控件" class="headerlink" title="界面控件"></a>界面控件</h2><h3 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h3><p><em>组件常用属性：</em></p><ul><li><strong>id：</strong>为TextView设置一个组件id，根据id，我们可以在Java代码中通过findViewById()的方法获取到该对象，然后进行相关属性的设置，又或者使用RelativeLayout时，参考组件用的也是id！</li><li><strong>layout_width：</strong>组件的宽度，一般写：<strong>wrap_content</strong>或者**match_parent(fill_parent)**，前者是控件显示的内容多大，控件就多大，而后者会填满该控件所在的父容器；当然也可以设置成特定的大小，比如我这里为了显示效果，设置成了200dp。</li><li><strong>layout_height：</strong>组件的高度，内容同上。</li><li><strong>gravity：</strong>设置控件中内容的对齐方向，TextView中是文字，ImageView中是图片等等。</li><li><strong>text：</strong>设置显示的文本内容，一般我们是把字符串写到string.xml文件中，然后通过@String/xxx取得对应的字符串内容的，这里为了方便我直接就写到””里，不建议这样写！！！</li><li><strong>textColor：</strong>设置字体颜色，同上，通过colors.xml资源来引用，别直接这样写！</li><li><strong>textStyle：</strong>设置字体风格，三个可选值：<strong>normal</strong>(无效果)，<strong>bold</strong>(加粗)，<strong>italic</strong>(斜体)</li><li><strong>textSize：</strong>字体大小，单位一般是用sp！</li><li><strong>background：</strong>控件的背景颜色，可以理解为填充整个控件的颜色，可以是图片哦！</li></ul><h3 id="Button点击事件监听"><a href="#Button点击事件监听" class="headerlink" title="Button点击事件监听"></a>Button点击事件监听</h3><p>监听点击事件：3种实现方式。</p><p>首先按钮要有id，通过findViewById获取，然后添加点击事件。</p><ol><li><p>直接使用匿名内部类，内部类，外部类。本质上是一样的，都是 btn1.setOnClickListener(new OnClickListener() {匿名内部类实现onclick方法})，</p><p>参数传递一个OnClickListener的实现类对象（匿名内部类方式，内部类方式，外部类方式）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//这是匿名内部类的方式，内部类和外部类 实现与之类似</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Button</span> btn1<span class="token punctuation">;</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>                    btn1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//通过匿名内部类实现了OnClickListener的抽象方法onclick方法</span>        btn1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//重写点击事件的处理方法onClick()    </span>            <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//显示Toast信息    </span>                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"你点击了按钮"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>直接使用Activity作为事件监听器。</p><p><em>Actitity实现了OnClickListener接口,重写了onClick(view)方法在为某些组建添加该事件监听对象 时,直接setXxx.Listener(this)即可</em></p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//让Activity方法实现OnClickListener接口    </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Button</span> btn2<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>                        btn2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//直接写个this，参数本质上还是实现了OnClickListener接口的子类</span>        btn2<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//重写接口中的抽象方法，该Activity所有点击事件都会触发此方法</span>    <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"点击了按钮"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li> 直接绑定到标签</li></ol><p><em>就是直接在xml布局文件中对应得Activity中定义一个事件处理方法，设置一个属性:onclick = “myclick”即可</em></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>             <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myclick<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  &lt;!-- 控件所在的Activity的那个类实现myclick方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h3><p>EditText默认是多行显示的，并且能够自动换行，即当一行显示不完的时候，他会自动换到第二行</p><table><thead><tr><th>属性名</th><th>功能描述</th></tr></thead><tbody><tr><td>android:hint</td><td>提示文本内容，HelloWorld</td></tr><tr><td>android:textColorHint</td><td>提示文本的颜色，red</td></tr><tr><td>android:inputType=”textPassword”</td><td>输入文本框中的内容显示为”.”</td></tr><tr><td>android:phoneNumber</td><td>设置输入文本框的内容只能是数字</td></tr><tr><td>android:minLines</td><td>设置文本的最小行数</td></tr><tr><td>android:scrollHorizontally</td><td>设置文本信息超出EditText的宽度情况下，是否出现横拉条</td></tr><tr><td>android:editable</td><td>设置是否可编辑</td></tr></tbody></table><h3 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h3><p>在API文档中我们发现ImageView有两个可以设置图片的属性，分别是：src和background</p><p><strong>常识：</strong></p><p>①background通常指的都是<strong>背景</strong>,而src指的是<strong>内容</strong>!!</p><p>②当使用<strong>src</strong>填入图片时,是按照图片大小<strong>直接填充</strong>,并<strong>不会进行拉伸</strong></p><p>而使用background填入图片,则是会根据ImageView给定的宽度来进行<strong>拉伸</strong></p><img src="https://gitee.com/CCCSL05/pic-go/raw/master/20210527054522.png" alt="image-20210527054521832"  /><h3 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TextView</span> generalBtn<span class="token punctuation">,</span> singleShow<span class="token punctuation">,</span> <span class="token class-name">MultipleShow</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> singleText <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> checked<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> singleNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        generalBtn <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>generalBtn<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleShow <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>singleText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MultipleShow</span> <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>MultipleText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>generalBtn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>singleBtn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>MultipleBtn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        progressWork();</span>        <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>ProcessBtn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>generalBtn<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>普通对话框                <span class="token function">generalEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>singleBtn<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>单选对话框                <span class="token function">singleEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>MultipleBtn<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>多选对话框                <span class="token class-name">MultipleEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>ProcessBtn<span class="token operator">:</span>                <span class="token function">progressEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进度条对话框</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//普通对话框</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">generalEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ayisint<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"普通对话框"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"这里是普通对话框"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">"确定"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        dialog<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setNegativeButton</span><span class="token punctuation">(</span><span class="token string">"取消"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        dialog<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AlertDialog</span> alertDialog <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        alertDialog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//进度条对话框</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">progressEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ProgressDialog</span> progressDialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProgressDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        progressDialog<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"对话框标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        progressDialog<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"信息，在下载...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        progressDialog<span class="token punctuation">.</span><span class="token function">setMax</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        progressDialog<span class="token punctuation">.</span><span class="token function">setProgress</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进度</span>        progressDialog<span class="token punctuation">.</span><span class="token function">setCancelable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对话框按返回键不能撤销（一直转）</span>        progressDialog<span class="token punctuation">.</span><span class="token function">setSecondaryProgress</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二进度</span>        progressDialog<span class="token punctuation">.</span><span class="token function">setProgressStyle</span><span class="token punctuation">(</span><span class="token class-name">ProgressDialog</span><span class="token punctuation">.</span>STYLE_HORIZONTAL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//样式设置</span>        progressDialog<span class="token punctuation">.</span><span class="token function">setButton</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span><span class="token punctuation">.</span>BUTTON_NEGATIVE<span class="token punctuation">,</span> <span class="token string">"取消…"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"取消"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        progressDialog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最后要显示</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 单选对话框</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">singleEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//弹出对话框</span>        <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ayisint<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"单选对话框"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSingleChoiceItems</span><span class="token punctuation">(</span>singleText<span class="token punctuation">,</span> singleNum<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        singleNum <span class="token operator">=</span> which<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">"确定"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//设置选中的值</span>                        singleShow<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>singleText<span class="token punctuation">[</span>singleNum<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        dialog<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setNegativeButton</span><span class="token punctuation">(</span><span class="token string">"取消"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        dialog<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//多选对话框</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token class-name">MultipleEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//弹出对话框</span>        <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertDialog<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setIcon</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ayisint<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"多选对话框"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setMultiChoiceItems</span><span class="token punctuation">(</span>singleText<span class="token punctuation">,</span> checked<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnMultiChoiceClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isChecked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//点击的序号以及是否选中</span>                        checked<span class="token punctuation">[</span>which<span class="token punctuation">]</span><span class="token operator">=</span>isChecked<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setPositiveButton</span><span class="token punctuation">(</span><span class="token string">"确定"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//多选的应该是根据checked数组判断哪个选中，循环遍历</span>                        singleShow<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>singleText<span class="token punctuation">[</span>singleNum<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不是多选的，单选抄过来的</span>                        dialog<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setNegativeButton</span><span class="token punctuation">(</span><span class="token string">"取消"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> dialog<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        dialog<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><p>参考：<a href="https://www.jianshu.com/p/f217b0208462">ListView - 简书 (jianshu.com)</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><p>activity就是一个界面，可以设置setContentView，展示对应的布局</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="https://www.runoob.com/wp-content/uploads/2015/08/18364230.jpg" alt="18364230.jpg (931×970) (runoob.com)"></p><h3 id="启动另一个Activity"><a href="#启动另一个Activity" class="headerlink" title="启动另一个Activity"></a>启动另一个Activity</h3><p>==<strong>显式启动</strong>==</p><p><strong>①最常见的：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//通过Intent，指定当前的类的上下文环境，以及要启动的Activity的类</span><span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>当前<span class="token class-name">Act</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>要启动的<span class="token class-name">Act</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>②通过Intent的ComponentName：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ComponentName</span> cn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span><span class="token string">"当前Act的全限定类名"</span><span class="token punctuation">,</span><span class="token string">"启动Act的全限定类名"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span>cn<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>③<strong>初始化Intent时指定包名：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"android.intent.action.MAIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setClassName</span><span class="token punctuation">(</span><span class="token string">"当前Act的全限定类名"</span><span class="token punctuation">,</span><span class="token string">"启动Act的全限定类名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>==<strong>隐式启动</strong>==<strong>：通过Intent-filter的Action,Category或data来实现 这个是通过Intent的</strong> intent-filter**来实现的</p><blockquote><p>隐式开启Activity，一定要有这句话！</p><category android:name="android.intent.category.DEFAULT" /></blockquote><p><img src="https://www.runoob.com/wp-content/uploads/2015/08/291262381.jpg" alt="img"></p><h3 id="关闭Activity"><a href="#关闭Activity" class="headerlink" title="关闭Activity"></a>关闭Activity</h3><p>直接调用<code>finish()</code>方法即可关闭当前Activity</p><h3 id="跳转Activity并传递数据"><a href="#跳转Activity并传递数据" class="headerlink" title="跳转Activity并传递数据"></a>跳转Activity并传递数据</h3><p><img src="https://www.runoob.com/wp-content/uploads/2015/08/7185831.jpg" alt="img"></p><p><em>在使用Bundle传递数据时，要注意，Bundle的大小是有限制的 &lt; 0.5MB，如果大于这个值 是会报TransactionTooLargeException异常的！！！</em></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//看图也可以</span><span class="token class-name">Intent</span> intent<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//intent直接携带数据，一个个传</span><span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过bundle携带数据，一次传多个</span>bundle<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">,</span><span class="token string">"小红"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtras</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">///////////////////</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> user1 <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>user1<span class="token punctuation">,</span><span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getExtras</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> user2 <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>user2<span class="token punctuation">,</span><span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="跳转Activity并回传数据"><a href="#跳转Activity并回传数据" class="headerlink" title="跳转Activity并回传数据"></a>跳转Activity并回传数据</h3><p>使用<code>startActivityForResult(intent,int requestCode)</code>的开始开启一个Activity并传递请求码（代表是谁开启的，即请求者标识），回传的要写一个<code>setResult(ResultCode,data)</code>，在请求者里重写<code>SetResult(requestCode,resultCode,data)</code></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/08/67124491.jpg" alt="img"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//看图也可以</span><span class="token comment">// 回传的类</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"回传的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//点击才销毁界面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="任务栈，启动模式（X）"><a href="#任务栈，启动模式（X）" class="headerlink" title="任务栈，启动模式（X）"></a>任务栈，启动模式（X）</h3><hr><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><p>文件存储，SharedPreferences存储，SQLite数据库存储，ContentProvider，网络存储</p><h3 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h3><p>文件的操作模式：Android是基于Linux的，所以操作文件要加操作模式。分别为，<em>MODE_PRIVATE</em>（默认），<em>MODE_APPEND</em>追加内容，<em>MODE_WORLD_READABLE</em>可被其他应用读取，<em>MODE_WORLD_WRITEABLE</em>可被其他应用写入</p><p><strong>内部存储</strong>：存储（小文件）到应用所在的==包位置==，在data/data/&lt;包名&gt;/file中</p><ul><li><code>openFileOutput</code>打开文件输出流，然后写。读与之类似</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//代码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileHelper</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Context</span> mContext<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">FileHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span>  <span class="token class-name">FileHelper</span><span class="token punctuation">(</span><span class="token class-name">Context</span> mContext<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mContext<span class="token operator">=</span>mContext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 内部存储，存储到程序数据包中（不是sd卡）     * 文件保存，写入到文件中，所以是输出流     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">,</span><span class="token class-name">String</span> filecontent<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 这里我们使用私有模式，创建出来的文件只能被本应用访问，还会覆盖原文件</span>        <span class="token comment">/**         * 因为是内部存储，所以要用 上下文环境 打开文件输出流 open File Output         */</span>        <span class="token class-name">FileOutputStream</span> output <span class="token operator">=</span> mContext<span class="token punctuation">.</span><span class="token function">openFileOutput</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token class-name">Context</span><span class="token punctuation">.</span>MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>filecontent<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将String字符串以字节流的形式写入输出流</span>        output<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关闭输出流</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 文件读取，输入流     */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 打开文件输入流</span>        <span class="token class-name">FileInputStream</span> input <span class="token operator">=</span> mContext<span class="token punctuation">.</span><span class="token function">openFileInput</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 读取文件内容</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 关闭输入流</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/////////////////////////////////////////////</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btnclean<span class="token operator">:</span> <span class="token comment">// 清空内容</span>                editname<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                editdetail<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btnsave<span class="token operator">:</span> <span class="token comment">// 保存</span>                <span class="token class-name">FileHelper</span> fileHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileHelper</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> filename <span class="token operator">=</span> editname<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> filedetail <span class="token operator">=</span> editdetail<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fileHelper<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>filedetail<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> <span class="token string">"数据写入成功"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"数据写入失败"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btnread<span class="token operator">:</span> <span class="token comment">// 读取</span>                <span class="token class-name">String</span> detail<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>                <span class="token class-name">FileHelper</span> fileHelper2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileHelper</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> fname <span class="token operator">=</span> editname<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    detail<span class="token operator">=</span>fileHelper2<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> detail<span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>外部存储</strong>：存储（大文件）到==SD卡==中，在mmt\sdcard上或/storage/shell/emilated/0</p><ul><li>先判断SD卡是否插入且可读写，获取SD的目录及路径 ，然后使用FileOutputStream打开输出流写，</li><li>AndroidMainfest.xml要添加SD权限</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//如果手机已插入sd卡，且app具有读写sd卡的权限</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getExternalStorageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Environment</span><span class="token punctuation">.</span>MEDIA_MOUNTED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    filename<span class="token operator">=</span><span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>filename<span class="token punctuation">;</span><span class="token comment">//获取文件名</span>    <span class="token comment">//读写文件的操作</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SDFileHelper</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Context</span> context<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SDFileHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">SDFileHelper</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//往sd卡写入文件的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveFileToSD</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">,</span> <span class="token class-name">String</span> filecontent<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果手机已插入sd卡，且app具有读写sd卡的权限</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getExternalStorageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Environment</span><span class="token punctuation">.</span>MEDIA_MOUNTED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            filename <span class="token operator">=</span> <span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> filename<span class="token punctuation">;</span>            <span class="token comment">//这里就不要用openFileOutput了，那个是往  手机内存中写数据的</span>            <span class="token class-name">FileOutputStream</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>            output<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>filecontent<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将String字符串以字节流的形式写入到输出流中，然后关闭输出流</span>            output<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>            <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"SD卡不存在或者不可读写"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//读取SD卡中文件的方法</span>    <span class="token comment">//定义读取文件的方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readFromSD</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getExternalStorageState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Environment</span><span class="token punctuation">.</span>MEDIA_MOUNTED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            filename <span class="token operator">=</span> <span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> filename<span class="token punctuation">;</span>            <span class="token comment">//打开文件输入流</span>            <span class="token class-name">FileInputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">//读取文件内容</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//关闭输入流</span>            input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/////////////////////////////////////////////////</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SharePreferences保存用户偏好参数"><a href="#SharePreferences保存用户偏好参数" class="headerlink" title="SharePreferences保存用户偏好参数"></a>SharePreferences保存用户偏好参数</h3><p>存储（键值对，key-value）到xml文件中，==data/data/&lt;包名&gt;/shared_prefs==目录下 生成了一个==xml文件==</p><p><strong>写入：</strong></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/09/77015718.jpg" alt="img"></p><p><strong>读取：</strong></p><p><img src="https://www.runoob.com/wp-content/uploads/2015/09/54316471.jpg" alt="img"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SharedHelper</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Context</span> mContent<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SharedHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">SharedHelper</span><span class="token punctuation">(</span><span class="token class-name">Context</span> mContent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mContent<span class="token operator">=</span>mContent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//定义一个保存数据的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> passwd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">SharedPreferences</span> sp <span class="token operator">=</span> mContent<span class="token punctuation">.</span><span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"mysp"</span><span class="token punctuation">,</span> <span class="token class-name">Context</span><span class="token punctuation">.</span>MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SharedPreferences<span class="token punctuation">.</span>Editor</span> editor <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        editor<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        editor<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"passwd"</span><span class="token punctuation">,</span>passwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        editor<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>mContent<span class="token punctuation">,</span> <span class="token string">"信息已经写入SharePreference中"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//定义一个读取sp文件的方法</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token punctuation">,</span><span class="token class-name">String</span> <span class="token punctuation">></span></span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">SharedPreferences</span> mysp <span class="token operator">=</span> mContent<span class="token punctuation">.</span><span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"mysp"</span><span class="token punctuation">,</span> <span class="token class-name">Context</span><span class="token punctuation">.</span>MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span>mysp<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"passwd"</span><span class="token punctuation">,</span>mysp<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"passwd"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SQLite数据库"><a href="#SQLite数据库" class="headerlink" title="SQLite数据库"></a>SQLite数据库</h3><ul><li><strong>SQLiteOpenHelper</strong>：抽象类，我们通过继承该类，然后重写数据库创建以及更新的方法， 我们还可以通过该类的对象==获得数据库实例，或者关闭数据库==！</li><li><strong>SQLiteDatabase</strong>：数据库访问类：我们可以通过该类的对象来==对数据库做一些增删改查的操作==</li><li><strong>Cursor</strong>：游标，有点类似于JDBC里的resultset，==结果集==！可以简单理解为指向数据库中某 一个记录的指针！</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDBOpenHelper</span> <span class="token keyword">extends</span> <span class="token class-name">SQLiteOpenHelper</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MyDBOpenHelper</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">SQLiteDatabase<span class="token punctuation">.</span>CursorFactory</span> factory<span class="token punctuation">,</span> <span class="token keyword">int</span> version<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> name<span class="token punctuation">,</span> factory<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 数据库第一次创建时被调用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">SQLiteDatabase</span> db<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        db<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE person(personid INTEGER PRIMARY KEY AUTOINCREMENT,"</span> <span class="token operator">+</span>                <span class="token string">"name VARCHAR(20),phone varchar(20) UNIQUE,email varchar(20))"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//软件版本号发生改变时调用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onUpgrade</span><span class="token punctuation">(</span><span class="token class-name">SQLiteDatabase</span> db<span class="token punctuation">,</span> <span class="token keyword">int</span> oldVersion<span class="token punctuation">,</span> <span class="token keyword">int</span> newVersion<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        db.execSQL("ALTER TABLE person ADD phone VARCHAR(12) NULL");</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">db <span class="token operator">=</span> myDBHelper<span class="token punctuation">.</span><span class="token function">getWritableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_insert<span class="token operator">:</span>        <span class="token comment">/**                 * 增加                 * ContentValues -> db.insert(表名，列，值)                 */</span>        <span class="token class-name">ContentValues</span> values1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        values1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        values1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//参数依次是：表名，强行插入null值得数据列的列名，一行记录的数据</span>        db<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> values1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> <span class="token string">"插入完毕~"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//提示插入成功</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_query<span class="token operator">:</span>        <span class="token comment">/**                 * 查询                 * db.query()                 * cursor.moveToFirst,cursor.moveToNext                 * cursor.close                 */</span>        sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//参数依次是:表名，列名，where约束条件，where中占位符提供具体的值，指定group by的列，进一步约束</span>        <span class="token comment">//指定查询结果的排序方式</span>        <span class="token class-name">Cursor</span> cursor <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">moveToFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//查询到的每条记录</span>                <span class="token keyword">int</span> pid <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token string">"personid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> name_show <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> phone_show <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> email_show <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"id："</span> <span class="token operator">+</span> pid <span class="token operator">+</span> <span class="token string">" \nname："</span> <span class="token operator">+</span> name_show <span class="token operator">+</span> <span class="token string">" \nphone: "</span> <span class="token operator">+</span> phone_show <span class="token operator">+</span> <span class="token string">" \nemail: "</span> <span class="token operator">+</span> email_show <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">moveToNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cursor<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_update<span class="token operator">:</span>        <span class="token comment">/**                 * 更新                 * db.update（表名，values，条件，条件值）                 */</span>        <span class="token class-name">ContentValues</span> values2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            values2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>phone<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            values2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>email<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            values2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//参数依次是表名，修改后的值，where条件，以及约束，如果不指定三四两个参数，会更改所有行</span>        db<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> values2<span class="token punctuation">,</span> <span class="token string">"phone = ?"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>phone<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> <span class="token string">"更新完毕~"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_delete<span class="token operator">:</span>        <span class="token comment">/**                 * 删除                 * db.delete（表名，条件，条件值）                 */</span>        <span class="token comment">//参数依次是表名，以及where条件与约束</span>        db<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> <span class="token string">"phone = ?"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>phone<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> <span class="token string">"删除完毕~"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">////////////////////////////////////////</span><span class="token class-name">SQLiteDatabase</span> db <span class="token operator">=</span> dbOpenHelper<span class="token punctuation">.</span><span class="token function">getWritableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM person WHERE personid = ?"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 其他SQL语句与之类似</span><span class="token comment">// 查询</span><span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">SQLiteDatabase</span> db <span class="token operator">=</span> dbOpenHelper<span class="token punctuation">.</span><span class="token function">getReadableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Cursor</span> cursor <span class="token operator">=</span>  db<span class="token punctuation">.</span><span class="token function">rawQuery</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM person WHERE personid = ?"</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>id<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//存在数据才返回true</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">moveToFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> personid <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token string">"personid"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> phone <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>personid<span class="token punctuation">,</span>name<span class="token punctuation">,</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cursor<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SQLite事务"><a href="#SQLite事务" class="headerlink" title="SQLite事务"></a>SQLite事务</h3><p>把多个连续的操作，具有原子性，把一系列操作看作一个原子操作</p><p><code>db.beginTransacton()</code>开启数据事务操作</p><p><code>db.setTransactionSuccessful()</code>设置事务标识为成功，当事务结束时，提交事务。</p><p><code>db.endTransaction()</code>结束事务</p><hr><h2 id="内容提供者"><a href="#内容提供者" class="headerlink" title="内容提供者"></a>内容提供者</h2><h3 id="内容提供者概述"><a href="#内容提供者概述" class="headerlink" title="内容提供者概述"></a>内容提供者概述</h3><p>内容提供者ContentProvider，可以把自己的数据分享给别的app使用。</p><p>ContentProvider代理操作数据库。</p><p>ContentResolver类可以操作ContentProvider暴露的数据</p><p>URI：<em>schedule://authority/path/id</em></p><h3 id="创建内容提供者"><a href="#创建内容提供者" class="headerlink" title="创建内容提供者"></a>创建内容提供者</h3><ol><li><p>右键new-&gt;other-&gt;contentProvider</p></li><li><p>创建一个类继承ContentProvider，并重写相应的操作数据库的方法</p><blockquote><p>还要有创建数据库的类（继承DBOpenHelper），</p><p>AndroidMainFest.xml中注册ContentProvider，</p><p>UriMatcher用于处理uri的匹配，然后执行不同的case选项。</p></blockquote></li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--属性依次为：全限定类名,用于匹配的URI,是否共享数据 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.test07.NameContentProvider<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>authorities</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.csl.example.providers.myprovider<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问其他程序提供的数据"><a href="#访问其他程序提供的数据" class="headerlink" title="访问其他程序提供的数据"></a>访问其他程序提供的数据</h3><p>通过ContentResoler访问，</p><p>根据context得到ConetntResoler，构造Uri，有数据则构造ContentValues用于添加删除更新。查询到话返回一个Cursor对象，然后遍历。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">btninsert <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btninsert<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取contentprovider 数据  </span><span class="token keyword">final</span> <span class="token class-name">ContentResolver</span> resolver <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btninsert<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// core 4 lines</span>        <span class="token comment">//uri -> ContentValues -> resolver插入</span>        <span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"content://com.jay.example.providers.myprovider/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ContentValues</span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resolver<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"数据插入成功"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="什么是内容观察者"><a href="#什么是内容观察者" class="headerlink" title="什么是内容观察者"></a>什么是内容观察者</h3><hr><h2 id="广播机制"><a href="#广播机制" class="headerlink" title="广播机制"></a>广播机制</h2><h3 id="广播机制的概述"><a href="#广播机制的概述" class="headerlink" title="广播机制的概述"></a>广播机制的概述</h3><p>发布订阅模式</p><h3 id="创建广播接收者"><a href="#创建广播接收者" class="headerlink" title="创建广播接收者"></a>创建广播接收者</h3><ol><li><p>项目右键</p></li><li><p>直接创建，继承BroadcastReceiver类，重写onReceive方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBRReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span><span class="token string">"网络状态发生改变~"</span><span class="token punctuation">,</span><span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="注册广播接收者"><a href="#注册广播接收者" class="headerlink" title="注册广播接收者"></a>注册广播接收者</h3><p>MainActivity.java中<strong>动态注册广播</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MyBRReceiver</span> myReceiver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//核心部分代码：</span>        myReceiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBRReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntentFilter</span> itFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        itFilter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"android.net.conn.CONNECTIVITY_CHANGE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">registerReceiver</span><span class="token punctuation">(</span>myReceiver<span class="token punctuation">,</span> itFilter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注册接收器</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//别忘了将广播取消掉哦~</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unregisterReceiver</span><span class="token punctuation">(</span>myReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>静态方式注册：</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MyBRReceiver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>android.net.conn.CONNECTIVITY_CHANGE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 权限 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.net.conn.CONNECTIVITY_CHANGE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发送有序、无序广播（X）"><a href="#发送有序、无序广播（X）" class="headerlink" title="发送有序、无序广播（X）"></a>发送有序、无序广播（X）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//发送无序广播</span><span class="token class-name">Intent</span> nonOrderIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nonOrderIntent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string">"com.test.testbroadcast2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nonOrderIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token string">"领导发了5000块钱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//nonOrderIntent.setPackage(packageName);该广播仅对指定包名的应用有效</span><span class="token function">sendBroadcast</span><span class="token punctuation">(</span>nonOrderIntent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token comment">//sendBroadcast(intent,permission);带权限发送广播</span><span class="token comment">//发送有序广播zzz</span><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string">"com.test.testbroadcast2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sendOrderedBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Receiver1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"领导给发了10000块"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sendOrderedBroadcast(intent,permission);给广播指定权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="服务service"><a href="#服务service" class="headerlink" title="服务service"></a>服务service</h2><h3 id="服务概述"><a href="#服务概述" class="headerlink" title="服务概述"></a>服务概述</h3><p>四大组件之一，由Activity启动，但不依赖于Activity</p><h3 id="服务的创建"><a href="#服务的创建" class="headerlink" title="服务的创建"></a>服务的创建</h3><p>右键-》service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> TAG<span class="token operator">=</span><span class="token string">"MyService"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onCreate: service创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onStartCommand: Service开启"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> startId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onDestroy: Service销毁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO: Return the communication channel to the service.</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"Not yet implemented"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生命周期，"><a href="#生命周期，" class="headerlink" title="生命周期，"></a>生命周期，</h3><p>两种启动方式，</p><p>1）<code>StartService()</code>启动Service<br>2）<code>BindService()</code>启动Service</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/08/11165797.jpg" alt="img"></p><h3 id="服务的启动方式"><a href="#服务的启动方式" class="headerlink" title="服务的启动方式"></a>服务的启动方式</h3><p>开启service的两种方式，startService() 和 bindService()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Button</span> btn1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Button</span> btn2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn2<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//开启服务</span>                <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startService</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn2<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//关闭服务</span>                <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">stopService</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种：bindService()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="服务的通信（X）"><a href="#服务的通信（X）" class="headerlink" title="服务的通信（X）"></a>服务的通信（X）</h3><p>本地服务通信，远程服务通信</p><hr><h2 id="Android事件处理"><a href="#Android事件处理" class="headerlink" title="Android事件处理"></a>Android事件处理</h2><h3 id="事件回调"><a href="#事件回调" class="headerlink" title="事件回调"></a>事件回调</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        setContentView(R.layout.activity_main);</span>        <span class="token class-name">MyButton</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyButton</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onKeyDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> keyCode<span class="token punctuation">,</span> <span class="token class-name">KeyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>keyCode<span class="token operator">==</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>KEYCODE_BACK<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"点击了后退键3"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">MyButton</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span>AppCompatButton</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">MyButton</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">MotionEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>                    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"按下"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>                    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"弹起"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>                    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"移动"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件监听："><a href="#事件监听：" class="headerlink" title="事件监听："></a>事件监听：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">View<span class="token punctuation">.</span>OnLongClickListener</span><span class="token punctuation">,</span> <span class="token class-name">View<span class="token punctuation">.</span>OnFocusChangeListener</span><span class="token punctuation">,</span> <span class="token class-name">View<span class="token punctuation">.</span>OnKeyListener</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Button</span> button<span class="token punctuation">,</span> btn2<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取按钮（事件源）</span>        btn2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Button</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> button<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 监听</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 处理事件</span>                <span class="token comment">// 点击按钮之后 弹出Toast提示信息</span>                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"按钮的ID："</span> <span class="token operator">+</span> v<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">setOnLongClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">setOnFocusChangeListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn2<span class="token punctuation">.</span><span class="token function">setOnFocusChangeListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span><span class="token function">setOnKeyListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn2<span class="token punctuation">.</span><span class="token function">setOnKeyListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onLongClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn1<span class="token operator">:</span>                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"长按了按钮"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFocusChange</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">,</span> <span class="token keyword">boolean</span> hasFocus<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn1<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hasFocus <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"按钮1"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn2<span class="token operator">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hasFocus <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"按钮2"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onKey</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> keyCode<span class="token punctuation">,</span> <span class="token class-name">KeyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>keyCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>KEYCODE_ENTER<span class="token operator">:</span>                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"按下了Enter按键"</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">.</span>KEYCODE_B<span class="token operator">:</span>                btn2<span class="token punctuation">.</span><span class="token function">performClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//模拟点击</span>                btn2<span class="token punctuation">.</span><span class="token function">requestFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//模拟获得焦点</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="手势（X）"><a href="#手势（X）" class="headerlink" title="手势（X）"></a>手势（X）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h3><blockquote><p>网络请求要在子线程中，获取到数据之后，子线程不能更新界面，更新界面要放在主线程中。</p><p>也就是说，在子线程中调用handler.sendMessage(message)，在主线程中handler重写handleMessage方法，根据message的不同做相应的处理，也就是说message可以作为操作码来用。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TextView</span> textView <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Handler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                message<span class="token punctuation">.</span>obj<span class="token operator">=</span><span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment">// 把字符串以对象形式传递</span>                handler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 在子线程中 访问主线程 修改页面</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        textView<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ImageView</span> imgPic<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> PIC_URL <span class="token operator">=</span> <span class="token string">"https://gitee.com/CCCSL05/pic-go/raw/master/img//20210526233412.png"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        imgPic <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ImageView</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>imgPic<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Handler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Bitmap</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                imgPic<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>PIC_URL<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">HttpURLConnection</span> httpURLConnection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    httpURLConnection<span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    httpURLConnection<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> httpURLConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Bitmap</span> bm <span class="token operator">=</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    message<span class="token punctuation">.</span>obj <span class="token operator">=</span> bm<span class="token punctuation">;</span>                    handler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p>==联网权限==</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>要在子线程中访问网络。</p><p>子线程是异步的，可能主程序直接结束了，所以子线程没法访问。</p></blockquote><h3 id="使用HTTP访问网络"><a href="#使用HTTP访问网络" class="headerlink" title="使用HTTP访问网络"></a>使用HTTP访问网络</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 在子线程里访问网络</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"http://114.215.128.178:8087/chat/user/queryById?userId=1"</span><span class="token punctuation">)</span>                    <span class="token class-name">HttpURLConnection</span> httpURLConnection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    httpURLConnection<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    httpURLConnection<span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    httpURLConnection<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> httpURLConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获得响应体</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">readInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    httpURLConnection<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebView</span> webView <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WebView</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>web1<span class="token punctuation">)</span><span class="token punctuation">;</span>        webView<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token string">"https://www.bilibili.com/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        webView<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSupportZoom</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置缩放</span>        webView<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBuiltInZoomControls</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 缩放控制器</span>        <span class="token class-name">String</span> strCode<span class="token operator">=</span><span class="token string">"&lt;h1>hello&lt;/h1>"</span><span class="token punctuation">;</span>        <span class="token comment">// 加载数据</span>        webView<span class="token punctuation">.</span><span class="token function">loadDataWithBaseURL</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>strCode<span class="token punctuation">,</span><span class="token string">"text/html"</span><span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开启js支持</span>        webView<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON数据解析（Gson没写）"><a href="#JSON数据解析（Gson没写）" class="headerlink" title="JSON数据解析（Gson没写）"></a>JSON数据解析（Gson没写）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> json1<span class="token operator">=</span><span class="token string">"&#123;'name':'zzz','age':18&#125;"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> json2<span class="token operator">=</span><span class="token string">"[&#123;'name':'root','age':18&#125;,&#123;'name':'哈哈哈','age':20&#125;]"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span>json1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">JSONArray</span> jsonArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONArray</span><span class="token punctuation">(</span>json2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>jsonArray<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">JSONObject</span> jsonObject2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">)</span> jsonArray<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonObject2<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jsonObject2<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107/"/>
      <url>/posts/16107/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Theme-Sakura</title>
      <link href="/posts/22338/"/>
      <url>/posts/22338/</url>
      
        <content type="html"><![CDATA[<p>hexo-theme-sakura主题 <a href="https://github.com/honjun/hexo-theme-sakura/blob/master/README.md">English document</a></p><p>基于WordPress主题<a href="https://github.com/mashirozx/Sakura/">Sakura</a>修改成Hexo的主题。</p><p><a href="https://sakura.hojun.cn/">demo预览</a></p><p>正在开发中……</p><p><img src="https://wx3.sinaimg.cn/large/006bYVyvly1g069tuf42oj312w0m8ndq.jpg"></p><h2 id="交流群"><a href="#交流群" class="headerlink" title="交流群"></a>交流群</h2><p>若你是使用者，加群QQ: 801511924</p><p>若你是创作者，加群QQ: 194472590</p><h2 id="主题特性"><a href="#主题特性" class="headerlink" title="主题特性"></a>主题特性</h2><ul><li>首页大屏视频</li><li>首页随机封面</li><li>图片懒加载</li><li>valine评论</li><li>fancy-box相册</li><li>pjax支持，音乐不间断</li><li>aplayer音乐播放器</li><li>多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了）</li></ul><h2 id="赞赏作者"><a href="#赞赏作者" class="headerlink" title="赞赏作者"></a>赞赏作者</h2><p>如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！</p><p><a href="https://www.paypal.me/hojuncn">paypal</a> | <a href="https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/donate/AliPayQR.jpg">Alipay 支付宝</a> | <a href="https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/donate/WeChanSQ.jpg">WeChat Pay 微信支付</a></p><h2 id="未完善的使用教程"><a href="#未完善的使用教程" class="headerlink" title="未完善的使用教程"></a>未完善的使用教程</h2><p>那啥？老实说我目前也不是很有条理233333333~</p><h2 id="1、主题下载安装"><a href="#1、主题下载安装" class="headerlink" title="1、主题下载安装"></a>1、主题下载安装</h2><p><a href="https://github.com/honjun/hexo-theme-sakura">hexo-theme-sakura</a>建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。</p><p>下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行<code>npm i</code>安装依赖。</p><h2 id="2、主题配置"><a href="#2、主题配置" class="headerlink" title="2、主题配置"></a>2、主题配置</h2><h3 id="博客根目录下的-config配置"><a href="#博客根目录下的-config配置" class="headerlink" title="博客根目录下的_config配置"></a>博客根目录下的_config配置</h3><p>站点</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># Sitetitle: 你的站点名subtitle:description: 站点简介keywords:author: 作者名language: zh-cntimezone:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">deploy:  type: git  repo:     github: 你的github仓库地址    # coding: 你的coding仓库地址  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>备份 （使用hexo b发布备份到远程仓库）</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">backup:  type: git  message: backup my blog of https:&#x2F;&#x2F;honjun.github.io&#x2F;  repository:    # 你的github仓库地址,备份分支名  （建议新建backup分支）    github: https:&#x2F;&#x2F;github.com&#x2F;honjun&#x2F;honjun.github.io.git,backup    # coding: https:&#x2F;&#x2F;git.coding.net&#x2F;hojun&#x2F;hojun.git,backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主题目录下的-config配置"><a href="#主题目录下的-config配置" class="headerlink" title="主题目录下的_config配置"></a>主题目录下的_config配置</h3><p>其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># site name# 站点名 【改】prefixName: さくら荘そのsiteName: hojun# favicon and site master avatar# 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】favicon: &#x2F;images&#x2F;favicon.icoavatar: &#x2F;img&#x2F;custom&#x2F;avatar.jpg# 站点url 【改】url: https:&#x2F;&#x2F;sakura.hojun.cn# 站点介绍（或者说是个人签名）【改】description: Live your life with passion! With some drive!# 站点cdn，没有就为空 【改】  若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;honjun&#x2F;cdn@1.6&#x2F;img&#x2F;custom&#x2F;avatar.jpgcdn: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;honjun&#x2F;cdn@1.6# 开启pjax 【选】pjax: 1# 站点首页的公告信息 【改】notice: hexo-Sakura主题已经开源，目前正在开发中...# 懒加载的加载中图片 【选】lazyloadImg: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;honjun&#x2F;cdn@1.6&#x2F;img&#x2F;loader&#x2F;orange.progress-bar-stripe-loader.svg# 站点菜单配置 【选】menus:  首页: &#123; path: &#x2F;, fa: fa-fort-awesome faa-shake &#125;  归档: &#123; path: &#x2F;archives, fa: fa-archive faa-shake, submenus: &#123;     技术: &#123;path: &#x2F;categories&#x2F;技术&#x2F;, fa: fa-code &#125;,     生活: &#123;path: &#x2F;categories&#x2F;生活&#x2F;, fa: fa-file-text-o &#125;,     资源: &#123;path: &#x2F;categories&#x2F;资源&#x2F;, fa: fa-cloud-download &#125;,     随想: &#123;path: &#x2F;categories&#x2F;随想&#x2F;, fa: fa-commenting-o &#125;,    转载: &#123;path: &#x2F;categories&#x2F;转载&#x2F;, fa: fa-book &#125;  &#125; &#125;  清单: &#123; path: javascript:;, fa: fa-list-ul faa-vertical, submenus: &#123;     书单: &#123;path: &#x2F;tags&#x2F;悦读&#x2F;, fa: fa-th-list faa-bounce &#125;,     番组: &#123;path: &#x2F;bangumi&#x2F;, fa: fa-film faa-vertical &#125;,     歌单: &#123;path: &#x2F;music&#x2F;, fa: fa-headphones &#125;,    图集: &#123;path: &#x2F;tags&#x2F;图集&#x2F;, fa: fa-photo &#125;  &#125; &#125;  留言板: &#123; path: &#x2F;comment&#x2F;, fa: fa-pencil-square-o faa-tada &#125;  友人帐: &#123; path: &#x2F;links&#x2F;, fa: fa-link faa-shake &#125;  赞赏: &#123; path: &#x2F;donate&#x2F;, fa: fa-heart faa-pulse &#125;  关于: &#123; path: &#x2F;, fa: fa-leaf faa-wrench , submenus: &#123;     我？: &#123;path: &#x2F;about&#x2F;, fa: fa-meetup&#125;,     主题: &#123;path: &#x2F;theme-sakura&#x2F;, fa: iconfont icon-sakura &#125;,    Lab: &#123;path: &#x2F;lab&#x2F;, fa: fa-cogs &#125;,  &#125; &#125;  客户端: &#123; path: &#x2F;client&#x2F;, fa: fa-android faa-vertical &#125;  RSS: &#123; path: &#x2F;atom.xml, fa: fa-rss faa-pulse &#125;# Home page sort type: -1: newer first，1: older first. 【非】homePageSortType: -1# Home page article shown number) 【非】homeArticleShown: 10# 背景图片 【选】bgn: 8# startdash面板 url, title, desc img 【改】startdash:   - &#123;url: &#x2F;theme-sakura&#x2F;, title: Sakura, desc: 本站 hexo 主题, img: &#x2F;img&#x2F;startdash&#x2F;sakura.md.png&#125;  - &#123;url: http:&#x2F;&#x2F;space.bilibili.com&#x2F;271849279, title: Bilibili, desc: 博主的b站视频, img: &#x2F;img&#x2F;startdash&#x2F;bilibili.jpg&#125;  - &#123;url: &#x2F;, title: hojun的万事屋, desc: 技术服务, img: &#x2F;img&#x2F;startdash&#x2F;wangshiwu.jpg&#125;# your site build time or founded date# 你的站点建立日期 【改】siteBuildingTime: 07&#x2F;17&#x2F;2018# 社交按钮(social)  url, img PC端配置 【改】social:  github: &#123;url: http:&#x2F;&#x2F;github.com&#x2F;honjun, img: &#x2F;img&#x2F;social&#x2F;github.png&#125;  sina: &#123;url: http:&#x2F;&#x2F;weibo.com&#x2F;mashirozx?is_all&#x3D;1, img: &#x2F;img&#x2F;social&#x2F;sina.png&#125;  wangyiyun: &#123;url: http:&#x2F;&#x2F;weibo.com&#x2F;mashirozx?is_all&#x3D;1, img: &#x2F;img&#x2F;social&#x2F;wangyiyun.png&#125;  zhihu: &#123;url: http:&#x2F;&#x2F;weibo.com&#x2F;mashirozx?is_all&#x3D;1, img: &#x2F;img&#x2F;social&#x2F;zhihu.png&#125;  email: &#123;url: http:&#x2F;&#x2F;weibo.com&#x2F;mashirozx?is_all&#x3D;1, img: &#x2F;img&#x2F;social&#x2F;email.svg&#125;  wechat: &#123;url: &#x2F;#, qrcode: &#x2F;img&#x2F;custom&#x2F;wechat.jpg, img: &#x2F;img&#x2F;social&#x2F;wechat.png&#125;# 社交按钮(msocial)  url, img 移动端配置 【改】msocial:  github: &#123;url: http:&#x2F;&#x2F;github.com&#x2F;honjun, fa: fa-github, color: 333&#125;  weibo: &#123;url: http:&#x2F;&#x2F;weibo.com&#x2F;mashirozx?is_all&#x3D;1, fa: fa-weibo, color: dd4b39&#125;  qq: &#123;url: https:&#x2F;&#x2F;wpa.qq.com&#x2F;msgrd?v&#x3D;3&amp;uin&#x3D;954655431&amp;site&#x3D;qq&amp;menu&#x3D;yes, fa: fa-qq, color: 25c6fe&#125;# 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】donate:  alipay: &#x2F;img&#x2F;custom&#x2F;donate&#x2F;AliPayQR.jpg  wechat: &#x2F;img&#x2F;custom&#x2F;donate&#x2F;WeChanQR.jpg  wechatSQ: &#x2F;img&#x2F;custom&#x2F;donate&#x2F;WeChanSQ.jpg# 首页视频地址为https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;honjun&#x2F;hojun@1.2&#x2F;Unbroken.mp4，配置如下 【改】movies:  url: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;honjun&#x2F;hojun@1.2  # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用  name: Unbroken.mp4# 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】aplayer:   id: 2660651585  server: netease  type: playlist  fixed: true  mini: false  autoplay: false  loop: all  order: random  preload: auto  volume: 0.7  mutex: true# Valine评论配置【改】valine: truev_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHszv_appKey: mgOpfzbkHYqU92CV4IDlAUHQ<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分类页和标签页配置"><a href="#分类页和标签页配置" class="headerlink" title="分类页和标签页配置"></a>分类页和标签页配置</h2><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><p><img src="https://ws3.sinaimg.cn/large/006bYVyvly1g07b0gucy9j31060jih76.jpg"></p><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><p><img src="https://wx2.sinaimg.cn/large/006bYVyvly1g07azb2399j31040jgazs.jpg"></p><p>配置项在\themes\Sakura\languages\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">#category# 按分类名创建技术:    #中文标题    zh: 野生技术协会     # 英文标题    en: Geek – Only for Love    # 封面图片    img: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;honjun&#x2F;cdn@1.6&#x2F;img&#x2F;banner&#x2F;coding.jpg生活:    zh: 生活    en: live    img: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;honjun&#x2F;cdn@1.6&#x2F;img&#x2F;banner&#x2F;writing.jpg#tag# 标签名即是标题悦读:    # 封面图片    img: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;honjun&#x2F;cdn@1.6&#x2F;img&#x2F;banner&#x2F;reading.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单页面封面配置"><a href="#单页面封面配置" class="headerlink" title="单页面封面配置"></a>单页面封面配置</h2><p><img src="https://ws3.sinaimg.cn/large/006bYVyvly1g07b1pi619j31080jge4u.jpg"><br>如留言板页面页面，位于source下的comment下，打开index.md如下：</p><pre class="line-numbers language-md" data-language="md"><code class="language-md">---title: commentdate: 2018-12-20 23:13:48keywords: 留言板description: comments: true# 在这里配置单页面头部图片，自定义替换哦~photos: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;honjun&#x2F;cdn@1.4&#x2F;img&#x2F;banner&#x2F;comment.jpg---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单页面配置"><a href="#单页面配置" class="headerlink" title="单页面配置"></a>单页面配置</h2><h3 id="番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"><a href="#番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）" class="headerlink" title="番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"></a>番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src="https://wx2.sinaimg.cn/large/006bYVyvly1g07b2gyx60j31090jjahj.jpg"></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">---layout: bangumititle: bangumicomments: falsedate: 2019-02-10 21:32:48keywords:description:bangumis:  # 番组图片  - img: https:&#x2F;&#x2F;lain.bgm.tv&#x2F;pic&#x2F;cover&#x2F;l&#x2F;0e&#x2F;1e&#x2F;218971_2y351.jpg  # 番组名    title: 朝花夕誓——于离别之朝束起约定之花  # 追番状态 （追番ing&#x2F;已追完）    status: 已追完  # 追番进度    progress: 100  # 番剧日文名称    jp: さよならの朝に約束の花をかざろう  # 放送时间    time: 放送时间: 2018-02-24 SUN.  # 番剧介绍    desc:  住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。  - img: https:&#x2F;&#x2F;lain.bgm.tv&#x2F;pic&#x2F;cover&#x2F;l&#x2F;0e&#x2F;1e&#x2F;218971_2y351.jpg    title: 朝花夕誓——于离别之朝束起约定之花    status: 已追完    progress: 50    jp: さよならの朝に約束の花をかざろう    time: 放送时间: 2018-02-24 SUN.    desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"><a href="#友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）" class="headerlink" title="友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"></a>友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src="https://ws3.sinaimg.cn/large/006bYVyvly1g07b39tleej31080jhjv1.jpg"></p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">---layout: linkstitle: links# 创建日期，可以改下date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改keywords: 友人帐 description: # true&#x2F;false 开启&#x2F;关闭评论comments: true # 页面头部图片，自定义修改photos: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;honjun&#x2F;cdn@1.4&#x2F;img&#x2F;banner&#x2F;links.jpg # 友链配置links:   # 类型分组  - group: 个人项目    # 类型简介    desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt;    items:    # 友链链接    - url: https:&#x2F;&#x2F;shino.cc&#x2F;fgvf    # 友链头像      img: https:&#x2F;&#x2F;cloud.moezx.cc&#x2F;Picture&#x2F;svg&#x2F;landscape&#x2F;fields.svg    # 友链站点名      name: Google    # 友链介绍  下面雷同      desc: Google 镜像    - url: https:&#x2F;&#x2F;shino.cc&#x2F;fgvf      img: https:&#x2F;&#x2F;cloud.moezx.cc&#x2F;Picture&#x2F;svg&#x2F;landscape&#x2F;fields.svg      name: Google      desc: Google 镜像  # 类型分组...  - group: 小伙伴们    desc: 欢迎交换友链 ꉂ(ˊᗜˋ)    items:    - url: https:&#x2F;&#x2F;shino.cc&#x2F;fgvf      img: https:&#x2F;&#x2F;cloud.moezx.cc&#x2F;Picture&#x2F;svg&#x2F;landscape&#x2F;fields.svg      name: Google      desc: Google 镜像    - url: https:&#x2F;&#x2F;shino.cc&#x2F;fgvf      img: https:&#x2F;&#x2F;cloud.moezx.cc&#x2F;Picture&#x2F;svg&#x2F;landscape&#x2F;fields.svg      name: Google      desc: Google 镜像---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="写文章配置"><a href="#写文章配置" class="headerlink" title="写文章配置"></a>写文章配置</h2><p>主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下：</p><pre class="line-numbers language-md" data-language="md"><code class="language-md">&#123;% bili video_id [page] %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>详细使用教程详见<a href="https://github.com/honjun/hexo-tag-bili/blob/master/README-zh_cn.md">hexo-tag-bili</a>。</p><p>hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下：</p><pre class="line-numbers language-md" data-language="md"><code class="language-md">&#123;% fb_img src [caption] %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>详细使用教程详见<a href="https://github.com/honjun/hexo-tag-fancybox_img/blob/master/README-zh_cn.md">hexo-tag-fancybox_img</a></p><h2 id="还有啥，一时想不起来……"><a href="#还有啥，一时想不起来……" class="headerlink" title="还有啥，一时想不起来……"></a>还有啥，一时想不起来……</h2><p>To be continued…</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 悦读 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
