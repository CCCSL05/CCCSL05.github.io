{"meta":{"title":"一天又在等","subtitle":"又再等一天","description":"这里是个人签名","author":"chusonglin","url":"https://cccsl05.github.io","root":"/"},"pages":[{"title":"404","text":"","path":"404/index.html","date":"07-22","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"07-22","excerpt":""}],"posts":[{"title":"first","text":"[toc] 详情：Mybatis框架入门教程 (biancheng.net) 01. MyBatis是什么传统jdbc连接数据库，对数据表的数据进行增删改查。mybatis封装了jdbc，对表数据进行CRUD更加简单。 MyBatis 是一个开源、轻量级的数据持久化框架，是 JDBC 和 Hibernate 的替代方案。MyBatis 内部封装了 JDBC，简化了加载驱动、创建连接、创建 statement 等繁杂的过程，开发者只需要关注 SQL 语句本身。 数据持久化是将内存中的数据模型转换为存储模型，以及将存储模型转换为内存中数据模型的统称。例如，文件的存储、数据的读取以及对数据表的增删改查等都是数据持久化操作。 ORM（Object Relational Mapping，对象关系映射）是一种数据持久化技术，它在对象模型和关系型数据库之间建立起对应关系，并且提供了一种机制，通过 JavaBean 对象去操作数据库表中的数据。 MyBatis 的主要思想是将程序中的大量 SQL 语句剥离出来，使用 XML 文件或注解的方式实现 SQL 的灵活配置，将 SQL 语句与程序代码分离，在不修改程序代码的情况下，直接在配置文件中修改 SQL 语句。 02. MyBatis和Hibernate的区别总的来说，MyBatis 是一个小巧、方便、高效、简单、直接、半自动化的持久层框架，Hibernate 是一个强大、方便、高效、复杂、间接、全自动化的持久层框架。 03. MyBatis下载（多种方式）在 MyBatis 的官方网站 http://mybatis.org，可以下载到最新版本的 MyBatis，本教程使用版本为 MyBatis 3.5.5。 如果您打不开网站或下载进度较慢，可以通过 https://github.com/mybatis/mybatis-3/releases 网址下载。 123456789101112131415&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.49&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; mybatis-3.5.5.jar 是 MyBatis 的核心包，jar 文件说明如下： 名称 说明 asm-7.1.jar 操作Java字节码的类库 cglib-3.3.0.jar 用来动态继承Java类或实现接口 commons-logging-1.2.jar 用于通用日志处理 javassist-3.27.0-GA.jar 分析、编码和创建Java类库 log4j-1.2.17.jar 日志系统 log4j-api-2.13.3.jar log4j到log4j2的桥接包 log4j-core-2.13.3.jar log4j到log4j2的桥接包 ognl-3.2.14.jar OGNL的类库 slf4j-api-1.7.30.jar 日志系统的封装，对外提供统一的API接口 slf4j-log4j12-1.7.30.jar slf4j 对 log4j 的相应驱动，完成 slf4j 绑定 log4j 04. 第一个MyBatis程序 创建 MyBatis 程序的步骤为：下载jar包 -&gt; 部署jar包 -&gt; 编写MyBatis核心配置文件 -&gt; 创建实体类 -&gt; 创建DAO接口 -&gt; 创建SQL映射文件 -&gt; 编写测试类 创建Web应用，部署jar包：在 Eclipse 中创建 Web 项目 mybatisDemo，并将下载的 MyBatis 的核心 jar 包、依赖 jar 包以及 MySQL 数据库的驱动 jar 包复制到 /WEB-INF/lib 目录中。 创建日志文件：MyBatis 默认使用 log4j 输出日志信息，如果开发者需要查看控制台输出的 SQL 语句，可以在 classpath 路径下配置其日志文件。在 mybatisDemo 的 src 目录下创建 log4j.properties 文件， 12345678# Global logging configurationlog4j.rootLogger=ERROR,stdout# MyBatis logging configuration...log4j.logger.net.biancheng=DEBUG# Console output...log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n 在日志文件中配置了全局的日志配置、MyBatis 的日志配置和控制台输出，其中 MyBatis 的日志配置用于将 net.biancheng 包下所有类的日志记录级别设置为 DEBUG。该配置文件内容不需要开发者全部手写，可以从 MyBatis 使用手册中的 Logging 小节复制，然后进行简单修改。 创建持久化类：创建实体类 创建映射文件：创建mapper.xml映射文件对应实体类。 创建配置文件：配置数据库连接 和 MyBatis 运行时所需的各种特性，包含了设置和影响 MyBatis 行为的属性。我们一般将此文件名命名“mybatis-config.xml” 12345678910111213141516171819202122232425262728&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;settings&gt; &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot; /&gt; &lt;/settings&gt; &lt;!-- 配置mybatis运行环境 --&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;!-- 使用JDBC的事务管理 --&gt; &lt;transactionManager type=&quot;JDBC&quot; /&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;!-- MySQL数据库驱动 --&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt; &lt;!-- 连接数据库的URL --&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test?characterEncoding=utf8&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;root&quot; /&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!-- 将mapper文件加入到配置文件中 --&gt; &lt;mappers&gt; &lt;mapper resource=&quot;net/biancheng/mapper/WebsiteMapper.xml&quot; /&gt; &lt;/mappers&gt;&lt;/configuration&gt; 测试类：在测试类中首先使用输入流读取配置文件，然后根据配置信息构建 SqlSessionFactory 对象。 接下来通过 SqlSessionFactory 对象创建 SqlSession 对象，并使用 SqlSession 对象的方法执行数据库操作。 123456789101112131415161718192021222324252627public class Test &#123; public static void main(String[] args) throws IOException &#123; // 读取配置文件mybatis-config.xml InputStream config = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;); // 根据配置文件构建SqlSessionFactory SqlSessionFactory ssf = new SqlSessionFactoryBuilder().build(config); // 通过SqlSessionFactory创建SqlSession SqlSession ss = ssf.openSession(); // SqlSession执行文件中定义的SQL，并返回映射结果 // 添加网站 Website website = new Website(); website.setName(&quot;编程帮&quot;); website.setUrl(&quot;https://www.biancheng.net/&quot;); website.setAge(21); website.setCountry(&quot;CN&quot;); ss.insert(&quot;net.biancheng.mapper.WebsiteMapper.addWebsite&quot;, website); // mapper文件对应sql // 查询所有网站 List&lt;Website&gt; listWeb = ss.selectList(&quot;net.biancheng.mapper.WebsiteMapper.selectAllWebsite&quot;); for (Website site : listWeb) &#123; System.out.println(site); &#125; // 提交事务 ss.commit(); // 关闭 SqlSession ss.close(); &#125;&#125; 05. MyBatis核心对象MyBatis 有三个基本要素： 核心接口和类 MyBatis核心配置文件（mybatis-config.xml） SQL映射文件（mapper.xml） MyBatis 的核心接口和类 首先获取 SqlSessionFactoryBuilder 对象，可以根据 XML 配置文件或者 Configuration 类的实例构建该对象。 然后获取 SqlSessionFactory 对象，该对象实例可以通过 SqlSessionFactoryBuilder 对象来获取。 有了 SqlSessionFactory 对象之后，就可以进而获取 SqlSession 实例。SqlSession 对象中完全包含以数据库为背景的所有执行 SQL 操作的方法，用该实例可以直接执行已映射的 SQL 语句。 SqlSessionFactory 是工厂接口而不是现实类，他的任务就是创建 SqlSession。 SqlSession 是用于执行持久化操作的对象，类似于 JDBC 中的 Connection。它提供了面向数据库执行 SQL 命令所需的所有方法，可以通过 SqlSession 实例直接运行已映射的 SQL 语句。 SqlSession 的用途主要有两种。 获取映射器。让映射器通过命名空间和方法名称找到对应的 SQL，并发送给数据库，执行后返回结果。 直接通过“命名空间（namespace）+SQL id”的方式执行 SQL，不需要获取映射器。这是 iBatis 版本留下的方式。 SqlSession生命周期和作用域 SqlSession 对应一次数据库会话。由于数据库会话不是永久的，因此 SqlSession 的生命周期也不是永久的，每次访问数据库时都需要创建 SqlSession 对象。 需要注意的是：每个线程都有自己的 SqlSession 实例，SqlSession 实例不能被共享，也不是线程安全的。因此 SqlSession 的作用域范围是 request 作用域或方法体作用域内。 06. MyBatis配置文件（mybatis-config.xml）MyBatis 配置文件的结构如下。 mybatis-config.xml 文件中的元素节点是有一定顺序的，节点位置必须按以下位置排序，否则会编译错误。 12345678910111213141516171819&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt; &lt;properties /&gt;&lt;!-- 属性 --&gt; &lt;settings /&gt;&lt;!-- 设置 --&gt; &lt;typeAliases /&gt;&lt;!-- 类型命名 --&gt; &lt;typeHandlers /&gt;&lt;!-- 类型处理器 --&gt; &lt;objectFactory /&gt;&lt;!-- 对象工厂 --&gt; &lt;plugins /&gt;&lt;!-- 插件 --&gt; &lt;environments&gt;&lt;!-- 配置环境 --&gt; &lt;environment&gt;&lt;!-- 环境变量 --&gt; &lt;transactionManager /&gt;&lt;!-- 事务管理器 --&gt; &lt;dataSource /&gt;&lt;!-- 数据源 --&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;databaseIdProvider /&gt;&lt;!-- 数据库厂商标识 --&gt; &lt;mappers /&gt;&lt;!-- 映射器 --&gt;&lt;/configuration&gt; ==properties== 标签可以通过 resource 属性指定==外部 properties 文件==（database.properties），也可以通过 ==properties 子元素==配置。 1&lt;properties resource=&quot;mybatisDemo/resources/database.properties&quot;/&gt; 12345678910111213141516&lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt;&lt;/environments&gt;&lt;properties&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;&lt;/properties&gt; ==settings== 的配置项很多，但是真正用到的不会太多，我们把常用的配置项研究清楚就可以了。settings 配置项说明如下表所示（表中红色字体的配置项为常用配置项）。 配置项 作用 配置选项 默认值 cacheEnabled 该配置影响所有映射器中配置缓存的全局开关 true|false true lazyLoadingEnabled 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。在特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态 true|false false aggressiveLazyLoading 当启用时，对任意延迟属性的调用会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载 true|false 版本3.4.1 （不包含） 之前默认值为 true，之后为 false multipleResultSetsEnabled 是否允许单一语句返回多结果集（需要兼容驱动） true|false true useColumnLabel 使用列标签代替列名。不同的驱动会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果 true|false true useGeneratedKeys 允许JDBC 支持自动生成主键，需要驱动兼容。如果设置为 true，则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby） true|false false autoMappingBehavior 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射。 PARTIAL 表示只会自动映射，没有定义嵌套结果集和映射结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套） NONE、PARTIAL、FULL PARTIAL autoMappingUnkno wnColumnBehavior 指定自动映射当中未知列（或未知属性类型）时的行为。 默认是不处理，只有当日志级别达到 WARN 级别或者以下，才会显示相关日志，如果处理失败会抛出 SqlSessionException 异常 NONE、WARNING、FAILING NONE defaultExecutorType 配置默认的执行器。SIMPLE 是普通的执行器；REUSE 会重用预处理语句（prepared statements）；BATCH 执行器将重用语句并执行批量更新 SIMPLE、REUSE、BATCH SIMPLE defaultStatementTimeout 设置超时时间，它决定驱动等待数据库响应的秒数 任何正整数 Not Set (null) defaultFetchSize 设置数据库驱动程序默认返回的条数限制，此参数可以重新设置 任何正整数 Not Set (null) safeRowBoundsEnabled 允许在嵌套语句中使用分页（RowBounds）。如果允许，设置 false true|false false safeResultHandlerEnabled 允许在嵌套语句中使用分页（ResultHandler）。如果允许，设置false true|false true mapUnderscoreToCamelCase 是否开启自动驼峰命名规则映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射 true|false false localCacheScope MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速联复嵌套査询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlScssion 的不同调用将不会共享数据 SESSION|STATEMENT SESSION jdbcTypeForNull 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER NULL、VARCHAR、OTHER OTHER lazyLoadTriggerMethods 指定哪个对象的方法触发一次延迟加载 — equals、clone、hashCode、toString defaultScriptingLanguage 指定动态 SQL 生成的默认语言 — org.apache.ibatis .script.ing.xmltags .XMLDynamicLanguageDriver callSettersOnNulls 指定当结果集中值为 null 时，是否调用映射对象的 setter（map 对象时为 put）方法，这对于 Map.kcySet() 依赖或 null 值初始化时是有用的。注意，基本类型（int、boolean 等）不能设置成 null true|false false logPrefix 指定 MyBatis 增加到日志名称的前缀 任何字符串 Not set loglmpl 指定 MyBatis 所用日志的具体实现，未指定时将自动査找 SLF4J|LOG4J|LOG4J2|JDK_LOGGING |COMMONS_LOGGING |ST DOUT_LOGGING|NO_LOGGING Not set proxyFactory 指定 MyBatis 创建具有延迟加栽能力的对象所用到的代理工具 CGLIB|JAVASSIST JAVASSIST （MyBatis 版本为 3.3 及以上的） vfsImpl 指定 VFS 的实现类 提供 VFS 类的全限定名，如果存在多个，可以使用逗号分隔 Not set useActualParamName 允许用方法参数中声明的实际名称引用参数。要使用此功能，项目必须被编译为 Java 8 参数的选择。（从版本 3.4.1 开始可以使用） true|false true 为了不在任何地方都指定类的全限定名，我们可以使用 ==typeAliases== 标签定义一个别名。 Student 类，该类的全限定名称为 net.bianchengbang.po.Student。 123&lt;typeAliases&gt; &lt;typeAlias alias = &quot;Student&quot; type = &quot;net.bianchengbang.po.Student&quot;/&gt;&lt;/typeAliases&gt; 如果需要对同一个包下的多个类定义别名， 123&lt;typeAliases&gt; &lt;package name=&quot;net.biancheng.po&quot;/&gt;&lt;/typeAliases&gt; 这样 MyBatis 将扫描 net.biancheng.po 包里面的类，将其第一个字母变为小写作为其别名，例如 Student 别名为 student，User 别名为 user。 ==typeHandlers== 主要将获取的值合理地转化为 Java 类型。在 typeHandler 中，分为 jdbcType 和 javaType，其中 jdbcType 用于定义数据库类型，而 javaType 用于定义 Java 类型，typeHandler 的作用就是承担 jdbcType 和 javaType 之间的相互转换。 MyBatis 支持自定义处理类型，在自定义处理类型时，需要实现 org.apache.ibatis.type.TypeHandler 接口或继承 org.apache.ibatis.type.BaseTypeHandle 类。详细可参考官网：http://www.mybatis.org/mybatis-3/zh/configuration.html#typeHandlers 在 ==environments== 标签中，可以配置 MyBatis 的多套运行环境，将 SQL 映射到多个不同的数据库上。要有一个默认的default。 environment 标签提供了两个子标签，即 transactionManager 和 dataSource。指定运行环境 ID、事务管理、数据源配置等相关信息。 ==transactionManager标签==，MyBatis 支持两个事务管理器，即 JDBC 和 MANAGED。 如果使用 JDBC 类型的事务管理器，则应用程序服务器负责事务管理操作，例如提交、回滚等。如果使用 MANAGED 类型的事务管理器，则应用程序服务器负责管理连接生命周期。 ==dataSource标签==，dataSource 中的 type 属性用于指定数据源类型，有以下 3 种类型。UNPOOLED，POOLED，JNDI。 123456789&lt;dataSource type=&quot;POOLED&quot;&gt; &lt;!-- MySQL数据库驱动 --&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt; &lt;!-- 连接数据库的URL --&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test?characterEncoding=utf8&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;root&quot; /&gt;&lt;/dataSource&gt; ==mappers 标签==用于指定 MyBatis SQL 映射文件的路径。mapper 中的 resource 属性用于指定 SQL 映射文件的路径（类资源路径） 123&lt;mappers&gt; &lt;mapper resource=&quot;net/biancheng/mapper/Student.xml&quot;/&gt;&lt;/mappers&gt; 07. MyBatis Mapper（映射器）映射器是 MyBatis 中最重要的文件，文件中包含一组 SQL 语句（例如查询、添加、删除、修改），这些语句称为映射语句或映射 SQL 语句。 映射器由 Java 接口和 XML 文件（或注解）共同组成，它的作用如下。 定义参数类型 配置缓存 提供 SQL 语句和动态 SQL 定义查询结果和 POJO 的映射关系 映射器有以下两种实现方式。 通过 XML 文件方式实现，比如我们在 mybatis-config.xml 文件中描述的 XML 文件，用来生成 mapper。 通过注解的方式实现，使用 Configuration 对象注册 Mapper 接口。 映射器是java方法接口和对应的SQL语句（xml或注解）组成。 XML实现映射器 先定义接口 WebsiteMapper 123public interface WebsiteMapper &#123; public List&lt;Website&gt; selectAllWebsite();&#125; WebsiteMapper.xml 代码如下。 1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapperPUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;net.biancheng.mapper.WebsiteMapper&quot;&gt; &lt;!-- 查询所有网站信息 --&gt; &lt;select id=&quot;selectAllWebsite&quot; resultType=&quot;net.biancheng.po.Website&quot;&gt; select * from website &lt;/select&gt;&lt;/mapper&gt; 下面对上述 XML 文件进行讲解。 namespace 用来定义命名空间，该命名空间和定义接口的全限定名一致。 &lt; select &gt; 元素表明这是一条查询语句，属性 id 用来标识这条 SQL。resultType 表示返回的是一个 Website 类型的值。 MyBatis 配置文件，注册映射器addMapper。下面语句用来引入 XML 文件，MyBatis 会读取 WebsiteMapper.xml 文件，生成映射器。 1&lt;mapper resource=&quot;net/biancheng/mapper/WebsiteMapper.xml&quot; /&gt; 测试，用 SqlSession 来获取 Mapper 1234567891011121314public class Test &#123; public static void main(String[] args) throws IOException &#123; InputStream config = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;); SqlSessionFactory ssf = new SqlSessionFactoryBuilder().build(config); SqlSession ss = ssf.openSession(); WebsiteMapper websiteMapper = ss.getMapper(WebsiteMapper.class); List&lt;Website&gt; websitelist = websiteMapper.selectAllWebsite(); for (Website site : websitelist) &#123; System.out.println(site); &#125; ss.commit(); ss.close(); &#125;&#125; 注解实现映射器 如果使用注解和 XML 文件两种方式同时定义，那么 XML 方式将覆盖掉注解方式。 1234public interface WebsiteMapper2 &#123; @Select(value = &quot;select * from website&quot;) public List&lt;Website&gt; selectAllWebsite();&#125; 这个接口可以在 XML 中定义，将在 mybatis-config.xml 中配置 XML 的语句修改为以下语句即可。 1&lt;mapper resource=&quot;com/mybatis/mapper/WebsiteMapper2&quot; /&gt; 也可以使用 configuration 对象注册这个接口，比如： 1configuration.addMapper(WebsiteMapper2.class); MyBatis 映射器的主要元素 元素名称 描述 备注 mapper 映射文件的根节点，只有 namescape 一个属性 namescape 作用如下：用于区分不同的 mapper，全局唯一绑定DAO接口，即面向接口编程。当 namescape 绑定某一接口后，可以不用写该接口的实现类，MyBatis 会通过接口的完整限定名查找到对应的 mapper 配置来执行 SQL 语句。因此 namescape 的命名必须要跟接口同名。 select 查询语句，最常用、最复杂的元素之一 可以自定义参数，返回结果集等 insert 插入语句 执行后返回一个整数，代表插入的条数 update 更新语句 执行后返回一个整数，代表更新的条数 delete 删除语句 执行后返回一个整数，代表删除的条数 parameterMap 定义参数映射关系 即将被删除的元素，不建议使用 sql 允许定义一部分的 SQL，然后在各个地方引用它 例如，一张表列名，我们可以一次定义，在多个 SQL 语句中使用 resultMap 用来描述数据库结果集与对象的对应关系，它是最复杂、最强大的元素 提供映射规则 cache 配置给定命名空间的缓存 - cache-ref 其它命名空间缓存配置的引用 - 关于 MyBatis 的 SQL 映射文件中的 mapper 元素的 namescape 属性有如下要求。 namescape 的命名必须跟某个 DAO 接口同名，同属于 DAO 层，因此代码结构上，映射文件与该接口应放置在同一 package 下（如 net.biancheng.dao.website），并且习惯上是以 Mapper 结尾（如 WebsiteMapper.java、WebsiteMapper.xml）。 不同的 mapper 文件中子元素的 id 可以相同，MyBatis 通过 namescape 和子元素的 id 联合区分。接口中的方法与映射文件中的 SQL 语句 id 应一 一对应。 08. MyBatis执行SQL的两种方式 MyBatis 有两种执行 SQL 语句的方式，如下： 通过 SqlSession 发送 SQL 通过 SqlSession 获取 Mapper 接口，通过 Mapper 接口发送 SQL SqlSession发送SQL 有映射器之后就可以通过 SqlSession 发送 SQL 了 123456// 参数1是mapper文件加方法id，参数2是传递的参数（查询条件）Website website = (Website)sqlSession.selectOne(&quot;net.biancheng.mapper.WebsiteMapper.getWebsite&quot;,1);// 如果 MyBatis 中只有一个 id 为 getWbsite 的 SQL，那么也可以简写为：// 这是 MyBatis 前身 iBatis 所留下的方式。Website website = (Website )sqlSession.selectOne(&quot;getWbsite&quot;,1); selectOne 方法表示使用查询并且只返回一个对象，必须指定查询条件。只能查询 0 或 1 条记录，大于 1 条记录则运行错误。常用格式如下（也有其它重载方法，根据需要选择）。 1sqlSession.selectOne(String arg0, Object arg1) selectList 方法表示使用查询并且返回一个列表。可以查询 0 或 N 条记录。常用格式如下。 123sqlSession.selectList(String arg0);// 指定参数sqlSession.selectList(String arg0, Object arg1) Mapper接口发送 SQL SqlSession 还可以获取 Mapper 接口，通过 Mapper 接口发送 SQL 1234// 获取mapper接口WebsiteMapper websiteMapper = sqlSession.getMapper(WebsiteMapper.class);// 通过mapper接口执行SQLWebsite website = websiteMapper.getWebsite(1); 通过 SqlSession 的 getMapper 方法获取一个 Mapper 接口，然后就可以调用它的方法了。因为 XML 文件或者接口注解定义的 SQL 都可以通过“类的全限定名+方法名”查找，所以 MyBatis 会启用对应的 SQL 运行，并返回结果。 建议采用 Mapper 接口发送 SQL 的方式 09. MyBatis select标签123&lt;select id=&quot;selectAllWebsite&quot; resultType=&quot;net.biancheng.po.Website&quot; parameterType=&quot;string&quot;&gt; SELECT id,NAME,url FROM website WHERE NAME LIKE CONCAT (&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)&lt;/select&gt; 执行 SQL 语句时可以定义参数，参数可以是一个简单的参数类型，例如 int、float、String；也可以是一个复杂的参数类型，例如 JavaBean、Map 等。MyBatis 提供了强大的映射规则，执行 SQL 后，MyBatis 会将结果集自动映射到 JavaBean 中。 参数的传递使用#&#123;参数名&#125;，相当于告诉 MyBatis 生成 PreparedStatement 参数。对于 JDBC，该参数会被标识为“?”。以上 SQL 语句可以使用 JDBC 实现，实现代码如下。 123String sql = &quot;SELECT id,NAME,url FROM website WHERE NAME LIKE CONCAT (&#x27;%&#x27;,?,&#x27;%&#x27;)&quot;;PreparedStatement ps = conn.prepareStatement(sql);ps.setString(1,userName); 属性名称 描 述 备注 id 它和 Mapper 的命名空间组合起来使用，是唯一标识符，供 MyBatis 调用 如果命名空间+id不唯一，那么 MyBatis 抛出异常 parameterType 表示传入 SQL 语句传入参数类型的全限定名或别名。它是一个可选属性，MyBatis 能推断出具体传入语句的参数 支持基本数据类型和 JavaBean、Map 等复杂数据类型 resultType SQL 语句执行后返回的类型（全限定名或者别名）。如果是集合类型，返回的是集合元素的类型，返回时可以使用 resultType 或 resultMap 之一 - resultMap 它是映射集的引用，与 元素一起使用，返回时可以使用 resultType 或 resultMap 之一 是 MyBatis 最复杂的元素，可以配置映射规则、级联、typeHandler 等 flushCache 用于设置在调用 SQL 语句后是否要求 MyBatis 清空之前查询的本地缓存和二级缓存 默认值为 false，如果设置为 true，则任何时候只要 SQL 语句被调用都将清空本地缓存和二级缓存 useCache 启动二级缓存的开关，默认值为 true，表示将査询结果存入二级缓存中 - timeout 用于设置超时参数，单位是秒（s），超时将抛出异常 - fetchSize 获取记录的总条数设定 默认值是数据库厂商提供的 JDBC 驱动所设置的条数 statementType 告诉 MyBatis 使用哪个 JDBC 的 Statement 工作，取值为 STATEMENT（Statement）、 PREPARED（PreparedStatement）、CALLABLE（CallableStatement） - resultSetType 这是针对 JDBC 的 ResultSet 接口而言，其值可设置为 FORWARD_ONLY（只允许向前访问）、SCROLL_SENSITIVE（双向滚动，但不及时更新）、SCROLLJNSENSITIVE（双向滚动，及时更新） - 现在需要根据 id 和 name 来模糊查询网站信息，显然这涉及到了两个参数。给映射器传递多个参数分为以下三种方法。 使用Map传递参数 123456&lt;!-- 根据name和url模糊查询网站信息 --&gt;&lt;select id=&quot;selectWebsiteByMap&quot; resultType=&quot;net.biancheng.po.Website&quot; parameterType=&quot;map&quot;&gt; SELECT id,NAME,url FROM website WHERE name LIKE CONCAT (&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) AND url LIKE CONCAT (&#x27;%&#x27;,#&#123;url&#125;,&#x27;%&#x27;)&lt;/select&gt; 1public List&lt;Website&gt; selectWebsiteByMap(Map&lt;String, String&gt; params); 使用注解@Param() 传递参数 123456&lt;!-- 根据name和url模糊查询网站信息 --&gt;&lt;select id=&quot;selectWebsiteByAn&quot; resultType=&quot;net.biancheng.po.Website&quot;&gt; SELECT id,NAME,url FROM website WHERE name LIKE CONCAT (&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) AND url LIKE CONCAT (&#x27;%&#x27;,#&#123;url&#125;,&#x27;%&#x27;)&lt;/select&gt; 1public List&lt;Website&gt; selectWebsiteByAn(@Param(&quot;name&quot;) String name, @Param(&quot;url&quot;) String url); 使用JavaBean传递参数 123456&lt;!-- 根据name和url模糊查询网站信息 --&gt;&lt;select id=&quot;selectWebsiteByAn&quot; resultType=&quot;net.biancheng.po.Website&quot;&gt; SELECT id,NAME,url FROM website WHERE name LIKE CONCAT (&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) AND url LIKE CONCAT (&#x27;%&#x27;,#&#123;url&#125;,&#x27;%&#x27;)&lt;/select&gt; 1public List&lt;Website&gt; selectWebsiteByAn(Website website); 使用 Map 传递参数会导致业务可读性的丧失，继而导致后续扩展和维护的困难，所以在实际应用中我们应该果断废弃该方式。 使用 @Param 注解传递参数会受到参数个数的影响。当 n≤5 时，它是最佳的传参方式，因为它更加直观；当 n&gt;5 时，多个参数将给调用带来困难。 当参数个数大于 5 个时，建议使用 JavaBean 方式。 10. MyBatis insert标签12345&lt;!-- 增加网站信息 --&gt;&lt;insert id=&quot;addWebsite&quot; parameterType=&quot;string&quot;&gt; insert into website(name) values(#&#123;name&#125;)&lt;/insert&gt; 1public int addWebsite(String name); // 返回其影响数据库的行数，类型int。 属性名称 描述 备注 id 它和 Mapper 的命名空间组合起来使用，是唯一标识符，供 MyBatis 调用 如果命名空间+ id 不唯一，那么 MyBatis 抛出异常 parameterType 传入 SQL 语句的参数类型的全限定名或别名，它是一个可选属性。 支持基本数据类型和 JavaBean、Map 等复杂数据类型 keyProperty 该属性的作用是将插入操作的返回值赋给 PO 类的某个属性，通常为主键对应的属性。如果是联合主键，可以将多个值用逗号隔开。 - useGeneratedKe 该属性用来设置，是否使用 JDBC 提供的 getGenereatedKeys() 方法，获取数据库内部产生的主键并赋值到 keyProperty 属性设置的请求对象的属性中，例如 MySQL、SQL Server 等自动递增的字段，其默认值为 false。 该属性值设置为 true 后，会将数据库生成的主键回填到请求对象中，以供其他业务使用。 flushCache 该属性用于设置执行该操作后，是否会清空二级缓存和本地缓存，默认值为 true。 - timeout 该属性用于设置执行该操作的最大时限，如果超时，就抛异常。 - databaseId 取值范围 oracle、mysql 等，表示数据库厂家；元素内部可通过 来为特定数据库指定不同的 sql 语句。 MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。 MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库 databaseId 属性的所有语句。 如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃。 keyColumn 该属性用于设置第几列是主键，当主键列不是表中的第 1 列时，就需要设置该属性。如果是联合主键，可以将多个值用逗号隔开。 - Mybatis 为我们提供以下 3 种方式，来实现给映射器传递多个参数： Map、@param注解、JavaBean 具体见上一小节 主键（自动递增）回填 我们知道，MySQL、SQL Server 等数据库表可以采用自动递增的字段作为其主键，当向这样的数据库表插入数据时，即使不指定自增主键的值，数据库也会根据自增规则自动生成主键并插入到表中。 获取这个新产生的主键。 我们就可以通过在 insert 标签中添加 keyProperty 和 useGeneratedKeys 属性，来实现该功能。 1234&lt;!--添加一个网站信息，成功后将主键值返回填给id(po的属性)--&gt;&lt;insert id=&quot;addWebsite&quot; parameterType=&quot;net.biancheng.po.Website&quot; keyProperty=&quot;id&quot; useGeneratedKeys=&quot;true&quot;&gt; insert into Website (name,url) values(#&#123;name&#125;,#&#123;url&#125;)&lt;/insert&gt; 自定义主键 如果在实际项目中，若数据库不支持主键自动递增（例如 Oracle），或者取消了主键自动递增的规则，我们可以使用 MyBatis 的 标签自定义生成主键，具体配置代码如下。 12345678&lt;!-- 添加一个网站，#&#123;name&#125;为 net.biancheng.po.Website 的属性值 --&gt;&lt;insert id=&quot;insertWebsite&quot; parameterType=&quot;net.biancheng.po.Website&quot;&gt; &lt;!-- 先使用selectKey标签定义主键，然后再定义SQL语句 --&gt; &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;Integer&quot; order=&quot;BEFORE&quot;&gt; select if(max(id) is null,1,max(id)+1) as newId from Website &lt;/selectKey&gt; insert into Website (id,name,url) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;url&#125;)&lt;/insert&gt; 标签中属性说明如下： keyProperty：用于指定主键值对应的 PO 类的属性。 order：该属性取值可以为 BEFORE 或 AFTER。BEFORE 表示先执行 标签内的语句，再执行插入语句；AFTER 表示先执行插入语句再执行 标签内的语句。 11. MyBatis update标签1234&lt;!--update 标签--&gt;&lt;update id=&quot;updateWebsite&quot; parameterType=&quot;string&quot;&gt; update website set name = #&#123;name&#125;&lt;/update&gt; 1int updateWebsite(String name); // 返回值为 int 类型，表示执行 sql 语句后受影响的记录的行数。 属性名称 描述 备注 id 它和 Mapper 的命名空间组合起来使用，是唯一标识符，供 MyBatis 调用 如果命名空间+ id 不唯一，那么 MyBatis 抛出异常 parameterType 传入 SQL 语句的参数类型的全限定名或别名，它是一个可选属性。 支持基本数据类型和 JavaBean、Map 等复杂数据类型 flushCache 该属性用于设置执行该操作后，是否会清空二级缓存和本地缓存，默认值为 true。 - timeout 该属性用于设置 SQL 执行的超时时间，如果超时，就抛异常。 - statementType 执行 SQL 时使用的 statement 类型, 默认为 PREPARED，可选值：STATEMENT，PREPARED 和 CALLABLE。 - 传递多个参数：Map、@param注解、javabean 12. MyBatis delete标签123&lt;delete id=&quot;deleteWebsite&quot; parameterType=&quot;string&quot;&gt; delete from website where name = #&#123;name&#125;&lt;/delete&gt; 1int deleteWebsite(String name); // 影响行数 属性名称 描述 备注 id 它和 Mapper 的命名空间组合起来使用，是唯一标识符，供 MyBatis 调用 如果命名空间+ id 不唯一，那么 MyBatis 抛出异常 parameterType 传入 SQL 语句的参数类型的全限定名或别名，它是一个可选属性。 支持基本数据类型和 JavaBean、Map 等复杂数据类型 flushCache 该属性用于设置执行该操作后，是否会清空二级缓存和本地缓存，默认值为 true。 - timeout 该属性用于设置 SQL 执行的超时时间，如果超时，就抛异常。 - statementType 执行 SQL 时使用的 statement 类型, 默认为 PREPARED，可选值：STATEMENT，PREPARED 和 CALLABLE。 - 传递多个参数：Map、@param注解、javabean 13. MyBatis resultMap元素 resultMap 是 MyBatis 中最复杂的元素，主要用于解决==实体类属性名与数据库表中字段名不一致==的情况，可以将==查询结果映射成实体对象==。 12345678910111213&lt;resultMap id=&quot;&quot; type=&quot;&quot;&gt; &lt;constructor&gt;&lt;!-- 类再实例化时用来注入结果到构造方法 --&gt; &lt;idArg/&gt;&lt;!-- ID参数，结果为ID --&gt; &lt;arg/&gt;&lt;!-- 注入到构造方法的一个普通结果 --&gt; &lt;/constructor&gt; &lt;id/&gt;&lt;!-- 用于表示哪个列是主键 --&gt; &lt;result/&gt;&lt;!-- 注入到字段或JavaBean属性的普通结果 --&gt; &lt;association property=&quot;&quot;/&gt;&lt;!-- 用于一对一关联 --&gt; &lt;collection property=&quot;&quot;/&gt;&lt;!-- 用于一对多、多对多关联 --&gt; &lt;discriminator javaType=&quot;&quot;&gt;&lt;!-- 使用结果值来决定使用哪个结果映射 --&gt; &lt;case value=&quot;&quot;/&gt;&lt;!-- 基于某些值的结果映射 --&gt; &lt;/discriminator&gt;&lt;/resultMap&gt; 元素的 type 属性表示需要的 POJO，id 属性是 resultMap 的唯一标识。 子元素 用于配置构造方法。当一个 POJO 没有无参数构造方法时使用。 子元素 用于表示哪个列是主键。允许多个主键，多个主键称为联合主键。 子元素 用于表示 POJO 和 SQL 列名的映射关系。 子元素 、 和 用在级联的情况下。关于级联的问题比较复杂，在《MyBatis一对一关联查询》和《MyBatis一对多关联查询》一节详细讲解。 id 和 result 元素都有以下属性。 元素 说明 property 映射到列结果的字段或属性。如果 POJO 的属性和 SQL 列名（column元素）是相同的，那么 MyBatis 就会映射到 POJO 上 column 对应 SQL 列 javaType 配置 Java 类型。可以是特定的类完全限定名或 MyBatis 上下文的别名 jdbcType 配置数据库类型。这是 JDBC 类型，MyBatis 已经为我们做了限定，基本支持所有常用数据库类型 typeHandler 类型处理器。允许你用特定的处理器来覆盖 MyBatis 默认的处理器。需要指定 jdbcType 和 javaType 相互转化的规则 一条 SQL 查询语句执行后会返回结果集，结果集有两种存储方式，即使用 Map 存储和使用 POJO 存储。 使用Map存储结果集 12345&lt;!-- 任何 select 语句都可以使用 Map 存储 --&gt;&lt;!-- 查询所有网站信息存到Map中 --&gt;&lt;select id=&quot;selectAllWebsite&quot; resultType=&quot;map&quot;&gt; select * from website&lt;/select&gt; 12public List&lt;Map&lt;String,Object&gt;&gt; selectAllWebsite();// 使用 Map 存储结果集很方便，但可读性稍差，所以一般推荐使用 POJO 的方式。 使用POJO存储结果集 123456789101112&lt;!--使用自定义结果集类型 --&gt;&lt;resultMap type=&quot;net.biancheng.po.Website&quot; id=&quot;myResult&quot;&gt; &lt;!-- property 是 net.biancheng.po.Website 类中的属性 --&gt; &lt;!-- column是查询结果的列名，可以来自不同的表 --&gt; &lt;!-- 其他字段属性同名自动注入 --&gt; &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt; &lt;result property=&quot;uname&quot; column=&quot;name&quot; /&gt;&lt;/resultMap&gt;&lt;select id=&quot;selectAllWebsite&quot; resultMap=&quot;myResult&quot;&gt; select id,name,url from website&lt;/select&gt; resultType和resultMap的区别 MyBatis 的每一个查询映射的返回类型都是 resultMap，只是当我们提供的返回类型是 resultType 时，MyBatis 会自动把对应的值赋给 resultType 所指定对象的属性，而当我们提供的返回类型是 resultMap 时，MyBatis 会将数据库中的列数据复制到对象的相应属性上，可用于复制查询。 需要注意的是，resultMap 和 resultType 不能同时使用。 14. MyBatis注解（3种类型）本节略，详情见：MyBatis注解（3种类型） (biancheng.net) 注解主要分为三大类，即 SQL 语句映射、结果集映射和关系映射。 1. SQL 语句映射 15. MyBatis关联（级联）查询级联关系是一个==数据库实体==的概念，有 3 种级联关系，分别是一对一级联、一对多级联以及多对多级联。 栗子：学生，课程，学生_课程_成绩 实际应用中，由于多对多的关系比较复杂，会增加理解和关联的复杂度，所以应用较少。推荐的方法是，用一对多的关系把它分解为双向关系，以降低关系的复杂度，简化程序。 级联的优点是获取关联数据十分便捷。但是级联过多会增加系统的复杂度，同时降低系统的性能，此增彼减。所以记录超过 3 层时，就不要考虑使用级联了，因为这样会造成多个对象的关联，导致系统的耦合、负载和难以维护。 16. MyBatis一对一关联查询（）一个大学生只有一个学号，一个学号只属于一个学生 通过 元素的子元素 处理一对一级联关系。 123&lt;association property=&quot;studentCard&quot; column=&quot;cardId&quot; javaType=&quot;net.biancheng.po.StudentCard&quot; select=&quot;net.biancheng.mapper.StudentCardMapper.selectStuCardById&quot; /&gt; xml属性： property：指定映射到实体类的对象属性。 column：指定表中对应的字段（即查询返回的列名）。 javaType：指定映射到实体对象属性的类型。 select：指定引入嵌套查询的子 SQL 语句，该属性用于关联映射中的嵌套查询。 一对一关联查询可采用以下两种方式： 单步查询，通过关联查询实现 分步查询，通过两次或多次查询，为一对一关系的实体 Bean 赋值 单步查询 1234567891011121314151617&lt;resultMap type=&quot;net.biancheng.po.Student&quot; id=&quot;cardAndStu2&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt; &lt;result property=&quot;name&quot; column=&quot;name&quot; /&gt; &lt;result property=&quot;sex&quot; column=&quot;sex&quot; /&gt; &lt;!-- 一对一级联查询 --&gt; &lt;association property=&quot;studentCard&quot; javaType=&quot;net.biancheng.po.StudentCard&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt; &lt;result property=&quot;studentId&quot; column=&quot;studentId&quot; /&gt; &lt;/association&gt;&lt;/resultMap&gt;&lt;select id=&quot;selectStuById2&quot; parameterType=&quot;Integer&quot; resultMap=&quot;cardAndStu2&quot;&gt; SELECT s.*,sc.studentId FROM student s,studentCard sc WHERE s.cardId = sc.id AND s.id=#&#123;id&#125;&lt;/select&gt; 分步查询，到注入card的时候再次查询 123456&lt;mapper namespace=&quot;net.biancheng.mapper.StudentCardMapper&quot;&gt; &lt;select id=&quot;selectStuCardById&quot; resultType=&quot;net.biancheng.po.StudentCard&quot;&gt; SELECT * FROM studentCard WHERE id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; 123public interface StudentCardMapper &#123; public StudentCard selectStuCardById(int id);&#125; 12345678910111213141516&lt;mapper namespace=&quot;net.biancheng.mapper.StudentMapper&quot;&gt; &lt;!-- 一对一根据id查询学生信息：级联查询的第一种方法（嵌套查询，执行两个SQL语句） --&gt; &lt;resultMap type=&quot;net.biancheng.po.Student&quot; id=&quot;cardAndStu1&quot;&gt; &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt; &lt;result property=&quot;name&quot; column=&quot;name&quot; /&gt; &lt;result property=&quot;sex&quot; column=&quot;sex&quot; /&gt; &lt;!-- 一对一级联查询 --&gt; &lt;association property=&quot;studentCard&quot; column=&quot;cardId&quot; javaType=&quot;net.biancheng.po.StudentCard&quot; select=&quot;net.biancheng.mapper.StudentCardMapper.selectStuCardById&quot; /&gt; &lt;/resultMap&gt; &lt;select id=&quot;selectStuById1&quot; parameterType=&quot;Integer&quot; resultMap=&quot;cardAndStu1&quot;&gt; select * from student where id=#&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt; 123public interface StudentMapper &#123; public Student selectStuById1(int id);&#125; 17. MyBatis一对多关联查询在 MyBatis 中，通过 元素的子元素 处理一对多级联关系，collection 可以将关联查询的多条记录映射到一个 list 集合属性中。 123&lt;collection property=&quot;orderList&quot; ofType=&quot;net.biancheng.po.Order&quot; column=&quot;id&quot; select=&quot;net.biancheng.mapper.OrderMapper.selectOrderById&quot; /&gt; 一对多关联查询可采用以下两种方式： 分步查询，通过两次或多次查询，为一对多关系的实体 Bean 赋值 单步查询，通过关联查询实现 18. MyBatis多对多关联查询MyBatis 没有实现多对多级联，推荐通过两个一对多级联替换多对多级联，以降低关系的复杂度，简化程序。 19. MyBatis动态SQL根据场景动态的构建查询SQL 元素 作用 备注 if 判断语句 单条件分支判断 choose（when、otherwise） 相当于 Java 中的 switch case 语句 多条件分支判断 trim、where 辅助元素 用于处理一些SQL拼装问题 foreach 循环语句 在in语句等列举条件常用 bind 辅助元素 拼接参数 20. MyBatis if标签：条件判断12345678910&lt;if test=&quot;判断条件&quot;&gt; SQL语句&lt;/if&gt;&lt;select id=&quot;selectAllWebsite&quot; resultMap=&quot;myResult&quot;&gt; select id,name,url from website &lt;if test=&quot;name != null&quot;&gt; where name like #&#123;name&#125; &lt;/if&gt;&lt;/select&gt; 123456789&lt;select id=&quot;selectAllWebsite&quot; resultMap=&quot;myResult&quot;&gt; select id,name,url from website where 1=1 &lt;if test=&quot;name != null&quot;&gt; AND name like #&#123;name&#125; &lt;/if&gt; &lt;if test=&quot;url!= null&quot;&gt; AND url like #&#123;url&#125; &lt;/if&gt;&lt;/select&gt; 21. MyBatis choose、when和otherwise标签MyBatis 中动态语句 choose-when-otherwise 类似于 Java 中的 switch-case-default 语句。由于 MyBatis 并没有为 if 提供对应的 else 标签，如果想要达到…… 的效果，可以借助 、、 来实现。 123456789101112131415&lt;choose&gt; &lt;when test=&quot;判断条件1&quot;&gt; SQL语句1 &lt;/when &gt; &lt;when test=&quot;判断条件2&quot;&gt; SQL语句2 &lt;/when &gt; &lt;when test=&quot;判断条件3&quot;&gt; SQL语句3 &lt;/when &gt; &lt;otherwise&gt; SQL语句4 &lt;/otherwise&gt;&lt;/choose&gt; 12345678910111213141516171819&lt;mapper namespace=&quot;net.biancheng.mapper.WebsiteMapper&quot;&gt; &lt;select id=&quot;selectWebsite&quot; parameterType=&quot;net.biancheng.po.Website&quot; resultType=&quot;net.biancheng.po.Website&quot;&gt; SELECT id,name,url,age,country FROM website WHERE 1=1 &lt;choose&gt; &lt;when test=&quot;name != null and name !=&#x27;&#x27;&quot;&gt; AND name LIKE CONCAT(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) &lt;/when&gt; &lt;when test=&quot;url != null and url !=&#x27;&#x27;&quot;&gt; AND url LIKE CONCAT(&#x27;%&#x27;,#&#123;url&#125;,&#x27;%&#x27;) &lt;/when&gt; &lt;otherwise&gt; AND age is not null &lt;/otherwise&gt; &lt;/choose&gt; &lt;/select&gt;&lt;/mapper&gt; 22. MyBatis where标签前两节 SQL 语句中加入了一个条件“1=1”，如果没有加入这个条件，那么可能就会变成下面这样一条错误的语句。 1SELECT id,name,url,age,country FROM website AND name LIKE CONCAT(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) 显然以上语句会出现 SQL 语法异常，但加入“1=1”这样的条件又非常奇怪，所以 MyBatis 提供了 where 标签。 where 标签主要用来简化 SQL 语句中的条件判断，可以自动处理 AND/OR 条件，语法如下。 12345&lt;where&gt; &lt;if test=&quot;判断条件&quot;&gt; AND/OR ... &lt;/if&gt;&lt;/where&gt; if 语句中判断条件为 true 时，where 关键字才会加入到组装的 SQL 里面，否则就不加入。==where 会检索语句，它会将 where 后的第一个 SQL 条件语句的 AND 或者 OR 关键词去掉。== 1234567891011&lt;select id=&quot;selectWebsite&quot; resultType=&quot;net.biancheng.po.Website&quot;&gt; select id,name,url from website &lt;where&gt; &lt;if test=&quot;name != null&quot;&gt; AND name like #&#123;name&#125; &lt;/if&gt; &lt;if test=&quot;url!= null&quot;&gt; AND url like #&#123;url&#125; &lt;/if&gt; &lt;/where&gt;&lt;/select&gt; 23. MyBatis set标签在 Mybatis 中，update 语句可以使用 set 标签动态更新列。set 标签可以为 SQL 语句动态的添加 set 关键字，剔除追加到条件末尾多余的逗号。 123456789101112131415161718192021222324&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapperPUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;net.biancheng.mapper.WebsiteMapper&quot;&gt; &lt;select id=&quot;selectWebsite&quot; resultType=&quot;net.biancheng.po.Website&quot;&gt; SELECT * FROM website &lt;where&gt; &lt;if test=&quot;id!=null and id!=&#x27;&#x27;&quot;&gt; id=#&#123;id&#125; &lt;/if&gt; &lt;/where&gt; &lt;/select&gt; &lt;!--使用set元素动态修改一个网站记录，相当于关键字set --&gt; &lt;update id=&quot;updateWebsite&quot; parameterType=&quot;net.biancheng.po.Website&quot;&gt; UPDATE website &lt;set&gt; &lt;if test=&quot;name!=null&quot;&gt;name=#&#123;name&#125;&lt;/if&gt; &lt;if test=&quot;url!=null&quot;&gt;url=#&#123;url&#125;&lt;/if&gt; &lt;/set&gt; WHERE id=#&#123;id&#125; &lt;/update&gt;&lt;/mapper&gt; 24. MyBatis foreach标签对于一些 SQL 语句中含有 in 条件，需要迭代条件集合来生成的情况，可以使用 foreach 来实现 SQL 条件的迭代。 Mybatis foreach 标签用于循环语句，它很好的支持了数据和 List、set 接口的集合，并对此提供遍历的功能。语法格式如下。 123&lt;foreach item=&quot;item&quot; index=&quot;index&quot; collection=&quot;list|array|map key&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt; 参数值&lt;/foreach&gt; foreach 标签主要有以下属性，说明如下。 item：表示集合中每一个元素进行迭代时的别名。 index：指定一个名字，用来表示在迭代过程中每次迭代到的位置。 open：表示该语句以什么开始（既然是 in 条件语句，所以必然以(开始）。 separator：表示在每次进行迭代之间以什么符号作为分隔符（既然是 in 条件语句，所以必然以,作为分隔符）。 close：表示该语句以什么结束（既然是 in 条件语句，所以必然以)开始）。 12345678910&lt;select id=&quot;selectWebsite&quot; parameterType=&quot;net.biancheng.po.Website&quot; resultType=&quot;net.biancheng.po.Website&quot;&gt; SELECT id,name,url,age,country FROM website WHERE age in &lt;foreach item=&quot;age&quot; index=&quot;index&quot; collection=&quot;list&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt; #&#123;age&#125; &lt;/foreach&gt;&lt;/select&gt; 25. MyBatis bind标签每个数据库的拼接函数或连接符号都不同，例如 MySQL 的 concat 函数、Oracle 的连接符号“||”等。这样 SQL 映射文件就需要根据不同的数据库提供不同的实现，显然比较麻烦，且不利于代码的移植。幸运的是，MyBatis 提供了 bind 标签来解决这一问题。 123456&lt;select id=&quot;selectWebsite&quot; resultType=&quot;net.biancheng.po.Website&quot;&gt; &lt;bind name=&quot;pattern&quot; value=&quot;&#x27;%&#x27;+_parameter+&#x27;%&#x27;&quot; /&gt; SELECT id,name,url,age,country FROM website WHERE name like #&#123;pattern&#125;&lt;/select&gt; bind 元素属性如下。 value：对应传入实体类的某个字段，可以进行字符串拼接等特殊处理。 name：给对应参数取的别名。 以上代码中的“_parameter”代表传递进来的参数，它和通配符连接后，赋给了 pattern，然后就可以在 select 语句中使用这个变量进行模糊查询，不管是 MySQL 数据库还是 Oracle 数据库都可以使用这样的语句，提高了可移植性。 12345678&lt;select id=&quot;selectWebsite&quot; resultType=&quot;net.biancheng.po.Website&quot;&gt; &lt;bind name=&quot;pattern_name&quot; value=&quot;&#x27;%&#x27;+name+&#x27;%&#x27;&quot; /&gt; &lt;bind name=&quot;pattern_url&quot; value=&quot;&#x27;%&#x27;+url+&#x27;%&#x27;&quot; /&gt; SELECT id,name,url,age,country FROM website WHERE name like #&#123;pattern_name&#125; AND url like #&#123;pattern_url&#125;&lt;/select&gt; 26. MyBatis trim标签trim 一般用于去除 SQL 语句中多余的 AND 关键字、逗号，或者给 SQL 语句前拼接 where、set 等后缀，可用于选择性插入、更新、删除或者条件查询等操作。trim 语法格式如下。 123&lt;trim prefix=&quot;前缀&quot; suffix=&quot;后缀&quot; prefixOverrides=&quot;忽略前缀字符&quot; suffixOverrides=&quot;忽略后缀字符&quot;&gt; SQL语句&lt;/trim&gt; 属性 描述 prefix 给SQL语句拼接的前缀，为 trim 包含的内容加上前缀 suffix 给SQL语句拼接的后缀，为 trim 包含的内容加上后缀 prefixOverrides 去除 SQL 语句前面的关键字或字符，该关键字或者字符由 prefixOverrides 属性指定。 suffixOverrides 去除 SQL 语句后面的关键字或者字符，该关键字或者字符由 suffixOverrides 属性指定。 123456789101112&lt;select id=&quot;selectWebsite&quot; resultType=&quot;net.biancheng.po.Website&quot;&gt; SELECT id,name,url,age,country FROM website &lt;trim prefix=&quot;where&quot; prefixOverrides=&quot;and&quot;&gt; &lt;if test=&quot;name != null and name !=&#x27;&#x27;&quot;&gt; AND name LIKE CONCAT (&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) &lt;/if&gt; &lt;if test=&quot;url!= null&quot;&gt; AND url like concat (&#x27;%&#x27;,#&#123;url&#125;,&#x27;%&#x27;) &lt;/if&gt; &lt;/trim&gt;&lt;/select&gt; 27. MyBatis分页功能MyBatis 的分页功能是基于内存的分页，即先查询出所有记录，再按起始位置和页面容量取出结果。 12public List&lt;Website&gt; selectWebsite(@Param(&quot;site&quot;) Website site, @Param(&quot;from&quot;) Integer currentPageNo, @Param(&quot;pageSize&quot;) Integer pageSize); 12345678910111213&lt;select id=&quot;selectWebsite&quot; resultType=&quot;net.biancheng.po.Website&quot;&gt; SELECT id,name,url,age,country FROM website &lt;trim prefix=&quot;where&quot; prefixOverrides=&quot;and&quot;&gt; &lt;if test=&quot;site.name != null and site.name !=&#x27;&#x27;&quot;&gt; AND name LIKE CONCAT (&#x27;%&#x27;,#&#123;site.name&#125;,&#x27;%&#x27;) &lt;/if&gt; &lt;if test=&quot;site.url!= null and site.url !=&#x27;&#x27;&quot;&gt; AND url LIKE CONCAT (&#x27;%&#x27;,#&#123;site.url&#125;,&#x27;%&#x27;) &lt;/if&gt; ORDER BY id limit #&#123;from&#125;,#&#123;pageSize&#125; &lt;/trim&gt;&lt;/select&gt; 分页的方法中第一个参数为 limit 的起始位置（下标从 0 开始），而不是用户输入的真正页码（页码从1开始）。页码如何转换为 limit 的起始位置下标，即：起始位置下标=（页码-1）*页面容量，那么这个转换操作必然不能在 DAO 层实现，需要在业务层实现。所以我们在测试类中传入的参数为下标，而不是页码。 28. MyBatis缓存（一级缓存和二级缓存）缓存可以将数据保存在内存中，是互联网系统常常用到的。目前流行的缓存服务器有 MongoDB、Redis、Ehcache 等。缓存是在计算机内存上保存的数据，读取时无需再从磁盘读入，因此具备快速读取和使用的特点。 和大多数持久化框架一样，MyBatis 提供了一级缓存和二级缓存的支持。默认情况下，MyBatis 只开启一级缓存。 一级缓存 由于 SqlSession 是相互隔离的，所以如果你使用不同的 SqlSession 对象，即使调用相同的 Mapper、参数和方法，MyBatis 还是会再次发送 SQL 到数据库执行，返回结果。 我们需要配置二级缓存，使得缓存在 SqlSessionFactory 层面上能够提供给各个 SqlSession 对象共享。 二级缓存 二级缓存是全局缓存，作用域超出 session 范围之外，可以被所有 SqlSession 共享。 一级缓存缓存的是 SQL 语句，二级缓存缓存的是结果对象。 二级缓存的配置： 1）MyBatis 的全局缓存配置需要在 mybatis-config.xml 的 settings 元素中设置，代码如下。 123&lt;settings&gt; &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot; /&gt;&lt;/settings&gt; 2）在 mapper 文件（如 WebMapper.xml）中设置缓存，默认不开启缓存。需要注意的是，二级缓存的作用域是针对 mapper 的 namescape 而言，即只有再次在 namescape 内（net.biancheng.WebsiteMapper）的查询才能共享这个缓存，代码如下。 123456789&lt;mapper namescape=&quot;net.biancheng.WebsiteMapper&quot;&gt; &lt;!-- cache配置 --&gt; &lt;cache eviction=&quot;FIFO&quot; flushInterval=&quot;60000&quot; size=&quot;512&quot; readOnly=&quot;true&quot; /&gt; ...&lt;/mapper&gt; 属性 说明 eviction 代表的是缓存回收策略，目前 MyBatis 提供以下策略。LRU：使用较少，移除最长时间不用的对象；FIFO：先进先出，按对象进入缓存的顺序来移除它们；SOFT：软引用，移除基于垃圾回收器状态和软引用规则的对象；WEAK：弱引用，更积极地移除基于垃圾收集器状态和弱引用规则的对象。 flushInterval 刷新间隔时间，单位为毫秒，这里配置的是 100 秒刷新，如果省略该配置，那么只有当 SQL 被执行的时候才会刷新缓存。 size 引用数目，正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。这里配置的是 1024 个对象。 readOnly 只读，默认值为 false，意味着缓存数据只能读取而不能修改，这样设置的好处是可以快速读取缓存，缺点是没有办法修改缓存。 3）在 mapper 文件配置支持 cache 后，如果需要对个别查询进行调整，可以单独设置 cache，代码如下。 123&lt;select id=&quot;getWebsiteList&quot; resultType=&quot;net.biancheng.po.Website&quot; usecache=&quot;true&quot;&gt; ...&lt;/select&gt; 对于 MyBatis 缓存仅作了解即可，因为面对一定规模的数据量，内置的 Cache 方式就派不上用场了，并且对查询结果集做缓存并不是 MyBatis 所擅长的，它专心做的应该是 SQL 映射。对于缓存，采用 OSCache、Memcached 等专门的缓存服务器来做更为合理。 29. MyBatis逆向工程Mybatis 提供了一个逆向工程工具，该工具可以根据数据表自动生成针对单表的 po 类、mapper 映射文件和 mapper 接口。 1. 下载jar包 jar包下载链接：https://github.com/mybatis/generator/releases。 12345&lt;dependency&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt; &lt;version&gt;1.4.0&lt;/version&gt;&lt;/dependency&gt; 2. 创建数据表 创建 user、student、studentCard 和 website 数据表， 3.创建项目 创建 NXProject 项目，导入所需 jar 包。 新建资源文件夹 config，在 config 文件夹下创建 genertorConfig.xml 文件，用于配置及指定数据库及表等。 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt; &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;commentGenerator&gt; &lt;!-- 是否去除自动生成的注释 --&gt; &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt; &lt;/commentGenerator&gt; &lt;!-- Mysql数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost:3306/test&quot; userId=&quot;root&quot; password=&quot;root&quot; /&gt; &lt;!-- 默认为false，把JDBC DECIMAL 和NUMERIC类型解析为Integer，为true时 把JDBC DECIMAL 和NUMERIC类型解析为java.math.BigDecimal --&gt; &lt;javaTypeResolver&gt; &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt; &lt;/javaTypeResolver&gt; &lt;!-- targetProject：生成POJO类的位置 --&gt; &lt;javaModelGenerator targetPackage=&quot;net.biancheng.pojo&quot; targetProject=&quot;.\\src&quot;&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt; &lt;!-- 从数据库返回的值被清理前后的空格 --&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt; &lt;/javaModelGenerator&gt; &lt;!-- targetProject：mapper映射文件生成的位置 --&gt; &lt;sqlMapGenerator targetPackage=&quot;net.biancheng.mapper&quot; targetProject=&quot;.\\src&quot;&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt; &lt;/sqlMapGenerator&gt; &lt;!-- targetProject：mapper接口生成的的位置 --&gt; &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;net.biancheng.mapper&quot; targetProject=&quot;.\\src&quot;&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt; &lt;/javaClientGenerator&gt; &lt;!-- 指定数据表 --&gt; &lt;table tableName=&quot;website&quot;&gt;&lt;/table&gt; &lt;table tableName=&quot;student&quot;&gt;&lt;/table&gt; &lt;table tableName=&quot;studentcard&quot;&gt;&lt;/table&gt; &lt;table tableName=&quot;user&quot;&gt;&lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; 12345678910111213141516171819202122public class GeneratorSqlmap &#123; public void generator() throws Exception &#123; List&lt;String&gt; warnings = new ArrayList&lt;String&gt;(); boolean overwrite = true; // 指定配置文件 File configFile = new File(&quot;./config/generatorConfig.xml&quot;); ConfigurationParser cp = new ConfigurationParser(warnings); Configuration config = cp.parseConfiguration(configFile); DefaultShellCallback callback = new DefaultShellCallback(overwrite); MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings); myBatisGenerator.generate(null); &#125; // 执行main方法以生成代码 public static void main(String[] args) &#123; try &#123; GeneratorSqlmap generatorSqlmap = new GeneratorSqlmap(); generatorSqlmap.generator(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 可以看到在 pojo 包中，有一部分是名字为 XxxExample 的类。类中包含以下 3 个成员变量，如下。 123protected String orderByClause;protected boolean distinct;protected List&lt;Criteria&gt; oredCriteria; 以上变量说明如下： distinct 字段用于指定 DISTINCT 查询。 orderByClause 字段用于指定 ORDER BY 条件，这个条件没有构造方法，直接通过传递字符串值指定。 oredCriteria 字段用于自定义查询条件。","path":"2021/07/22/first/","date":"07-22","excerpt":"","tags":[]},{"title":"My New Post","text":"","path":"2021/07/22/My-New-Post/","date":"07-22","excerpt":"","tags":[]},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2021/07/22/hello-world/","date":"07-22","excerpt":"","tags":[]}],"categories":[],"tags":[]}